
TanmayKiJayHo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  0800a350  0800a350  0001a350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4a8  0800a4a8  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4a8  0800a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4b0  0800a4b0  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4b0  0800a4b0  0001a4b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4b4  0800a4b4  0001a4b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800a4b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          00001e80  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fe0  20001fe0  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015d11  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000376f  00000000  00000000  00035ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00039610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f28  00000000  00000000  0003a6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028726  00000000  00000000  0003b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001602c  00000000  00000000  00063cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5f53  00000000  00000000  00079d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015fc6d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d84  00000000  00000000  0015fcc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000160 	.word	0x20000160
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a338 	.word	0x0800a338

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000164 	.word	0x20000164
 80001ec:	0800a338 	.word	0x0800a338

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <LD3_On.0>:

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  void LD3_On() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	f8c7 c004 	str.w	ip, [r7, #4]
  	/* USER CODE END WHILE */
  	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005b4:	4803      	ldr	r0, [pc, #12]	; (80005c4 <LD3_On.0+0x20>)
 80005b6:	f002 f981 	bl	80028bc <HAL_GPIO_WritePin>
  }
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40020400 	.word	0x40020400

080005c8 <main>:
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b08d      	sub	sp, #52	; 0x34
 80005cc:	af02      	add	r7, sp, #8
int main(void)
 80005ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005d2:	617b      	str	r3, [r7, #20]
  HAL_Init();
 80005d4:	f000 fe20 	bl	8001218 <HAL_Init>
  	HAL_Delay(d);
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f890 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 fa48 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e0:	f000 fa16 	bl	8000a10 <MX_DMA_Init>
  MX_UART5_Init();
 80005e4:	f000 f9ea 	bl	80009bc <MX_UART5_Init>
  MX_USB_DEVICE_Init();
 80005e8:	f007 ff8a 	bl	8008500 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80005ec:	f000 f8f0 	bl	80007d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005f0:	f000 f940 	bl	8000874 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005f4:	f000 f990 	bl	8000918 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  int adc_val1;
  int adc_val2;
  int adc_val3;
  int count = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (1)
  {
	  char str1[20];

	     /* Allocate memory for the string */
	  str = (char *) malloc(100 * sizeof(char));
 80005fc:	2064      	movs	r0, #100	; 0x64
 80005fe:	f008 fcc3 	bl	8008f88 <malloc>
 8000602:	4603      	mov	r3, r0
 8000604:	461a      	mov	r2, r3
 8000606:	4b2f      	ldr	r3, [pc, #188]	; (80006c4 <main+0xfc>)
 8000608:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 800060a:	482f      	ldr	r0, [pc, #188]	; (80006c8 <main+0x100>)
 800060c:	f000 fede 	bl	80013cc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000610:	2164      	movs	r1, #100	; 0x64
 8000612:	482d      	ldr	r0, [pc, #180]	; (80006c8 <main+0x100>)
 8000614:	f000 ffac 	bl	8001570 <HAL_ADC_PollForConversion>

	  HAL_ADC_Start(&hadc2);
 8000618:	482c      	ldr	r0, [pc, #176]	; (80006cc <main+0x104>)
 800061a:	f000 fed7 	bl	80013cc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 100);
 800061e:	2164      	movs	r1, #100	; 0x64
 8000620:	482a      	ldr	r0, [pc, #168]	; (80006cc <main+0x104>)
 8000622:	f000 ffa5 	bl	8001570 <HAL_ADC_PollForConversion>

	  HAL_ADC_Start(&hadc3);
 8000626:	482a      	ldr	r0, [pc, #168]	; (80006d0 <main+0x108>)
 8000628:	f000 fed0 	bl	80013cc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, 100);
 800062c:	2164      	movs	r1, #100	; 0x64
 800062e:	4828      	ldr	r0, [pc, #160]	; (80006d0 <main+0x108>)
 8000630:	f000 ff9e 	bl	8001570 <HAL_ADC_PollForConversion>

	  adc_val1=0;
 8000634:	2300      	movs	r3, #0
 8000636:	623b      	str	r3, [r7, #32]
	  adc_val2=0;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
	  adc_val3=0;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]

	  adc_val1 = HAL_ADC_GetValue(&hadc1);
 8000640:	4821      	ldr	r0, [pc, #132]	; (80006c8 <main+0x100>)
 8000642:	f001 f930 	bl	80018a6 <HAL_ADC_GetValue>
 8000646:	4603      	mov	r3, r0
 8000648:	623b      	str	r3, [r7, #32]
	  adc_val2 = HAL_ADC_GetValue(&hadc2);
 800064a:	4820      	ldr	r0, [pc, #128]	; (80006cc <main+0x104>)
 800064c:	f001 f92b 	bl	80018a6 <HAL_ADC_GetValue>
 8000650:	4603      	mov	r3, r0
 8000652:	61fb      	str	r3, [r7, #28]
	  adc_val3 = HAL_ADC_GetValue(&hadc3);
 8000654:	481e      	ldr	r0, [pc, #120]	; (80006d0 <main+0x108>)
 8000656:	f001 f926 	bl	80018a6 <HAL_ADC_GetValue>
 800065a:	4603      	mov	r3, r0
 800065c:	61bb      	str	r3, [r7, #24]

	  count = count + 1;
 800065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000660:	3301      	adds	r3, #1
 8000662:	627b      	str	r3, [r7, #36]	; 0x24

	  if (count%2==0){
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	2b00      	cmp	r3, #0
 800066c:	d11f      	bne.n	80006ae <main+0xe6>
			  LD3_On();
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	469c      	mov	ip, r3
 8000674:	f7ff ff96 	bl	80005a4 <LD3_On.0>
			  sprintf(str, "%d,%d,%d\n", adc_val1, adc_val2, adc_val3);
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <main+0xfc>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	6a3a      	ldr	r2, [r7, #32]
 8000684:	4913      	ldr	r1, [pc, #76]	; (80006d4 <main+0x10c>)
 8000686:	f008 fdad 	bl	80091e4 <siprintf>
			  CDC_Transmit_FS(str, strlen(str));
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <main+0xfc>)
 800068c:	681c      	ldr	r4, [r3, #0]
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <main+0xfc>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fdac 	bl	80001f0 <strlen>
 8000698:	4603      	mov	r3, r0
 800069a:	b29b      	uxth	r3, r3
 800069c:	4619      	mov	r1, r3
 800069e:	4620      	mov	r0, r4
 80006a0:	f007 ffec 	bl	800867c <CDC_Transmit_FS>
			  HAL_Delay (500);
 80006a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006a8:	f000 fe28 	bl	80012fc <HAL_Delay>
 80006ac:	e7a6      	b.n	80005fc <main+0x34>
	  } else {
		  LD3_Off();
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	469c      	mov	ip, r3
 80006b4:	f000 f810 	bl	80006d8 <LD3_Off.1>
		  HAL_Delay (500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006bc:	f000 fe1e 	bl	80012fc <HAL_Delay>
  {
 80006c0:	e79c      	b.n	80005fc <main+0x34>
 80006c2:	bf00      	nop
 80006c4:	200003b8 	.word	0x200003b8
 80006c8:	2000017c 	.word	0x2000017c
 80006cc:	200001c4 	.word	0x200001c4
 80006d0:	2000020c 	.word	0x2000020c
 80006d4:	0800a364 	.word	0x0800a364

080006d8 <LD3_Off.1>:
  void LD3_Off() {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	f8c7 c004 	str.w	ip, [r7, #4]
  	HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006e8:	4803      	ldr	r0, [pc, #12]	; (80006f8 <LD3_Off.1+0x20>)
 80006ea:	f002 f8e7 	bl	80028bc <HAL_GPIO_WritePin>
  }
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40020400 	.word	0x40020400

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	; 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f008 fc44 	bl	8008f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a27      	ldr	r2, [pc, #156]	; (80007c8 <SystemClock_Config+0xcc>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <SystemClock_Config+0xd0>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000758:	2301      	movs	r3, #1
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800076c:	2304      	movs	r3, #4
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000770:	23a8      	movs	r3, #168	; 0xa8
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000778:	2307      	movs	r3, #7
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f003 fb31 	bl	8003de8 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 f9ec 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2105      	movs	r1, #5
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fd92 	bl	80042d8 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ba:	f000 f9d5 	bl	8000b68 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007e2:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_ADC1_Init+0x98>)
 80007e4:	4a21      	ldr	r2, [pc, #132]	; (800086c <MX_ADC1_Init+0x9c>)
 80007e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC1_Init+0x98>)
 80007ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ADC1_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ADC1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ADC1_Init+0x98>)
 80007fe:	2201      	movs	r2, #1
 8000800:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ADC1_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_ADC1_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_ADC1_Init+0x98>)
 8000812:	4a17      	ldr	r2, [pc, #92]	; (8000870 <MX_ADC1_Init+0xa0>)
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_ADC1_Init+0x98>)
 800081e:	2201      	movs	r2, #1
 8000820:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_ADC1_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_ADC1_Init+0x98>)
 800082c:	2201      	movs	r2, #1
 800082e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_ADC1_Init+0x98>)
 8000832:	f000 fd87 	bl	8001344 <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800083c:	f000 f994 	bl	8000b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_ADC1_Init+0x98>)
 8000852:	f001 f853 	bl	80018fc <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800085c:	f000 f984 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000017c 	.word	0x2000017c
 800086c:	40012000 	.word	0x40012000
 8000870:	0f000001 	.word	0x0f000001

08000874 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_ADC2_Init+0x98>)
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <MX_ADC2_Init+0x9c>)
 800088a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_ADC2_Init+0x98>)
 800088e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000892:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_ADC2_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_ADC2_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_ADC2_Init+0x98>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_ADC2_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_ADC2_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_ADC2_Init+0x98>)
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <MX_ADC2_Init+0xa0>)
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_ADC2_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_ADC2_Init+0x98>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_ADC2_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_ADC2_Init+0x98>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_ADC2_Init+0x98>)
 80008d6:	f000 fd35 	bl	8001344 <HAL_ADC_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 f942 	bl	8000b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_ADC2_Init+0x98>)
 80008f6:	f001 f801 	bl	80018fc <HAL_ADC_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000900:	f000 f932 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200001c4 	.word	0x200001c4
 8000910:	40012100 	.word	0x40012100
 8000914:	0f000001 	.word	0x0f000001

08000918 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800091e:	463b      	mov	r3, r7
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800092a:	4b21      	ldr	r3, [pc, #132]	; (80009b0 <MX_ADC3_Init+0x98>)
 800092c:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <MX_ADC3_Init+0x9c>)
 800092e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <MX_ADC3_Init+0x98>)
 8000932:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000936:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <MX_ADC3_Init+0x98>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_ADC3_Init+0x98>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_ADC3_Init+0x98>)
 8000946:	2201      	movs	r2, #1
 8000948:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800094a:	4b19      	ldr	r3, [pc, #100]	; (80009b0 <MX_ADC3_Init+0x98>)
 800094c:	2200      	movs	r2, #0
 800094e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000952:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_ADC3_Init+0x98>)
 8000954:	2200      	movs	r2, #0
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_ADC3_Init+0x98>)
 800095a:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <MX_ADC3_Init+0xa0>)
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800095e:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_ADC3_Init+0x98>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_ADC3_Init+0x98>)
 8000966:	2201      	movs	r2, #1
 8000968:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_ADC3_Init+0x98>)
 800096c:	2200      	movs	r2, #0
 800096e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000972:	4b0f      	ldr	r3, [pc, #60]	; (80009b0 <MX_ADC3_Init+0x98>)
 8000974:	2201      	movs	r2, #1
 8000976:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_ADC3_Init+0x98>)
 800097a:	f000 fce3 	bl	8001344 <HAL_ADC_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000984:	f000 f8f0 	bl	8000b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000988:	2306      	movs	r3, #6
 800098a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800098c:	2301      	movs	r3, #1
 800098e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_ADC3_Init+0x98>)
 800099a:	f000 ffaf 	bl	80018fc <HAL_ADC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80009a4:	f000 f8e0 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	2000020c 	.word	0x2000020c
 80009b4:	40012200 	.word	0x40012200
 80009b8:	0f000001 	.word	0x0f000001

080009bc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_UART5_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_UART5_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_UART5_Init+0x4c>)
 80009c8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009cc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_UART5_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_UART5_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_UART5_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_UART5_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_UART5_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_UART5_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_UART5_Init+0x4c>)
 80009f4:	f003 fe90 	bl	8004718 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 f8b3 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000374 	.word	0x20000374
 8000a0c:	40005000 	.word	0x40005000

08000a10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_DMA_Init+0x5c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <MX_DMA_Init+0x5c>)
 8000a20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_DMA_Init+0x5c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2038      	movs	r0, #56	; 0x38
 8000a38:	f001 fa73 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a3c:	2038      	movs	r0, #56	; 0x38
 8000a3e:	f001 fa8c 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2039      	movs	r0, #57	; 0x39
 8000a48:	f001 fa6b 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a4c:	2039      	movs	r0, #57	; 0x39
 8000a4e:	f001 fa84 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	203a      	movs	r0, #58	; 0x3a
 8000a58:	f001 fa63 	bl	8001f22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a5c:	203a      	movs	r0, #58	; 0x3a
 8000a5e:	f001 fa7c 	bl	8001f5a <HAL_NVIC_EnableIRQ>

}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
 8000a8a:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a34      	ldr	r2, [pc, #208]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000a90:	f043 0320 	orr.w	r3, r3, #32
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0320 	and.w	r3, r3, #32
 8000a9e:	61bb      	str	r3, [r7, #24]
 8000aa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a2d      	ldr	r2, [pc, #180]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a26      	ldr	r2, [pc, #152]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a1f      	ldr	r2, [pc, #124]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_GPIO_Init+0xf0>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0308 	and.w	r3, r3, #8
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b34:	480b      	ldr	r0, [pc, #44]	; (8000b64 <MX_GPIO_Init+0xf4>)
 8000b36:	f001 fec1 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_GPIO_Init+0xf4>)
 8000b54:	f001 fd06 	bl	8002564 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b58:	bf00      	nop
 8000b5a:	3730      	adds	r7, #48	; 0x30
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020400 	.word	0x40020400

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <Error_Handler+0x8>
	...

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a0f      	ldr	r2, [pc, #60]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08e      	sub	sp, #56	; 0x38
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a65      	ldr	r2, [pc, #404]	; (8000d78 <HAL_ADC_MspInit+0x1b4>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d160      	bne.n	8000ca8 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
 8000bea:	4b64      	ldr	r3, [pc, #400]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a63      	ldr	r2, [pc, #396]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b61      	ldr	r3, [pc, #388]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bfe:	623b      	str	r3, [r7, #32]
 8000c00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	4b5d      	ldr	r3, [pc, #372]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a5c      	ldr	r2, [pc, #368]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b5a      	ldr	r3, [pc, #360]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
 8000c1c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c22:	2303      	movs	r3, #3
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4853      	ldr	r0, [pc, #332]	; (8000d80 <HAL_ADC_MspInit+0x1bc>)
 8000c32:	f001 fc97 	bl	8002564 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c36:	4b53      	ldr	r3, [pc, #332]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c38:	4a53      	ldr	r2, [pc, #332]	; (8000d88 <HAL_ADC_MspInit+0x1c4>)
 8000c3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c3c:	4b51      	ldr	r3, [pc, #324]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c42:	4b50      	ldr	r3, [pc, #320]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c48:	4b4e      	ldr	r3, [pc, #312]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c4e:	4b4d      	ldr	r3, [pc, #308]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c56:	4b4b      	ldr	r3, [pc, #300]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c5e:	4b49      	ldr	r3, [pc, #292]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c66:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c6e:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c74:	4b43      	ldr	r3, [pc, #268]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c7a:	4842      	ldr	r0, [pc, #264]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c7c:	f001 f988 	bl	8001f90 <HAL_DMA_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c86:	f7ff ff6f 	bl	8000b68 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a3d      	ldr	r2, [pc, #244]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c8e:	639a      	str	r2, [r3, #56]	; 0x38
 8000c90:	4a3c      	ldr	r2, [pc, #240]	; (8000d84 <HAL_ADC_MspInit+0x1c0>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2012      	movs	r0, #18
 8000c9c:	f001 f941 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ca0:	2012      	movs	r0, #18
 8000ca2:	f001 f95a 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000ca6:	e0f8      	b.n	8000e9a <HAL_ADC_MspInit+0x2d6>
  else if(hadc->Instance==ADC2)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a37      	ldr	r2, [pc, #220]	; (8000d8c <HAL_ADC_MspInit+0x1c8>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d172      	bne.n	8000d98 <HAL_ADC_MspInit+0x1d4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	4a30      	ldr	r2, [pc, #192]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000cbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cc2:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cca:	61bb      	str	r3, [r7, #24]
 8000ccc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	4b2a      	ldr	r3, [pc, #168]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a29      	ldr	r2, [pc, #164]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <HAL_ADC_MspInit+0x1b8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cea:	2310      	movs	r3, #16
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4820      	ldr	r0, [pc, #128]	; (8000d80 <HAL_ADC_MspInit+0x1bc>)
 8000cfe:	f001 fc31 	bl	8002564 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d04:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <HAL_ADC_MspInit+0x1d0>)
 8000d06:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8000d08:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000d0e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d22:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d2a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d32:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d3a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d42:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000d48:	4811      	ldr	r0, [pc, #68]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d4a:	f001 f921 	bl	8001f90 <HAL_DMA_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_ADC_MspInit+0x194>
      Error_Handler();
 8000d54:	f7ff ff08 	bl	8000b68 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8000d5e:	4a0c      	ldr	r2, [pc, #48]	; (8000d90 <HAL_ADC_MspInit+0x1cc>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	2100      	movs	r1, #0
 8000d68:	2012      	movs	r0, #18
 8000d6a:	f001 f8da 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d6e:	2012      	movs	r0, #18
 8000d70:	f001 f8f3 	bl	8001f5a <HAL_NVIC_EnableIRQ>
}
 8000d74:	e091      	b.n	8000e9a <HAL_ADC_MspInit+0x2d6>
 8000d76:	bf00      	nop
 8000d78:	40012000 	.word	0x40012000
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	20000254 	.word	0x20000254
 8000d88:	40026410 	.word	0x40026410
 8000d8c:	40012100 	.word	0x40012100
 8000d90:	200002b4 	.word	0x200002b4
 8000d94:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a41      	ldr	r2, [pc, #260]	; (8000ea4 <HAL_ADC_MspInit+0x2e0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d17b      	bne.n	8000e9a <HAL_ADC_MspInit+0x2d6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b40      	ldr	r3, [pc, #256]	; (8000ea8 <HAL_ADC_MspInit+0x2e4>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	4a3f      	ldr	r2, [pc, #252]	; (8000ea8 <HAL_ADC_MspInit+0x2e4>)
 8000dac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db0:	6453      	str	r3, [r2, #68]	; 0x44
 8000db2:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <HAL_ADC_MspInit+0x2e4>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b39      	ldr	r3, [pc, #228]	; (8000ea8 <HAL_ADC_MspInit+0x2e4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a38      	ldr	r2, [pc, #224]	; (8000ea8 <HAL_ADC_MspInit+0x2e4>)
 8000dc8:	f043 0320 	orr.w	r3, r3, #32
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b36      	ldr	r3, [pc, #216]	; (8000ea8 <HAL_ADC_MspInit+0x2e4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0320 	and.w	r3, r3, #32
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <HAL_ADC_MspInit+0x2e4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a31      	ldr	r2, [pc, #196]	; (8000ea8 <HAL_ADC_MspInit+0x2e4>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <HAL_ADC_MspInit+0x2e4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000df6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4828      	ldr	r0, [pc, #160]	; (8000eac <HAL_ADC_MspInit+0x2e8>)
 8000e0c:	f001 fbaa 	bl	8002564 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e10:	2304      	movs	r3, #4
 8000e12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e14:	2303      	movs	r3, #3
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	4823      	ldr	r0, [pc, #140]	; (8000eb0 <HAL_ADC_MspInit+0x2ec>)
 8000e24:	f001 fb9e 	bl	8002564 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e2a:	4a23      	ldr	r2, [pc, #140]	; (8000eb8 <HAL_ADC_MspInit+0x2f4>)
 8000e2c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e34:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e48:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e50:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e54:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e58:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e60:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000e6e:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e70:	f001 f88e 	bl	8001f90 <HAL_DMA_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_ADC_MspInit+0x2ba>
      Error_Handler();
 8000e7a:	f7ff fe75 	bl	8000b68 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a0c      	ldr	r2, [pc, #48]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e82:	639a      	str	r2, [r3, #56]	; 0x38
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_ADC_MspInit+0x2f0>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	2012      	movs	r0, #18
 8000e90:	f001 f847 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e94:	2012      	movs	r0, #18
 8000e96:	f001 f860 	bl	8001f5a <HAL_NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3738      	adds	r7, #56	; 0x38
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40012200 	.word	0x40012200
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	40021400 	.word	0x40021400
 8000eb0:	40020000 	.word	0x40020000
 8000eb4:	20000314 	.word	0x20000314
 8000eb8:	40026428 	.word	0x40026428

08000ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a28      	ldr	r2, [pc, #160]	; (8000f7c <HAL_UART_MspInit+0xc0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d14a      	bne.n	8000f74 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <HAL_UART_MspInit+0xc4>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	4a26      	ldr	r2, [pc, #152]	; (8000f80 <HAL_UART_MspInit+0xc4>)
 8000ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000eec:	6413      	str	r3, [r2, #64]	; 0x40
 8000eee:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <HAL_UART_MspInit+0xc4>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef6:	613b      	str	r3, [r7, #16]
 8000ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <HAL_UART_MspInit+0xc4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_UART_MspInit+0xc4>)
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_UART_MspInit+0xc4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0304 	and.w	r3, r3, #4
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <HAL_UART_MspInit+0xc4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <HAL_UART_MspInit+0xc4>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_UART_MspInit+0xc4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f44:	2308      	movs	r3, #8
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <HAL_UART_MspInit+0xc8>)
 8000f50:	f001 fb08 	bl	8002564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f54:	2304      	movs	r3, #4
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f64:	2308      	movs	r3, #8
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <HAL_UART_MspInit+0xcc>)
 8000f70:	f001 faf8 	bl	8002564 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40005000 	.word	0x40005000
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020800 	.word	0x40020800
 8000f88:	40020c00 	.word	0x40020c00

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd8:	f000 f970 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <ADC_IRQHandler+0x1c>)
 8000fe6:	f000 fb4e 	bl	8001686 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <ADC_IRQHandler+0x20>)
 8000fec:	f000 fb4b 	bl	8001686 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <ADC_IRQHandler+0x24>)
 8000ff2:	f000 fb48 	bl	8001686 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000017c 	.word	0x2000017c
 8001000:	200001c4 	.word	0x200001c4
 8001004:	2000020c 	.word	0x2000020c

08001008 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800100c:	4802      	ldr	r0, [pc, #8]	; (8001018 <DMA2_Stream0_IRQHandler+0x10>)
 800100e:	f001 f86d 	bl	80020ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000254 	.word	0x20000254

0800101c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001020:	4802      	ldr	r0, [pc, #8]	; (800102c <DMA2_Stream1_IRQHandler+0x10>)
 8001022:	f001 f863 	bl	80020ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000314 	.word	0x20000314

08001030 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <DMA2_Stream2_IRQHandler+0x10>)
 8001036:	f001 f859 	bl	80020ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200002b4 	.word	0x200002b4

08001044 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <OTG_FS_IRQHandler+0x10>)
 800104a:	f001 fda0 	bl	8002b8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200018a4 	.word	0x200018a4

08001058 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	e00a      	b.n	8001080 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800106a:	f3af 8000 	nop.w
 800106e:	4601      	mov	r1, r0
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	60ba      	str	r2, [r7, #8]
 8001076:	b2ca      	uxtb	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbf0      	blt.n	800106a <_read+0x12>
  }

  return len;
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	60f8      	str	r0, [r7, #12]
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	e009      	b.n	80010b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1c5a      	adds	r2, r3, #1
 80010a8:	60ba      	str	r2, [r7, #8]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbf1      	blt.n	80010a4 <_write+0x12>
  }
  return len;
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <_close>:

int _close(int file)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f2:	605a      	str	r2, [r3, #4]
  return 0;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <_isatty>:

int _isatty(int file)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800110a:	2301      	movs	r3, #1
}
 800110c:	4618      	mov	r0, r3
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3714      	adds	r7, #20
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f007 fee6 	bl	8008f34 <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <_sbrk+0x64>)
 8001184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20030000 	.word	0x20030000
 8001194:	00000400 	.word	0x00000400
 8001198:	200003bc 	.word	0x200003bc
 800119c:	20001fe0 	.word	0x20001fe0

080011a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <SystemInit+0x20>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <SystemInit+0x20>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e0:	4c0b      	ldr	r4, [pc, #44]	; (8001210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ee:	f7ff ffd7 	bl	80011a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f2:	f007 fea5 	bl	8008f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff f9e7 	bl	80005c8 <main>
  bx  lr    
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011fc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8001208:	0800a4b8 	.word	0x0800a4b8
  ldr r2, =_sbss
 800120c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8001210:	20001fe0 	.word	0x20001fe0

08001214 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <CAN1_RX0_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <HAL_Init+0x40>)
 8001222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_Init+0x40>)
 800122e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_Init+0x40>)
 800123a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 fe63 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	2000      	movs	r0, #0
 8001248:	f000 f808 	bl	800125c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f7ff fc92 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023c00 	.word	0x40023c00

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_InitTick+0x54>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x58>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001272:	fbb3 f3f1 	udiv	r3, r3, r1
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f000 fe7b 	bl	8001f76 <HAL_SYSTICK_Config>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e00e      	b.n	80012a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d80a      	bhi.n	80012a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f000 fe43 	bl	8001f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <HAL_InitTick+0x5c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000004 	.word	0x20000004

080012bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008
 80012e0:	200003c0 	.word	0x200003c0

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200003c0 	.word	0x200003c0

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008

08001344 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134c:	2300      	movs	r3, #0
 800134e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e033      	b.n	80013c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fc2e 	bl	8000bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	2b00      	cmp	r3, #0
 8001380:	d118      	bne.n	80013b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800138a:	f023 0302 	bic.w	r3, r3, #2
 800138e:	f043 0202 	orr.w	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fbe2 	bl	8001b60 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f023 0303 	bic.w	r3, r3, #3
 80013aa:	f043 0201 	orr.w	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40
 80013b2:	e001      	b.n	80013b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d101      	bne.n	80013e6 <HAL_ADC_Start+0x1a>
 80013e2:	2302      	movs	r3, #2
 80013e4:	e0b2      	b.n	800154c <HAL_ADC_Start+0x180>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d018      	beq.n	800142e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f042 0201 	orr.w	r2, r2, #1
 800140a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800140c:	4b52      	ldr	r3, [pc, #328]	; (8001558 <HAL_ADC_Start+0x18c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a52      	ldr	r2, [pc, #328]	; (800155c <HAL_ADC_Start+0x190>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0c9a      	lsrs	r2, r3, #18
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001420:	e002      	b.n	8001428 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	3b01      	subs	r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f9      	bne.n	8001422 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d17a      	bne.n	8001532 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001466:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800147a:	d106      	bne.n	800148a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	f023 0206 	bic.w	r2, r3, #6
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	645a      	str	r2, [r3, #68]	; 0x44
 8001488:	e002      	b.n	8001490 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001498:	4b31      	ldr	r3, [pc, #196]	; (8001560 <HAL_ADC_Start+0x194>)
 800149a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d12a      	bne.n	8001508 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a2b      	ldr	r2, [pc, #172]	; (8001564 <HAL_ADC_Start+0x198>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d015      	beq.n	80014e8 <HAL_ADC_Start+0x11c>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a29      	ldr	r2, [pc, #164]	; (8001568 <HAL_ADC_Start+0x19c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d105      	bne.n	80014d2 <HAL_ADC_Start+0x106>
 80014c6:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_ADC_Start+0x194>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00a      	beq.n	80014e8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a25      	ldr	r2, [pc, #148]	; (800156c <HAL_ADC_Start+0x1a0>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d136      	bne.n	800154a <HAL_ADC_Start+0x17e>
 80014dc:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_ADC_Start+0x194>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d130      	bne.n	800154a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d129      	bne.n	800154a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	e020      	b.n	800154a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a15      	ldr	r2, [pc, #84]	; (8001564 <HAL_ADC_Start+0x198>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d11b      	bne.n	800154a <HAL_ADC_Start+0x17e>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d114      	bne.n	800154a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	e00b      	b.n	800154a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f043 0210 	orr.w	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	f043 0201 	orr.w	r2, r3, #1
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	20000000 	.word	0x20000000
 800155c:	431bde83 	.word	0x431bde83
 8001560:	40012300 	.word	0x40012300
 8001564:	40012000 	.word	0x40012000
 8001568:	40012100 	.word	0x40012100
 800156c:	40012200 	.word	0x40012200

08001570 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158c:	d113      	bne.n	80015b6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800159c:	d10b      	bne.n	80015b6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f043 0220 	orr.w	r2, r3, #32
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e063      	b.n	800167e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015b6:	f7ff fe95 	bl	80012e4 <HAL_GetTick>
 80015ba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015bc:	e021      	b.n	8001602 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c4:	d01d      	beq.n	8001602 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d007      	beq.n	80015dc <HAL_ADC_PollForConversion+0x6c>
 80015cc:	f7ff fe8a 	bl	80012e4 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d212      	bcs.n	8001602 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d00b      	beq.n	8001602 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f043 0204 	orr.w	r2, r3, #4
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e03d      	b.n	800167e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b02      	cmp	r3, #2
 800160e:	d1d6      	bne.n	80015be <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f06f 0212 	mvn.w	r2, #18
 8001618:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d123      	bne.n	800167c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001638:	2b00      	cmp	r3, #0
 800163a:	d11f      	bne.n	800167c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001646:	2b00      	cmp	r3, #0
 8001648:	d006      	beq.n	8001658 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001654:	2b00      	cmp	r3, #0
 8001656:	d111      	bne.n	800167c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	f003 0320 	and.w	r3, r3, #32
 80016b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d049      	beq.n	8001750 <HAL_ADC_IRQHandler+0xca>
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d046      	beq.n	8001750 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d105      	bne.n	80016da <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d12b      	bne.n	8001740 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d127      	bne.n	8001740 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d006      	beq.n	800170c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001708:	2b00      	cmp	r3, #0
 800170a:	d119      	bne.n	8001740 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0220 	bic.w	r2, r2, #32
 800171a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d105      	bne.n	8001740 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	f043 0201 	orr.w	r2, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f8bd 	bl	80018c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f06f 0212 	mvn.w	r2, #18
 800174e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d057      	beq.n	8001816 <HAL_ADC_IRQHandler+0x190>
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d054      	beq.n	8001816 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f003 0310 	and.w	r3, r3, #16
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d139      	bne.n	8001806 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001798:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800179c:	2b00      	cmp	r3, #0
 800179e:	d006      	beq.n	80017ae <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d12b      	bne.n	8001806 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d124      	bne.n	8001806 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d11d      	bne.n	8001806 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d105      	bne.n	8001806 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f043 0201 	orr.w	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 faa6 	bl	8001d58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f06f 020c 	mvn.w	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001824:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d017      	beq.n	800185c <HAL_ADC_IRQHandler+0x1d6>
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d014      	beq.n	800185c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10d      	bne.n	800185c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f000 f841 	bl	80018d4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f06f 0201 	mvn.w	r2, #1
 800185a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0320 	and.w	r3, r3, #32
 8001862:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800186a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d015      	beq.n	800189e <HAL_ADC_IRQHandler+0x218>
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d012      	beq.n	800189e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	f043 0202 	orr.w	r2, r3, #2
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0220 	mvn.w	r2, #32
 800188c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f82a 	bl	80018e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0220 	mvn.w	r2, #32
 800189c:	601a      	str	r2, [r3, #0]
  }
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x1c>
 8001914:	2302      	movs	r3, #2
 8001916:	e113      	b.n	8001b40 <HAL_ADC_ConfigChannel+0x244>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b09      	cmp	r3, #9
 8001926:	d925      	bls.n	8001974 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68d9      	ldr	r1, [r3, #12]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	461a      	mov	r2, r3
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	3b1e      	subs	r3, #30
 800193e:	2207      	movs	r2, #7
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43da      	mvns	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	400a      	ands	r2, r1
 800194c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68d9      	ldr	r1, [r3, #12]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	4618      	mov	r0, r3
 8001960:	4603      	mov	r3, r0
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4403      	add	r3, r0
 8001966:	3b1e      	subs	r3, #30
 8001968:	409a      	lsls	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	e022      	b.n	80019ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6919      	ldr	r1, [r3, #16]
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	2207      	movs	r2, #7
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	400a      	ands	r2, r1
 8001996:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6919      	ldr	r1, [r3, #16]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4618      	mov	r0, r3
 80019aa:	4603      	mov	r3, r0
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4403      	add	r3, r0
 80019b0:	409a      	lsls	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b06      	cmp	r3, #6
 80019c0:	d824      	bhi.n	8001a0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4613      	mov	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	4413      	add	r3, r2
 80019d2:	3b05      	subs	r3, #5
 80019d4:	221f      	movs	r2, #31
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	400a      	ands	r2, r1
 80019e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4618      	mov	r0, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	3b05      	subs	r3, #5
 80019fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
 8001a0a:	e04c      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d824      	bhi.n	8001a5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	3b23      	subs	r3, #35	; 0x23
 8001a26:	221f      	movs	r2, #31
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43da      	mvns	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	400a      	ands	r2, r1
 8001a34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4618      	mov	r0, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3b23      	subs	r3, #35	; 0x23
 8001a50:	fa00 f203 	lsl.w	r2, r0, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a5c:	e023      	b.n	8001aa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b41      	subs	r3, #65	; 0x41
 8001a70:	221f      	movs	r2, #31
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	3b41      	subs	r3, #65	; 0x41
 8001a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_ADC_ConfigChannel+0x250>)
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a28      	ldr	r2, [pc, #160]	; (8001b50 <HAL_ADC_ConfigChannel+0x254>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d10f      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d8>
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b12      	cmp	r3, #18
 8001aba:	d10b      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1d      	ldr	r2, [pc, #116]	; (8001b50 <HAL_ADC_ConfigChannel+0x254>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d12b      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x23a>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <HAL_ADC_ConfigChannel+0x258>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d003      	beq.n	8001af0 <HAL_ADC_ConfigChannel+0x1f4>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b11      	cmp	r3, #17
 8001aee:	d122      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_ADC_ConfigChannel+0x258>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d111      	bne.n	8001b36 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_ADC_ConfigChannel+0x25c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <HAL_ADC_ConfigChannel+0x260>)
 8001b18:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1c:	0c9a      	lsrs	r2, r3, #18
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b28:	e002      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f9      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40012300 	.word	0x40012300
 8001b50:	40012000 	.word	0x40012000
 8001b54:	10000012 	.word	0x10000012
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	431bde83 	.word	0x431bde83

08001b60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b68:	4b79      	ldr	r3, [pc, #484]	; (8001d50 <ADC_Init+0x1f0>)
 8001b6a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	431a      	orrs	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	021a      	lsls	r2, r3, #8
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6899      	ldr	r1, [r3, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	4a58      	ldr	r2, [pc, #352]	; (8001d54 <ADC_Init+0x1f4>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d022      	beq.n	8001c3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6899      	ldr	r1, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6899      	ldr	r1, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	e00f      	b.n	8001c5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0202 	bic.w	r2, r2, #2
 8001c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6899      	ldr	r1, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	7e1b      	ldrb	r3, [r3, #24]
 8001c78:	005a      	lsls	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01b      	beq.n	8001cc4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001caa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6859      	ldr	r1, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	035a      	lsls	r2, r3, #13
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	e007      	b.n	8001cd4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cd2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	051a      	lsls	r2, r3, #20
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6899      	ldr	r1, [r3, #8]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d16:	025a      	lsls	r2, r3, #9
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6899      	ldr	r1, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	029a      	lsls	r2, r3, #10
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40012300 	.word	0x40012300
 8001d54:	0f000001 	.word	0x0f000001

08001d58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	db0b      	blt.n	8001dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	f003 021f 	and.w	r2, r3, #31
 8001de8:	4907      	ldr	r1, [pc, #28]	; (8001e08 <__NVIC_EnableIRQ+0x38>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	095b      	lsrs	r3, r3, #5
 8001df0:	2001      	movs	r0, #1
 8001df2:	fa00 f202 	lsl.w	r2, r0, r2
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100

08001e0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	6039      	str	r1, [r7, #0]
 8001e16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	db0a      	blt.n	8001e36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	490c      	ldr	r1, [pc, #48]	; (8001e58 <__NVIC_SetPriority+0x4c>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	0112      	lsls	r2, r2, #4
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e34:	e00a      	b.n	8001e4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4908      	ldr	r1, [pc, #32]	; (8001e5c <__NVIC_SetPriority+0x50>)
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	3b04      	subs	r3, #4
 8001e44:	0112      	lsls	r2, r2, #4
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	440b      	add	r3, r1
 8001e4a:	761a      	strb	r2, [r3, #24]
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	f1c3 0307 	rsb	r3, r3, #7
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	bf28      	it	cs
 8001e7e:	2304      	movcs	r3, #4
 8001e80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2b06      	cmp	r3, #6
 8001e88:	d902      	bls.n	8001e90 <NVIC_EncodePriority+0x30>
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3b03      	subs	r3, #3
 8001e8e:	e000      	b.n	8001e92 <NVIC_EncodePriority+0x32>
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e94:	f04f 32ff 	mov.w	r2, #4294967295
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43da      	mvns	r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb2:	43d9      	mvns	r1, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	4313      	orrs	r3, r2
         );
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3724      	adds	r7, #36	; 0x24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a0a      	ldr	r2, [pc, #40]	; (8001f08 <SysTick_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f7ff ff8e 	bl	8001e0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <SysTick_Config+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <SysTick_Config+0x40>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff29 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff3e 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff8e 	bl	8001e60 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff5d 	bl	8001e0c <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff31 	bl	8001dd0 <__NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff ffa2 	bl	8001ec8 <SysTick_Config>
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff f9a2 	bl	80012e4 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e099      	b.n	80020e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2202      	movs	r2, #2
 8001fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0201 	bic.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fcc:	e00f      	b.n	8001fee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fce:	f7ff f989 	bl	80012e4 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d908      	bls.n	8001fee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e078      	b.n	80020e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1e8      	bne.n	8001fce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	4b38      	ldr	r3, [pc, #224]	; (80020e8 <HAL_DMA_Init+0x158>)
 8002008:	4013      	ands	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800201a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4313      	orrs	r3, r2
 800203e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002044:	2b04      	cmp	r3, #4
 8002046:	d107      	bne.n	8002058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	4313      	orrs	r3, r2
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	4313      	orrs	r3, r2
 8002056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f023 0307 	bic.w	r3, r3, #7
 800206e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	2b04      	cmp	r3, #4
 8002080:	d117      	bne.n	80020b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	4313      	orrs	r3, r2
 800208a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00e      	beq.n	80020b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f9e9 	bl	800246c <DMA_CheckFifoParam>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2240      	movs	r2, #64	; 0x40
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80020ae:	2301      	movs	r3, #1
 80020b0:	e016      	b.n	80020e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f9a0 	bl	8002400 <DMA_CalcBaseAndBitshift>
 80020c0:	4603      	mov	r3, r0
 80020c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	223f      	movs	r2, #63	; 0x3f
 80020ca:	409a      	lsls	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	f010803f 	.word	0xf010803f

080020ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80020f8:	4b8e      	ldr	r3, [pc, #568]	; (8002334 <HAL_DMA_IRQHandler+0x248>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a8e      	ldr	r2, [pc, #568]	; (8002338 <HAL_DMA_IRQHandler+0x24c>)
 80020fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002102:	0a9b      	lsrs	r3, r3, #10
 8002104:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2208      	movs	r2, #8
 8002118:	409a      	lsls	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	4013      	ands	r3, r2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d01a      	beq.n	8002158 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d013      	beq.n	8002158 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f022 0204 	bic.w	r2, r2, #4
 800213e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002144:	2208      	movs	r2, #8
 8002146:	409a      	lsls	r2, r3
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215c:	2201      	movs	r2, #1
 800215e:	409a      	lsls	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00b      	beq.n	800218e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	2201      	movs	r2, #1
 800217c:	409a      	lsls	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002186:	f043 0202 	orr.w	r2, r3, #2
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	2204      	movs	r2, #4
 8002194:	409a      	lsls	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4013      	ands	r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d012      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00b      	beq.n	80021c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b0:	2204      	movs	r2, #4
 80021b2:	409a      	lsls	r2, r3
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021bc:	f043 0204 	orr.w	r2, r3, #4
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c8:	2210      	movs	r2, #16
 80021ca:	409a      	lsls	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d043      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d03c      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	2210      	movs	r2, #16
 80021e8:	409a      	lsls	r2, r3
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d018      	beq.n	800222e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d108      	bne.n	800221c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d024      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	4798      	blx	r3
 800221a:	e01f      	b.n	800225c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002220:	2b00      	cmp	r3, #0
 8002222:	d01b      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	4798      	blx	r3
 800222c:	e016      	b.n	800225c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0208 	bic.w	r2, r2, #8
 800224a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	2220      	movs	r2, #32
 8002262:	409a      	lsls	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 808f 	beq.w	800238c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0310 	and.w	r3, r3, #16
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 8087 	beq.w	800238c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2220      	movs	r2, #32
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b05      	cmp	r3, #5
 8002294:	d136      	bne.n	8002304 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0216 	bic.w	r2, r2, #22
 80022a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d103      	bne.n	80022c6 <HAL_DMA_IRQHandler+0x1da>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d007      	beq.n	80022d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 0208 	bic.w	r2, r2, #8
 80022d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	223f      	movs	r2, #63	; 0x3f
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d07e      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	4798      	blx	r3
        }
        return;
 8002302:	e079      	b.n	80023f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d01d      	beq.n	800234e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10d      	bne.n	800233c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002324:	2b00      	cmp	r3, #0
 8002326:	d031      	beq.n	800238c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
 8002330:	e02c      	b.n	800238c <HAL_DMA_IRQHandler+0x2a0>
 8002332:	bf00      	nop
 8002334:	20000000 	.word	0x20000000
 8002338:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d023      	beq.n	800238c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	4798      	blx	r3
 800234c:	e01e      	b.n	800238c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10f      	bne.n	800237c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0210 	bic.w	r2, r2, #16
 800236a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002390:	2b00      	cmp	r3, #0
 8002392:	d032      	beq.n	80023fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b00      	cmp	r3, #0
 800239e:	d022      	beq.n	80023e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2205      	movs	r2, #5
 80023a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	3301      	adds	r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d307      	bcc.n	80023d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f2      	bne.n	80023b8 <HAL_DMA_IRQHandler+0x2cc>
 80023d2:	e000      	b.n	80023d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80023d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
 80023f6:	e000      	b.n	80023fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80023f8:	bf00      	nop
    }
  }
}
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	3b10      	subs	r3, #16
 8002410:	4a14      	ldr	r2, [pc, #80]	; (8002464 <DMA_CalcBaseAndBitshift+0x64>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800241a:	4a13      	ldr	r2, [pc, #76]	; (8002468 <DMA_CalcBaseAndBitshift+0x68>)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	461a      	mov	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d909      	bls.n	8002442 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002436:	f023 0303 	bic.w	r3, r3, #3
 800243a:	1d1a      	adds	r2, r3, #4
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	659a      	str	r2, [r3, #88]	; 0x58
 8002440:	e007      	b.n	8002452 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	aaaaaaab 	.word	0xaaaaaaab
 8002468:	0800a408 	.word	0x0800a408

0800246c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d11f      	bne.n	80024c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d856      	bhi.n	800253a <DMA_CheckFifoParam+0xce>
 800248c:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <DMA_CheckFifoParam+0x28>)
 800248e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002492:	bf00      	nop
 8002494:	080024a5 	.word	0x080024a5
 8002498:	080024b7 	.word	0x080024b7
 800249c:	080024a5 	.word	0x080024a5
 80024a0:	0800253b 	.word	0x0800253b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d046      	beq.n	800253e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b4:	e043      	b.n	800253e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024be:	d140      	bne.n	8002542 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024c4:	e03d      	b.n	8002542 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ce:	d121      	bne.n	8002514 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d837      	bhi.n	8002546 <DMA_CheckFifoParam+0xda>
 80024d6:	a201      	add	r2, pc, #4	; (adr r2, 80024dc <DMA_CheckFifoParam+0x70>)
 80024d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024dc:	080024ed 	.word	0x080024ed
 80024e0:	080024f3 	.word	0x080024f3
 80024e4:	080024ed 	.word	0x080024ed
 80024e8:	08002505 	.word	0x08002505
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
      break;
 80024f0:	e030      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d025      	beq.n	800254a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002502:	e022      	b.n	800254a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800250c:	d11f      	bne.n	800254e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002512:	e01c      	b.n	800254e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d903      	bls.n	8002522 <DMA_CheckFifoParam+0xb6>
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d003      	beq.n	8002528 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002520:	e018      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
      break;
 8002526:	e015      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00e      	beq.n	8002552 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
      break;
 8002538:	e00b      	b.n	8002552 <DMA_CheckFifoParam+0xe6>
      break;
 800253a:	bf00      	nop
 800253c:	e00a      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
      break;
 800253e:	bf00      	nop
 8002540:	e008      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
      break;
 8002542:	bf00      	nop
 8002544:	e006      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
      break;
 8002546:	bf00      	nop
 8002548:	e004      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
      break;
 800254a:	bf00      	nop
 800254c:	e002      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
      break;   
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <DMA_CheckFifoParam+0xe8>
      break;
 8002552:	bf00      	nop
    }
  } 
  
  return status; 
 8002554:	7bfb      	ldrb	r3, [r7, #15]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	2300      	movs	r3, #0
 800257c:	61fb      	str	r3, [r7, #28]
 800257e:	e177      	b.n	8002870 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	429a      	cmp	r2, r3
 800259a:	f040 8166 	bne.w	800286a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d005      	beq.n	80025b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d130      	bne.n	8002618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	2203      	movs	r2, #3
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025ec:	2201      	movs	r2, #1
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 0201 	and.w	r2, r3, #1
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	2b03      	cmp	r3, #3
 8002622:	d017      	beq.n	8002654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d123      	bne.n	80026a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	08da      	lsrs	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3208      	adds	r2, #8
 8002668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	220f      	movs	r2, #15
 8002678:	fa02 f303 	lsl.w	r3, r2, r3
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	69b9      	ldr	r1, [r7, #24]
 80026a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 0203 	and.w	r2, r3, #3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80c0 	beq.w	800286a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_GPIO_Init+0x324>)
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	4a65      	ldr	r2, [pc, #404]	; (8002888 <HAL_GPIO_Init+0x324>)
 80026f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f8:	6453      	str	r3, [r2, #68]	; 0x44
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_GPIO_Init+0x324>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002706:	4a61      	ldr	r2, [pc, #388]	; (800288c <HAL_GPIO_Init+0x328>)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	089b      	lsrs	r3, r3, #2
 800270c:	3302      	adds	r3, #2
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	220f      	movs	r2, #15
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43db      	mvns	r3, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4013      	ands	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a58      	ldr	r2, [pc, #352]	; (8002890 <HAL_GPIO_Init+0x32c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d037      	beq.n	80027a2 <HAL_GPIO_Init+0x23e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a57      	ldr	r2, [pc, #348]	; (8002894 <HAL_GPIO_Init+0x330>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d031      	beq.n	800279e <HAL_GPIO_Init+0x23a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a56      	ldr	r2, [pc, #344]	; (8002898 <HAL_GPIO_Init+0x334>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d02b      	beq.n	800279a <HAL_GPIO_Init+0x236>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a55      	ldr	r2, [pc, #340]	; (800289c <HAL_GPIO_Init+0x338>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d025      	beq.n	8002796 <HAL_GPIO_Init+0x232>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a54      	ldr	r2, [pc, #336]	; (80028a0 <HAL_GPIO_Init+0x33c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01f      	beq.n	8002792 <HAL_GPIO_Init+0x22e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a53      	ldr	r2, [pc, #332]	; (80028a4 <HAL_GPIO_Init+0x340>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d019      	beq.n	800278e <HAL_GPIO_Init+0x22a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a52      	ldr	r2, [pc, #328]	; (80028a8 <HAL_GPIO_Init+0x344>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0x226>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a51      	ldr	r2, [pc, #324]	; (80028ac <HAL_GPIO_Init+0x348>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00d      	beq.n	8002786 <HAL_GPIO_Init+0x222>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a50      	ldr	r2, [pc, #320]	; (80028b0 <HAL_GPIO_Init+0x34c>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d007      	beq.n	8002782 <HAL_GPIO_Init+0x21e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a4f      	ldr	r2, [pc, #316]	; (80028b4 <HAL_GPIO_Init+0x350>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d101      	bne.n	800277e <HAL_GPIO_Init+0x21a>
 800277a:	2309      	movs	r3, #9
 800277c:	e012      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 800277e:	230a      	movs	r3, #10
 8002780:	e010      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 8002782:	2308      	movs	r3, #8
 8002784:	e00e      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 8002786:	2307      	movs	r3, #7
 8002788:	e00c      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 800278a:	2306      	movs	r3, #6
 800278c:	e00a      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 800278e:	2305      	movs	r3, #5
 8002790:	e008      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 8002792:	2304      	movs	r3, #4
 8002794:	e006      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 8002796:	2303      	movs	r3, #3
 8002798:	e004      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 800279a:	2302      	movs	r3, #2
 800279c:	e002      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_GPIO_Init+0x240>
 80027a2:	2300      	movs	r3, #0
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	f002 0203 	and.w	r2, r2, #3
 80027aa:	0092      	lsls	r2, r2, #2
 80027ac:	4093      	lsls	r3, r2
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027b4:	4935      	ldr	r1, [pc, #212]	; (800288c <HAL_GPIO_Init+0x328>)
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	089b      	lsrs	r3, r3, #2
 80027ba:	3302      	adds	r3, #2
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_GPIO_Init+0x354>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027e6:	4a34      	ldr	r2, [pc, #208]	; (80028b8 <HAL_GPIO_Init+0x354>)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027ec:	4b32      	ldr	r3, [pc, #200]	; (80028b8 <HAL_GPIO_Init+0x354>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	4013      	ands	r3, r2
 80027fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d003      	beq.n	8002810 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002810:	4a29      	ldr	r2, [pc, #164]	; (80028b8 <HAL_GPIO_Init+0x354>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002816:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_GPIO_Init+0x354>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_GPIO_Init+0x354>)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_GPIO_Init+0x354>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_GPIO_Init+0x354>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3301      	adds	r3, #1
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2b0f      	cmp	r3, #15
 8002874:	f67f ae84 	bls.w	8002580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	40013800 	.word	0x40013800
 8002890:	40020000 	.word	0x40020000
 8002894:	40020400 	.word	0x40020400
 8002898:	40020800 	.word	0x40020800
 800289c:	40020c00 	.word	0x40020c00
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40021400 	.word	0x40021400
 80028a8:	40021800 	.word	0x40021800
 80028ac:	40021c00 	.word	0x40021c00
 80028b0:	40022000 	.word	0x40022000
 80028b4:	40022400 	.word	0x40022400
 80028b8:	40013c00 	.word	0x40013c00

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f0:	b08f      	sub	sp, #60	; 0x3c
 80028f2:	af0a      	add	r7, sp, #40	; 0x28
 80028f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e10f      	b.n	8002b20 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f005 fff6 	bl	800890c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2203      	movs	r2, #3
 8002924:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d102      	bne.n	800293a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fac1 	bl	8004ec6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	603b      	str	r3, [r7, #0]
 800294a:	687e      	ldr	r6, [r7, #4]
 800294c:	466d      	mov	r5, sp
 800294e:	f106 0410 	add.w	r4, r6, #16
 8002952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800295a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800295e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002962:	1d33      	adds	r3, r6, #4
 8002964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002966:	6838      	ldr	r0, [r7, #0]
 8002968:	f002 f998 	bl	8004c9c <USB_CoreInit>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2202      	movs	r2, #2
 8002976:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0d0      	b.n	8002b20 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f002 faaf 	bl	8004ee8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e04a      	b.n	8002a26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002990:	7bfa      	ldrb	r2, [r7, #15]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	333d      	adds	r3, #61	; 0x3d
 80029a0:	2201      	movs	r2, #1
 80029a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029a4:	7bfa      	ldrb	r2, [r7, #15]
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	333c      	adds	r3, #60	; 0x3c
 80029b4:	7bfa      	ldrb	r2, [r7, #15]
 80029b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	b298      	uxth	r0, r3
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3344      	adds	r3, #68	; 0x44
 80029cc:	4602      	mov	r2, r0
 80029ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029d0:	7bfa      	ldrb	r2, [r7, #15]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3340      	adds	r3, #64	; 0x40
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029e4:	7bfa      	ldrb	r2, [r7, #15]
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	440b      	add	r3, r1
 80029f2:	3348      	adds	r3, #72	; 0x48
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029f8:	7bfa      	ldrb	r2, [r7, #15]
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	440b      	add	r3, r1
 8002a06:	334c      	adds	r3, #76	; 0x4c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a0c:	7bfa      	ldrb	r2, [r7, #15]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	3354      	adds	r3, #84	; 0x54
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
 8002a22:	3301      	adds	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d3af      	bcc.n	8002990 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]
 8002a34:	e044      	b.n	8002ac0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a36:	7bfa      	ldrb	r2, [r7, #15]
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4413      	add	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a4c:	7bfa      	ldrb	r2, [r7, #15]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	00db      	lsls	r3, r3, #3
 8002a80:	4413      	add	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	00db      	lsls	r3, r3, #3
 8002a96:	4413      	add	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	3301      	adds	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d3b5      	bcc.n	8002a36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	687e      	ldr	r6, [r7, #4]
 8002ad2:	466d      	mov	r5, sp
 8002ad4:	f106 0410 	add.w	r4, r6, #16
 8002ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ae0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ae4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ae8:	1d33      	adds	r3, r6, #4
 8002aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aec:	6838      	ldr	r0, [r7, #0]
 8002aee:	f002 fa47 	bl	8004f80 <USB_DevInit>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e00d      	b.n	8002b20 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 fb96 	bl	800624a <USB_DevDisconnect>

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b28 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_PCD_Start+0x1c>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e020      	b.n	8002b86 <HAL_PCD_Start+0x5e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d109      	bne.n	8002b68 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d005      	beq.n	8002b68 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 f999 	bl	8004ea4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f003 fb46 	bl	8006208 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b8e:	b590      	push	{r4, r7, lr}
 8002b90:	b08d      	sub	sp, #52	; 0x34
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f003 fc04 	bl	80063b2 <USB_GetMode>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f040 848a 	bne.w	80034c6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 fb68 	bl	800628c <USB_ReadInterrupts>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	f000 8480 	beq.w	80034c4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f003 fb55 	bl	800628c <USB_ReadInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d107      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f002 0202 	and.w	r2, r2, #2
 8002bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f003 fb43 	bl	800628c <USB_ReadInterrupts>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d161      	bne.n	8002cd4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0210 	bic.w	r2, r2, #16
 8002c1e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	f003 020f 	and.w	r2, r3, #15
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	0c5b      	lsrs	r3, r3, #17
 8002c44:	f003 030f 	and.w	r3, r3, #15
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d124      	bne.n	8002c96 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d035      	beq.n	8002cc4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	091b      	lsrs	r3, r3, #4
 8002c60:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6a38      	ldr	r0, [r7, #32]
 8002c6c:	f003 f97a 	bl	8005f64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	091b      	lsrs	r3, r3, #4
 8002c78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c7c:	441a      	add	r2, r3
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c8e:	441a      	add	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	621a      	str	r2, [r3, #32]
 8002c94:	e016      	b.n	8002cc4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	0c5b      	lsrs	r3, r3, #17
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d110      	bne.n	8002cc4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ca8:	2208      	movs	r2, #8
 8002caa:	4619      	mov	r1, r3
 8002cac:	6a38      	ldr	r0, [r7, #32]
 8002cae:	f003 f959 	bl	8005f64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cbe:	441a      	add	r2, r3
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699a      	ldr	r2, [r3, #24]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0210 	orr.w	r2, r2, #16
 8002cd2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f003 fad7 	bl	800628c <USB_ReadInterrupts>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ce8:	f040 80a7 	bne.w	8002e3a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 fadc 	bl	80062b2 <USB_ReadDevAllOutEpInterrupt>
 8002cfa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002cfc:	e099      	b.n	8002e32 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 808e 	beq.w	8002e26 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f003 fb00 	bl	800631a <USB_ReadDevOutEPInterrupt>
 8002d1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00c      	beq.n	8002d40 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d32:	461a      	mov	r2, r3
 8002d34:	2301      	movs	r3, #1
 8002d36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fec2 	bl	8003ac4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00c      	beq.n	8002d64 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d56:	461a      	mov	r2, r3
 8002d58:	2308      	movs	r3, #8
 8002d5a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 ff98 	bl	8003c94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d030      	beq.n	8002dec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b80      	cmp	r3, #128	; 0x80
 8002d94:	d109      	bne.n	8002daa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	3304      	adds	r3, #4
 8002dbe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	78db      	ldrb	r3, [r3, #3]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d108      	bne.n	8002dda <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f005 fe9f 	bl	8008b18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de6:	461a      	mov	r2, r3
 8002de8:	2302      	movs	r3, #2
 8002dea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d008      	beq.n	8002e08 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e02:	461a      	mov	r2, r3
 8002e04:	2320      	movs	r3, #32
 8002e06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	3301      	adds	r3, #1
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f47f af62 	bne.w	8002cfe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 fa24 	bl	800628c <USB_ReadInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e4e:	f040 80db 	bne.w	8003008 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 fa45 	bl	80062e6 <USB_ReadDevAllInEpInterrupt>
 8002e5c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e62:	e0cd      	b.n	8003000 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80c2 	beq.w	8002ff4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f003 fa6b 	bl	8006356 <USB_ReadDevInEPInterrupt>
 8002e80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d057      	beq.n	8002f3c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	2201      	movs	r2, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	69f9      	ldr	r1, [r7, #28]
 8002ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002eac:	4013      	ands	r3, r2
 8002eae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d132      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	334c      	adds	r3, #76	; 0x4c
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4403      	add	r3, r0
 8002eea:	3348      	adds	r3, #72	; 0x48
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4419      	add	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4403      	add	r3, r0
 8002efe:	334c      	adds	r3, #76	; 0x4c
 8002f00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d113      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x3a2>
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	3354      	adds	r3, #84	; 0x54
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d108      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	f003 fa72 	bl	8006414 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4619      	mov	r1, r3
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f005 fd69 	bl	8008a0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	015a      	lsls	r2, r3, #5
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f52:	461a      	mov	r2, r3
 8002f54:	2308      	movs	r3, #8
 8002f56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f6e:	461a      	mov	r2, r3
 8002f70:	2310      	movs	r3, #16
 8002f72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	015a      	lsls	r2, r3, #5
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	2340      	movs	r3, #64	; 0x40
 8002f8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d023      	beq.n	8002fe2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002f9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f9c:	6a38      	ldr	r0, [r7, #32]
 8002f9e:	f002 f953 	bl	8005248 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	3338      	adds	r3, #56	; 0x38
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	78db      	ldrb	r3, [r3, #3]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d108      	bne.n	8002fd0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f005 fdb6 	bl	8008b3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2302      	movs	r3, #2
 8002fe0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fcdb 	bl	80039aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	2b00      	cmp	r3, #0
 8003004:	f47f af2e 	bne.w	8002e64 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f003 f93d 	bl	800628c <USB_ReadInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800301c:	d122      	bne.n	8003064 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	69fa      	ldr	r2, [r7, #28]
 8003028:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003038:	2b01      	cmp	r3, #1
 800303a:	d108      	bne.n	800304e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003044:	2100      	movs	r1, #0
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fec2 	bl	8003dd0 <HAL_PCDEx_LPM_Callback>
 800304c:	e002      	b.n	8003054 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f005 fd54 	bl	8008afc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f003 f90f 	bl	800628c <USB_ReadInterrupts>
 800306e:	4603      	mov	r3, r0
 8003070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003078:	d112      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b01      	cmp	r3, #1
 8003088:	d102      	bne.n	8003090 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f005 fd10 	bl	8008ab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800309e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f003 f8f1 	bl	800628c <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b4:	f040 80b7 	bne.w	8003226 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c6:	f023 0301 	bic.w	r3, r3, #1
 80030ca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2110      	movs	r1, #16
 80030d2:	4618      	mov	r0, r3
 80030d4:	f002 f8b8 	bl	8005248 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d8:	2300      	movs	r3, #0
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030dc:	e046      	b.n	800316c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	015a      	lsls	r2, r3, #5
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4413      	add	r3, r2
 80030e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ea:	461a      	mov	r2, r3
 80030ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030f0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003102:	0151      	lsls	r1, r2, #5
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	440a      	add	r2, r1
 8003108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800310c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003110:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311e:	461a      	mov	r2, r3
 8003120:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003124:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003136:	0151      	lsls	r1, r2, #5
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	440a      	add	r2, r1
 800313c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003140:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003144:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003156:	0151      	lsls	r1, r2, #5
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	440a      	add	r2, r1
 800315c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003160:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003164:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	3301      	adds	r3, #1
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003172:	429a      	cmp	r2, r3
 8003174:	d3b3      	bcc.n	80030de <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003184:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003188:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031a2:	f043 030b 	orr.w	r3, r3, #11
 80031a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b8:	f043 030b 	orr.w	r3, r3, #11
 80031bc:	6453      	str	r3, [r2, #68]	; 0x44
 80031be:	e015      	b.n	80031ec <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031d2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e6:	f043 030b 	orr.w	r3, r3, #11
 80031ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003210:	461a      	mov	r2, r3
 8003212:	f003 f8ff 	bl	8006414 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003224:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f003 f82e 	bl	800628c <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323a:	d124      	bne.n	8003286 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 f8c4 	bl	80063ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f002 f879 	bl	8005342 <USB_GetDevSpeed>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681c      	ldr	r4, [r3, #0]
 800325c:	f001 fa28 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 8003260:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	4620      	mov	r0, r4
 800326c:	f001 fd78 	bl	8004d60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f005 fbf4 	bl	8008a5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003284:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f002 fffe 	bl	800628c <USB_ReadInterrupts>
 8003290:	4603      	mov	r3, r0
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b08      	cmp	r3, #8
 8003298:	d10a      	bne.n	80032b0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f005 fbd1 	bl	8008a42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f002 0208 	and.w	r2, r2, #8
 80032ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 ffe9 	bl	800628c <USB_ReadInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c0:	2b80      	cmp	r3, #128	; 0x80
 80032c2:	d122      	bne.n	800330a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032d0:	2301      	movs	r3, #1
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
 80032d4:	e014      	b.n	8003300 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032da:	4613      	mov	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4413      	add	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d105      	bne.n	80032fa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	4619      	mov	r1, r3
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fb27 	bl	8003948 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	3301      	adds	r3, #1
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003306:	429a      	cmp	r2, r3
 8003308:	d3e5      	bcc.n	80032d6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f002 ffbc 	bl	800628c <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800331e:	d13b      	bne.n	8003398 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003320:	2301      	movs	r3, #1
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
 8003324:	e02b      	b.n	800337e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	4413      	add	r3, r2
 800332e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	3340      	adds	r3, #64	; 0x40
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d115      	bne.n	8003378 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800334c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	da12      	bge.n	8003378 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	333f      	adds	r3, #63	; 0x3f
 8003362:	2201      	movs	r2, #1
 8003364:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	b2db      	uxtb	r3, r3
 800336a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800336e:	b2db      	uxtb	r3, r3
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fae8 	bl	8003948 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	3301      	adds	r3, #1
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003384:	429a      	cmp	r2, r3
 8003386:	d3ce      	bcc.n	8003326 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003396:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f002 ff75 	bl	800628c <USB_ReadInterrupts>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ac:	d155      	bne.n	800345a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033ae:	2301      	movs	r3, #1
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	e045      	b.n	8003440 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	015a      	lsls	r2, r3, #5
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	4413      	add	r3, r2
 80033bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d12e      	bne.n	800343a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033dc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80033de:	2b00      	cmp	r3, #0
 80033e0:	da2b      	bge.n	800343a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80033ee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d121      	bne.n	800343a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800340c:	6a3b      	ldr	r3, [r7, #32]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	69fa      	ldr	r2, [r7, #28]
 800342e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003436:	6053      	str	r3, [r2, #4]
            break;
 8003438:	e007      	b.n	800344a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	3301      	adds	r3, #1
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003446:	429a      	cmp	r2, r3
 8003448:	d3b4      	bcc.n	80033b4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003458:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f002 ff14 	bl	800628c <USB_ReadInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800346a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800346e:	d10a      	bne.n	8003486 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f005 fb75 	bl	8008b60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003484:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f002 fefe 	bl	800628c <USB_ReadInterrupts>
 8003490:	4603      	mov	r3, r0
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b04      	cmp	r3, #4
 8003498:	d115      	bne.n	80034c6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f005 fb65 	bl	8008b7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	e000      	b.n	80034c6 <HAL_PCD_IRQHandler+0x938>
      return;
 80034c4:	bf00      	nop
    }
  }
}
 80034c6:	3734      	adds	r7, #52	; 0x34
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd90      	pop	{r4, r7, pc}

080034cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_PCD_SetAddress+0x1a>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e013      	b.n	800350e <HAL_PCD_SetAddress+0x42>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 fe5c 	bl	80061bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	4608      	mov	r0, r1
 8003520:	4611      	mov	r1, r2
 8003522:	461a      	mov	r2, r3
 8003524:	4603      	mov	r3, r0
 8003526:	70fb      	strb	r3, [r7, #3]
 8003528:	460b      	mov	r3, r1
 800352a:	803b      	strh	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003534:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003538:	2b00      	cmp	r3, #0
 800353a:	da0f      	bge.n	800355c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	f003 020f 	and.w	r2, r3, #15
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	3338      	adds	r3, #56	; 0x38
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4413      	add	r3, r2
 8003550:	3304      	adds	r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2201      	movs	r2, #1
 8003558:	705a      	strb	r2, [r3, #1]
 800355a:	e00f      	b.n	800357c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	3304      	adds	r3, #4
 8003574:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	b2da      	uxtb	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003588:	883a      	ldrh	r2, [r7, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	78ba      	ldrb	r2, [r7, #2]
 8003592:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d004      	beq.n	80035a6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80035a6:	78bb      	ldrb	r3, [r7, #2]
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d102      	bne.n	80035b2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_PCD_EP_Open+0xaa>
 80035bc:	2302      	movs	r3, #2
 80035be:	e00e      	b.n	80035de <HAL_PCD_EP_Open+0xc8>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68f9      	ldr	r1, [r7, #12]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 fedc 	bl	800538c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80035dc:	7afb      	ldrb	r3, [r7, #11]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
 80035ee:	460b      	mov	r3, r1
 80035f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	da0f      	bge.n	800361a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035fa:	78fb      	ldrb	r3, [r7, #3]
 80035fc:	f003 020f 	and.w	r2, r3, #15
 8003600:	4613      	mov	r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	4413      	add	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	3338      	adds	r3, #56	; 0x38
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	3304      	adds	r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	705a      	strb	r2, [r3, #1]
 8003618:	e00f      	b.n	800363a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	4413      	add	r3, r2
 8003630:	3304      	adds	r3, #4
 8003632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	b2da      	uxtb	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_PCD_EP_Close+0x6e>
 8003650:	2302      	movs	r3, #2
 8003652:	e00e      	b.n	8003672 <HAL_PCD_EP_Close+0x8c>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68f9      	ldr	r1, [r7, #12]
 8003662:	4618      	mov	r0, r3
 8003664:	f001 ff1a 	bl	800549c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b086      	sub	sp, #24
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	460b      	mov	r3, r1
 8003688:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800368a:	7afb      	ldrb	r3, [r7, #11]
 800368c:	f003 020f 	and.w	r2, r3, #15
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4413      	add	r3, r2
 80036a0:	3304      	adds	r3, #4
 80036a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	2200      	movs	r2, #0
 80036b4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	2200      	movs	r2, #0
 80036ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036bc:	7afb      	ldrb	r3, [r7, #11]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d102      	bne.n	80036d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036d6:	7afb      	ldrb	r3, [r7, #11]
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d109      	bne.n	80036f4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6818      	ldr	r0, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	6979      	ldr	r1, [r7, #20]
 80036ee:	f002 f9f9 	bl	8005ae4 <USB_EP0StartXfer>
 80036f2:	e008      	b.n	8003706 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6818      	ldr	r0, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	6979      	ldr	r1, [r7, #20]
 8003702:	f001 ffa7 	bl	8005654 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	460b      	mov	r3, r1
 800371a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	f003 020f 	and.w	r2, r3, #15
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003732:	681b      	ldr	r3, [r3, #0]
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	460b      	mov	r3, r1
 800374e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003750:	7afb      	ldrb	r3, [r7, #11]
 8003752:	f003 020f 	and.w	r2, r3, #15
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	3338      	adds	r3, #56	; 0x38
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	3304      	adds	r3, #4
 8003766:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2200      	movs	r2, #0
 8003778:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2201      	movs	r2, #1
 800377e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003780:	7afb      	ldrb	r3, [r7, #11]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	b2da      	uxtb	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d102      	bne.n	800379a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800379a:	7afb      	ldrb	r3, [r7, #11]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	6979      	ldr	r1, [r7, #20]
 80037b2:	f002 f997 	bl	8005ae4 <USB_EP0StartXfer>
 80037b6:	e008      	b.n	80037ca <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	461a      	mov	r2, r3
 80037c4:	6979      	ldr	r1, [r7, #20]
 80037c6:	f001 ff45 	bl	8005654 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d901      	bls.n	80037f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e050      	b.n	8003894 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	da0f      	bge.n	800381a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	f003 020f 	and.w	r2, r3, #15
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	3338      	adds	r3, #56	; 0x38
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	3304      	adds	r3, #4
 8003810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2201      	movs	r2, #1
 8003816:	705a      	strb	r2, [r3, #1]
 8003818:	e00d      	b.n	8003836 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800381a:	78fa      	ldrb	r2, [r7, #3]
 800381c:	4613      	mov	r3, r2
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4413      	add	r3, r2
 800382c:	3304      	adds	r3, #4
 800382e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	b2da      	uxtb	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_PCD_EP_SetStall+0x82>
 8003852:	2302      	movs	r3, #2
 8003854:	e01e      	b.n	8003894 <HAL_PCD_EP_SetStall+0xc0>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68f9      	ldr	r1, [r7, #12]
 8003864:	4618      	mov	r0, r3
 8003866:	f002 fbd5 	bl	8006014 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	b2d9      	uxtb	r1, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003884:	461a      	mov	r2, r3
 8003886:	f002 fdc5 	bl	8006414 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	f003 020f 	and.w	r2, r3, #15
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d901      	bls.n	80038ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e042      	b.n	8003940 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	da0f      	bge.n	80038e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	f003 020f 	and.w	r2, r3, #15
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	3338      	adds	r3, #56	; 0x38
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	3304      	adds	r3, #4
 80038d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	705a      	strb	r2, [r3, #1]
 80038e0:	e00f      	b.n	8003902 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	f003 020f 	and.w	r2, r3, #15
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4413      	add	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	4413      	add	r3, r2
 80038f8:	3304      	adds	r3, #4
 80038fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	f003 030f 	and.w	r3, r3, #15
 800390e:	b2da      	uxtb	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_PCD_EP_ClrStall+0x86>
 800391e:	2302      	movs	r3, #2
 8003920:	e00e      	b.n	8003940 <HAL_PCD_EP_ClrStall+0xa4>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68f9      	ldr	r1, [r7, #12]
 8003930:	4618      	mov	r0, r3
 8003932:	f002 fbdd 	bl	80060f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	460b      	mov	r3, r1
 8003952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003958:	2b00      	cmp	r3, #0
 800395a:	da0c      	bge.n	8003976 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	f003 020f 	and.w	r2, r3, #15
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	3338      	adds	r3, #56	; 0x38
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	4413      	add	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	e00c      	b.n	8003990 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	f003 020f 	and.w	r2, r3, #15
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4413      	add	r3, r2
 800398c:	3304      	adds	r3, #4
 800398e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68f9      	ldr	r1, [r7, #12]
 8003996:	4618      	mov	r0, r3
 8003998:	f002 f9fc 	bl	8005d94 <USB_EPStopXfer>
 800399c:	4603      	mov	r3, r0
 800399e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80039a0:	7afb      	ldrb	r3, [r7, #11]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b08a      	sub	sp, #40	; 0x28
 80039ae:	af02      	add	r7, sp, #8
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	3338      	adds	r3, #56	; 0x38
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	3304      	adds	r3, #4
 80039d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	429a      	cmp	r2, r3
 80039dc:	d901      	bls.n	80039e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e06c      	b.n	8003abc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	69fa      	ldr	r2, [r7, #28]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d902      	bls.n	80039fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3303      	adds	r3, #3
 8003a02:	089b      	lsrs	r3, r3, #2
 8003a04:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a06:	e02b      	b.n	8003a60 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d902      	bls.n	8003a24 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	3303      	adds	r3, #3
 8003a28:	089b      	lsrs	r3, r3, #2
 8003a2a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6919      	ldr	r1, [r3, #16]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	4603      	mov	r3, r0
 8003a42:	6978      	ldr	r0, [r7, #20]
 8003a44:	f002 fa50 	bl	8005ee8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	441a      	add	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1a      	ldr	r2, [r3, #32]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	441a      	add	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d809      	bhi.n	8003a8a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1a      	ldr	r2, [r3, #32]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d203      	bcs.n	8003a8a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1be      	bne.n	8003a08 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d811      	bhi.n	8003aba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	f003 030f 	and.w	r3, r3, #15
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	6939      	ldr	r1, [r7, #16]
 8003ab2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3720      	adds	r7, #32
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	333c      	adds	r3, #60	; 0x3c
 8003adc:	3304      	adds	r3, #4
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d17b      	bne.n	8003bf2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d015      	beq.n	8003b30 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	4a61      	ldr	r2, [pc, #388]	; (8003c8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	f240 80b9 	bls.w	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80b3 	beq.w	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b26:	461a      	mov	r2, r3
 8003b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2c:	6093      	str	r3, [r2, #8]
 8003b2e:	e0a7      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d009      	beq.n	8003b4e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	461a      	mov	r2, r3
 8003b48:	2320      	movs	r3, #32
 8003b4a:	6093      	str	r3, [r2, #8]
 8003b4c:	e098      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f040 8093 	bne.w	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	4a4b      	ldr	r2, [pc, #300]	; (8003c8c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d90f      	bls.n	8003b82 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	e07e      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	3304      	adds	r3, #4
 8003b96:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	0159      	lsls	r1, r3, #5
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	440b      	add	r3, r1
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d114      	bne.n	8003be4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6818      	ldr	r0, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2101      	movs	r1, #1
 8003bd0:	f002 fc20 	bl	8006414 <USB_EP0_OutStart>
 8003bd4:	e006      	b.n	8003be4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	691a      	ldr	r2, [r3, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	441a      	add	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	4619      	mov	r1, r3
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f004 fef4 	bl	80089d8 <HAL_PCD_DataOutStageCallback>
 8003bf0:	e046      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	4a26      	ldr	r2, [pc, #152]	; (8003c90 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d124      	bne.n	8003c44 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	461a      	mov	r2, r3
 8003c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c16:	6093      	str	r3, [r2, #8]
 8003c18:	e032      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c30:	461a      	mov	r2, r3
 8003c32:	2320      	movs	r3, #32
 8003c34:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f004 fecb 	bl	80089d8 <HAL_PCD_DataOutStageCallback>
 8003c42:	e01d      	b.n	8003c80 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d114      	bne.n	8003c74 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d108      	bne.n	8003c74 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6818      	ldr	r0, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2100      	movs	r1, #0
 8003c70:	f002 fbd0 	bl	8006414 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f004 feac 	bl	80089d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	4f54300a 	.word	0x4f54300a
 8003c90:	4f54310a 	.word	0x4f54310a

08003c94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	333c      	adds	r3, #60	; 0x3c
 8003cac:	3304      	adds	r3, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d90e      	bls.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f004 fe63 	bl	80089b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <PCD_EP_OutSetupPacket_int+0x88>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d90c      	bls.n	8003d10 <PCD_EP_OutSetupPacket_int+0x7c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d108      	bne.n	8003d10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d08:	461a      	mov	r2, r3
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	f002 fb82 	bl	8006414 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	4f54300a 	.word	0x4f54300a

08003d20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	70fb      	strb	r3, [r7, #3]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d107      	bne.n	8003d4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d3e:	883b      	ldrh	r3, [r7, #0]
 8003d40:	0419      	lsls	r1, r3, #16
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003d4c:	e028      	b.n	8003da0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	68ba      	ldr	r2, [r7, #8]
 8003d58:	4413      	add	r3, r2
 8003d5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	73fb      	strb	r3, [r7, #15]
 8003d60:	e00d      	b.n	8003d7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	3340      	adds	r3, #64	; 0x40
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	0c1b      	lsrs	r3, r3, #16
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	4413      	add	r3, r2
 8003d76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d78:	7bfb      	ldrb	r3, [r7, #15]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	73fb      	strb	r3, [r7, #15]
 8003d7e:	7bfa      	ldrb	r2, [r7, #15]
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	3b01      	subs	r3, #1
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d3ec      	bcc.n	8003d62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d88:	883b      	ldrh	r3, [r7, #0]
 8003d8a:	0418      	lsls	r0, r3, #16
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6819      	ldr	r1, [r3, #0]
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	4302      	orrs	r2, r0
 8003d98:	3340      	adds	r3, #64	; 0x40
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
 8003db6:	460b      	mov	r3, r1
 8003db8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	887a      	ldrh	r2, [r7, #2]
 8003dc0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e267      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d075      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e06:	4b88      	ldr	r3, [pc, #544]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d00c      	beq.n	8003e2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e12:	4b85      	ldr	r3, [pc, #532]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d112      	bne.n	8003e44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e1e:	4b82      	ldr	r3, [pc, #520]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e2a:	d10b      	bne.n	8003e44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e2c:	4b7e      	ldr	r3, [pc, #504]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d05b      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x108>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d157      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e242      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4c:	d106      	bne.n	8003e5c <HAL_RCC_OscConfig+0x74>
 8003e4e:	4b76      	ldr	r3, [pc, #472]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a75      	ldr	r2, [pc, #468]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	e01d      	b.n	8003e98 <HAL_RCC_OscConfig+0xb0>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x98>
 8003e66:	4b70      	ldr	r3, [pc, #448]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a6f      	ldr	r2, [pc, #444]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	4b6d      	ldr	r3, [pc, #436]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a6c      	ldr	r2, [pc, #432]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e00b      	b.n	8003e98 <HAL_RCC_OscConfig+0xb0>
 8003e80:	4b69      	ldr	r3, [pc, #420]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a68      	ldr	r2, [pc, #416]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8a:	6013      	str	r3, [r2, #0]
 8003e8c:	4b66      	ldr	r3, [pc, #408]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a65      	ldr	r2, [pc, #404]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d013      	beq.n	8003ec8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fa20 	bl	80012e4 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fd fa1c 	bl	80012e4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e207      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eba:	4b5b      	ldr	r3, [pc, #364]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0xc0>
 8003ec6:	e014      	b.n	8003ef2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fa0c 	bl	80012e4 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed0:	f7fd fa08 	bl	80012e4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e1f3      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee2:	4b51      	ldr	r3, [pc, #324]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0xe8>
 8003eee:	e000      	b.n	8003ef2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d063      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003efe:	4b4a      	ldr	r3, [pc, #296]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 030c 	and.w	r3, r3, #12
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00b      	beq.n	8003f22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0a:	4b47      	ldr	r3, [pc, #284]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d11c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f16:	4b44      	ldr	r3, [pc, #272]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d116      	bne.n	8003f50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f22:	4b41      	ldr	r3, [pc, #260]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_RCC_OscConfig+0x152>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d001      	beq.n	8003f3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e1c7      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3a:	4b3b      	ldr	r3, [pc, #236]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	4937      	ldr	r1, [pc, #220]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4e:	e03a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d020      	beq.n	8003f9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f58:	4b34      	ldr	r3, [pc, #208]	; (800402c <HAL_RCC_OscConfig+0x244>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fd f9c1 	bl	80012e4 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f66:	f7fd f9bd 	bl	80012e4 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e1a8      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f78:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f84:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4925      	ldr	r1, [pc, #148]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]
 8003f98:	e015      	b.n	8003fc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9a:	4b24      	ldr	r3, [pc, #144]	; (800402c <HAL_RCC_OscConfig+0x244>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fd f9a0 	bl	80012e4 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa8:	f7fd f99c 	bl	80012e4 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e187      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1f0      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d036      	beq.n	8004040 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d016      	beq.n	8004008 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_RCC_OscConfig+0x248>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fd f980 	bl	80012e4 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe8:	f7fd f97c 	bl	80012e4 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e167      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x200>
 8004006:	e01b      	b.n	8004040 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_OscConfig+0x248>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400e:	f7fd f969 	bl	80012e4 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004014:	e00e      	b.n	8004034 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004016:	f7fd f965 	bl	80012e4 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d907      	bls.n	8004034 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e150      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
 8004028:	40023800 	.word	0x40023800
 800402c:	42470000 	.word	0x42470000
 8004030:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004034:	4b88      	ldr	r3, [pc, #544]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004036:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1ea      	bne.n	8004016 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8097 	beq.w	800417c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004052:	4b81      	ldr	r3, [pc, #516]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10f      	bne.n	800407e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	4b7d      	ldr	r3, [pc, #500]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	4a7c      	ldr	r2, [pc, #496]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800406c:	6413      	str	r3, [r2, #64]	; 0x40
 800406e:	4b7a      	ldr	r3, [pc, #488]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407a:	2301      	movs	r3, #1
 800407c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407e:	4b77      	ldr	r3, [pc, #476]	; (800425c <HAL_RCC_OscConfig+0x474>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d118      	bne.n	80040bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408a:	4b74      	ldr	r3, [pc, #464]	; (800425c <HAL_RCC_OscConfig+0x474>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a73      	ldr	r2, [pc, #460]	; (800425c <HAL_RCC_OscConfig+0x474>)
 8004090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004096:	f7fd f925 	bl	80012e4 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fd f921 	bl	80012e4 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e10c      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b0:	4b6a      	ldr	r3, [pc, #424]	; (800425c <HAL_RCC_OscConfig+0x474>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x2ea>
 80040c4:	4b64      	ldr	r3, [pc, #400]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	4a63      	ldr	r2, [pc, #396]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6713      	str	r3, [r2, #112]	; 0x70
 80040d0:	e01c      	b.n	800410c <HAL_RCC_OscConfig+0x324>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b05      	cmp	r3, #5
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x30c>
 80040da:	4b5f      	ldr	r3, [pc, #380]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040de:	4a5e      	ldr	r2, [pc, #376]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040e0:	f043 0304 	orr.w	r3, r3, #4
 80040e4:	6713      	str	r3, [r2, #112]	; 0x70
 80040e6:	4b5c      	ldr	r3, [pc, #368]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ea:	4a5b      	ldr	r2, [pc, #364]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6713      	str	r3, [r2, #112]	; 0x70
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0x324>
 80040f4:	4b58      	ldr	r3, [pc, #352]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	4a57      	ldr	r2, [pc, #348]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80040fa:	f023 0301 	bic.w	r3, r3, #1
 80040fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004100:	4b55      	ldr	r3, [pc, #340]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004104:	4a54      	ldr	r2, [pc, #336]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004106:	f023 0304 	bic.w	r3, r3, #4
 800410a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004114:	f7fd f8e6 	bl	80012e4 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411a:	e00a      	b.n	8004132 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800411c:	f7fd f8e2 	bl	80012e4 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	f241 3288 	movw	r2, #5000	; 0x1388
 800412a:	4293      	cmp	r3, r2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e0cb      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004132:	4b49      	ldr	r3, [pc, #292]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0ee      	beq.n	800411c <HAL_RCC_OscConfig+0x334>
 800413e:	e014      	b.n	800416a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004140:	f7fd f8d0 	bl	80012e4 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004146:	e00a      	b.n	800415e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	f7fd f8cc 	bl	80012e4 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e0b5      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800415e:	4b3e      	ldr	r3, [pc, #248]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1ee      	bne.n	8004148 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800416a:	7dfb      	ldrb	r3, [r7, #23]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d105      	bne.n	800417c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004170:	4b39      	ldr	r3, [pc, #228]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	4a38      	ldr	r2, [pc, #224]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 80a1 	beq.w	80042c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004186:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b08      	cmp	r3, #8
 8004190:	d05c      	beq.n	800424c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d141      	bne.n	800421e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419a:	4b31      	ldr	r3, [pc, #196]	; (8004260 <HAL_RCC_OscConfig+0x478>)
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fd f8a0 	bl	80012e4 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fd f89c 	bl	80012e4 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e087      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ba:	4b27      	ldr	r3, [pc, #156]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69da      	ldr	r2, [r3, #28]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d4:	019b      	lsls	r3, r3, #6
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	085b      	lsrs	r3, r3, #1
 80041de:	3b01      	subs	r3, #1
 80041e0:	041b      	lsls	r3, r3, #16
 80041e2:	431a      	orrs	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	061b      	lsls	r3, r3, #24
 80041ea:	491b      	ldr	r1, [pc, #108]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <HAL_RCC_OscConfig+0x478>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f6:	f7fd f875 	bl	80012e4 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041fe:	f7fd f871 	bl	80012e4 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e05c      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x416>
 800421c:	e054      	b.n	80042c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800421e:	4b10      	ldr	r3, [pc, #64]	; (8004260 <HAL_RCC_OscConfig+0x478>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004224:	f7fd f85e 	bl	80012e4 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422c:	f7fd f85a 	bl	80012e4 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e045      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800423e:	4b06      	ldr	r3, [pc, #24]	; (8004258 <HAL_RCC_OscConfig+0x470>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x444>
 800424a:	e03d      	b.n	80042c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d107      	bne.n	8004264 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e038      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
 8004258:	40023800 	.word	0x40023800
 800425c:	40007000 	.word	0x40007000
 8004260:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004264:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <HAL_RCC_OscConfig+0x4ec>)
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d028      	beq.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800427c:	429a      	cmp	r2, r3
 800427e:	d121      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d11a      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004294:	4013      	ands	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800429a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800429c:	4293      	cmp	r3, r2
 800429e:	d111      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	085b      	lsrs	r3, r3, #1
 80042ac:	3b01      	subs	r3, #1
 80042ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d107      	bne.n	80042c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d001      	beq.n	80042c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800

080042d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0cc      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ec:	4b68      	ldr	r3, [pc, #416]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d90c      	bls.n	8004314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b65      	ldr	r3, [pc, #404]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b63      	ldr	r3, [pc, #396]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0b8      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d020      	beq.n	8004362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800432c:	4b59      	ldr	r3, [pc, #356]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	4a58      	ldr	r2, [pc, #352]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0308 	and.w	r3, r3, #8
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004344:	4b53      	ldr	r3, [pc, #332]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a52      	ldr	r2, [pc, #328]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800434e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004350:	4b50      	ldr	r3, [pc, #320]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	494d      	ldr	r1, [pc, #308]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d044      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d107      	bne.n	8004386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004376:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d119      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e07f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b02      	cmp	r3, #2
 800438c:	d003      	beq.n	8004396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004392:	2b03      	cmp	r3, #3
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004396:	4b3f      	ldr	r3, [pc, #252]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e06f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a6:	4b3b      	ldr	r3, [pc, #236]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e067      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043b6:	4b37      	ldr	r3, [pc, #220]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 0203 	bic.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	4934      	ldr	r1, [pc, #208]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043c8:	f7fc ff8c 	bl	80012e4 <HAL_GetTick>
 80043cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	e00a      	b.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d0:	f7fc ff88 	bl	80012e4 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	f241 3288 	movw	r2, #5000	; 0x1388
 80043de:	4293      	cmp	r3, r2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e04f      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e6:	4b2b      	ldr	r3, [pc, #172]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 020c 	and.w	r2, r3, #12
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d1eb      	bne.n	80043d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043f8:	4b25      	ldr	r3, [pc, #148]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d20c      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b22      	ldr	r3, [pc, #136]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800440e:	4b20      	ldr	r3, [pc, #128]	; (8004490 <HAL_RCC_ClockConfig+0x1b8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 030f 	and.w	r3, r3, #15
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d001      	beq.n	8004420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e032      	b.n	8004486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800442c:	4b19      	ldr	r3, [pc, #100]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4916      	ldr	r1, [pc, #88]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800443a:	4313      	orrs	r3, r2
 800443c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	490e      	ldr	r1, [pc, #56]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800445e:	f000 f821 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8004462:	4602      	mov	r2, r0
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	490a      	ldr	r1, [pc, #40]	; (8004498 <HAL_RCC_ClockConfig+0x1c0>)
 8004470:	5ccb      	ldrb	r3, [r1, r3]
 8004472:	fa22 f303 	lsr.w	r3, r2, r3
 8004476:	4a09      	ldr	r2, [pc, #36]	; (800449c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800447a:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_RCC_ClockConfig+0x1c8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc feec 	bl	800125c <HAL_InitTick>

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	40023c00 	.word	0x40023c00
 8004494:	40023800 	.word	0x40023800
 8004498:	0800a3f0 	.word	0x0800a3f0
 800449c:	20000000 	.word	0x20000000
 80044a0:	20000004 	.word	0x20000004

080044a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a8:	b094      	sub	sp, #80	; 0x50
 80044aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	647b      	str	r3, [r7, #68]	; 0x44
 80044b0:	2300      	movs	r3, #0
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b4:	2300      	movs	r3, #0
 80044b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044bc:	4b79      	ldr	r3, [pc, #484]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 030c 	and.w	r3, r3, #12
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d00d      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0x40>
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	f200 80e1 	bhi.w	8004690 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d002      	beq.n	80044d8 <HAL_RCC_GetSysClockFreq+0x34>
 80044d2:	2b04      	cmp	r3, #4
 80044d4:	d003      	beq.n	80044de <HAL_RCC_GetSysClockFreq+0x3a>
 80044d6:	e0db      	b.n	8004690 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044d8:	4b73      	ldr	r3, [pc, #460]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044dc:	e0db      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044de:	4b73      	ldr	r3, [pc, #460]	; (80046ac <HAL_RCC_GetSysClockFreq+0x208>)
 80044e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044e2:	e0d8      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044e4:	4b6f      	ldr	r3, [pc, #444]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044ee:	4b6d      	ldr	r3, [pc, #436]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d063      	beq.n	80045c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044fa:	4b6a      	ldr	r3, [pc, #424]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	099b      	lsrs	r3, r3, #6
 8004500:	2200      	movs	r2, #0
 8004502:	63bb      	str	r3, [r7, #56]	; 0x38
 8004504:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450c:	633b      	str	r3, [r7, #48]	; 0x30
 800450e:	2300      	movs	r3, #0
 8004510:	637b      	str	r3, [r7, #52]	; 0x34
 8004512:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004516:	4622      	mov	r2, r4
 8004518:	462b      	mov	r3, r5
 800451a:	f04f 0000 	mov.w	r0, #0
 800451e:	f04f 0100 	mov.w	r1, #0
 8004522:	0159      	lsls	r1, r3, #5
 8004524:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004528:	0150      	lsls	r0, r2, #5
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4621      	mov	r1, r4
 8004530:	1a51      	subs	r1, r2, r1
 8004532:	6139      	str	r1, [r7, #16]
 8004534:	4629      	mov	r1, r5
 8004536:	eb63 0301 	sbc.w	r3, r3, r1
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004548:	4659      	mov	r1, fp
 800454a:	018b      	lsls	r3, r1, #6
 800454c:	4651      	mov	r1, sl
 800454e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004552:	4651      	mov	r1, sl
 8004554:	018a      	lsls	r2, r1, #6
 8004556:	4651      	mov	r1, sl
 8004558:	ebb2 0801 	subs.w	r8, r2, r1
 800455c:	4659      	mov	r1, fp
 800455e:	eb63 0901 	sbc.w	r9, r3, r1
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800456e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004572:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004576:	4690      	mov	r8, r2
 8004578:	4699      	mov	r9, r3
 800457a:	4623      	mov	r3, r4
 800457c:	eb18 0303 	adds.w	r3, r8, r3
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	462b      	mov	r3, r5
 8004584:	eb49 0303 	adc.w	r3, r9, r3
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004596:	4629      	mov	r1, r5
 8004598:	024b      	lsls	r3, r1, #9
 800459a:	4621      	mov	r1, r4
 800459c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045a0:	4621      	mov	r1, r4
 80045a2:	024a      	lsls	r2, r1, #9
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045aa:	2200      	movs	r2, #0
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045b4:	f7fb fe74 	bl	80002a0 <__aeabi_uldivmod>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4613      	mov	r3, r2
 80045be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045c0:	e058      	b.n	8004674 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c2:	4b38      	ldr	r3, [pc, #224]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	099b      	lsrs	r3, r3, #6
 80045c8:	2200      	movs	r2, #0
 80045ca:	4618      	mov	r0, r3
 80045cc:	4611      	mov	r1, r2
 80045ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	2300      	movs	r3, #0
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
 80045d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045dc:	4642      	mov	r2, r8
 80045de:	464b      	mov	r3, r9
 80045e0:	f04f 0000 	mov.w	r0, #0
 80045e4:	f04f 0100 	mov.w	r1, #0
 80045e8:	0159      	lsls	r1, r3, #5
 80045ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045ee:	0150      	lsls	r0, r2, #5
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	4641      	mov	r1, r8
 80045f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80045fa:	4649      	mov	r1, r9
 80045fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800460c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004610:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004614:	ebb2 040a 	subs.w	r4, r2, sl
 8004618:	eb63 050b 	sbc.w	r5, r3, fp
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	00eb      	lsls	r3, r5, #3
 8004626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800462a:	00e2      	lsls	r2, r4, #3
 800462c:	4614      	mov	r4, r2
 800462e:	461d      	mov	r5, r3
 8004630:	4643      	mov	r3, r8
 8004632:	18e3      	adds	r3, r4, r3
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	464b      	mov	r3, r9
 8004638:	eb45 0303 	adc.w	r3, r5, r3
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800464a:	4629      	mov	r1, r5
 800464c:	028b      	lsls	r3, r1, #10
 800464e:	4621      	mov	r1, r4
 8004650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004654:	4621      	mov	r1, r4
 8004656:	028a      	lsls	r2, r1, #10
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800465e:	2200      	movs	r2, #0
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	61fa      	str	r2, [r7, #28]
 8004664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004668:	f7fb fe1a 	bl	80002a0 <__aeabi_uldivmod>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4613      	mov	r3, r2
 8004672:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	0c1b      	lsrs	r3, r3, #16
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	3301      	adds	r3, #1
 8004680:	005b      	lsls	r3, r3, #1
 8004682:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004688:	fbb2 f3f3 	udiv	r3, r2, r3
 800468c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800468e:	e002      	b.n	8004696 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004692:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004698:	4618      	mov	r0, r3
 800469a:	3750      	adds	r7, #80	; 0x50
 800469c:	46bd      	mov	sp, r7
 800469e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800
 80046a8:	00f42400 	.word	0x00f42400
 80046ac:	007a1200 	.word	0x007a1200

080046b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046b6:	681b      	ldr	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	20000000 	.word	0x20000000

080046c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046cc:	f7ff fff0 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	0a9b      	lsrs	r3, r3, #10
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	4903      	ldr	r1, [pc, #12]	; (80046ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40023800 	.word	0x40023800
 80046ec:	0800a400 	.word	0x0800a400

080046f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046f4:	f7ff ffdc 	bl	80046b0 <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b05      	ldr	r3, [pc, #20]	; (8004710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	0b5b      	lsrs	r3, r3, #13
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4903      	ldr	r1, [pc, #12]	; (8004714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800470c:	4618      	mov	r0, r3
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40023800 	.word	0x40023800
 8004714:	0800a400 	.word	0x0800a400

08004718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e03f      	b.n	80047aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc fbbc 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2224      	movs	r2, #36	; 0x24
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800475a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f829 	bl	80047b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695a      	ldr	r2, [r3, #20]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b8:	b0c0      	sub	sp, #256	; 0x100
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	68d9      	ldr	r1, [r3, #12]
 80047d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	ea40 0301 	orr.w	r3, r0, r1
 80047dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f8:	69db      	ldr	r3, [r3, #28]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800480c:	f021 010c 	bic.w	r1, r1, #12
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800481a:	430b      	orrs	r3, r1
 800481c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482e:	6999      	ldr	r1, [r3, #24]
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	ea40 0301 	orr.w	r3, r0, r1
 800483a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	4b8f      	ldr	r3, [pc, #572]	; (8004a80 <UART_SetConfig+0x2cc>)
 8004844:	429a      	cmp	r2, r3
 8004846:	d005      	beq.n	8004854 <UART_SetConfig+0xa0>
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b8d      	ldr	r3, [pc, #564]	; (8004a84 <UART_SetConfig+0x2d0>)
 8004850:	429a      	cmp	r2, r3
 8004852:	d104      	bne.n	800485e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004854:	f7ff ff4c 	bl	80046f0 <HAL_RCC_GetPCLK2Freq>
 8004858:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800485c:	e003      	b.n	8004866 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800485e:	f7ff ff33 	bl	80046c8 <HAL_RCC_GetPCLK1Freq>
 8004862:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	69db      	ldr	r3, [r3, #28]
 800486c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004870:	f040 810c 	bne.w	8004a8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004878:	2200      	movs	r2, #0
 800487a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800487e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004882:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004886:	4622      	mov	r2, r4
 8004888:	462b      	mov	r3, r5
 800488a:	1891      	adds	r1, r2, r2
 800488c:	65b9      	str	r1, [r7, #88]	; 0x58
 800488e:	415b      	adcs	r3, r3
 8004890:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004892:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004896:	4621      	mov	r1, r4
 8004898:	eb12 0801 	adds.w	r8, r2, r1
 800489c:	4629      	mov	r1, r5
 800489e:	eb43 0901 	adc.w	r9, r3, r1
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048b6:	4690      	mov	r8, r2
 80048b8:	4699      	mov	r9, r3
 80048ba:	4623      	mov	r3, r4
 80048bc:	eb18 0303 	adds.w	r3, r8, r3
 80048c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048c4:	462b      	mov	r3, r5
 80048c6:	eb49 0303 	adc.w	r3, r9, r3
 80048ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048e2:	460b      	mov	r3, r1
 80048e4:	18db      	adds	r3, r3, r3
 80048e6:	653b      	str	r3, [r7, #80]	; 0x50
 80048e8:	4613      	mov	r3, r2
 80048ea:	eb42 0303 	adc.w	r3, r2, r3
 80048ee:	657b      	str	r3, [r7, #84]	; 0x54
 80048f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048f8:	f7fb fcd2 	bl	80002a0 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4b61      	ldr	r3, [pc, #388]	; (8004a88 <UART_SetConfig+0x2d4>)
 8004902:	fba3 2302 	umull	r2, r3, r3, r2
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	011c      	lsls	r4, r3, #4
 800490a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490e:	2200      	movs	r2, #0
 8004910:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004914:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004918:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800491c:	4642      	mov	r2, r8
 800491e:	464b      	mov	r3, r9
 8004920:	1891      	adds	r1, r2, r2
 8004922:	64b9      	str	r1, [r7, #72]	; 0x48
 8004924:	415b      	adcs	r3, r3
 8004926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004928:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800492c:	4641      	mov	r1, r8
 800492e:	eb12 0a01 	adds.w	sl, r2, r1
 8004932:	4649      	mov	r1, r9
 8004934:	eb43 0b01 	adc.w	fp, r3, r1
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004944:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800494c:	4692      	mov	sl, r2
 800494e:	469b      	mov	fp, r3
 8004950:	4643      	mov	r3, r8
 8004952:	eb1a 0303 	adds.w	r3, sl, r3
 8004956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800495a:	464b      	mov	r3, r9
 800495c:	eb4b 0303 	adc.w	r3, fp, r3
 8004960:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004970:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004974:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004978:	460b      	mov	r3, r1
 800497a:	18db      	adds	r3, r3, r3
 800497c:	643b      	str	r3, [r7, #64]	; 0x40
 800497e:	4613      	mov	r3, r2
 8004980:	eb42 0303 	adc.w	r3, r2, r3
 8004984:	647b      	str	r3, [r7, #68]	; 0x44
 8004986:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800498a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800498e:	f7fb fc87 	bl	80002a0 <__aeabi_uldivmod>
 8004992:	4602      	mov	r2, r0
 8004994:	460b      	mov	r3, r1
 8004996:	4611      	mov	r1, r2
 8004998:	4b3b      	ldr	r3, [pc, #236]	; (8004a88 <UART_SetConfig+0x2d4>)
 800499a:	fba3 2301 	umull	r2, r3, r3, r1
 800499e:	095b      	lsrs	r3, r3, #5
 80049a0:	2264      	movs	r2, #100	; 0x64
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	1acb      	subs	r3, r1, r3
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049ae:	4b36      	ldr	r3, [pc, #216]	; (8004a88 <UART_SetConfig+0x2d4>)
 80049b0:	fba3 2302 	umull	r2, r3, r3, r2
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049bc:	441c      	add	r4, r3
 80049be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049d0:	4642      	mov	r2, r8
 80049d2:	464b      	mov	r3, r9
 80049d4:	1891      	adds	r1, r2, r2
 80049d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80049d8:	415b      	adcs	r3, r3
 80049da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049e0:	4641      	mov	r1, r8
 80049e2:	1851      	adds	r1, r2, r1
 80049e4:	6339      	str	r1, [r7, #48]	; 0x30
 80049e6:	4649      	mov	r1, r9
 80049e8:	414b      	adcs	r3, r1
 80049ea:	637b      	str	r3, [r7, #52]	; 0x34
 80049ec:	f04f 0200 	mov.w	r2, #0
 80049f0:	f04f 0300 	mov.w	r3, #0
 80049f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049f8:	4659      	mov	r1, fp
 80049fa:	00cb      	lsls	r3, r1, #3
 80049fc:	4651      	mov	r1, sl
 80049fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a02:	4651      	mov	r1, sl
 8004a04:	00ca      	lsls	r2, r1, #3
 8004a06:	4610      	mov	r0, r2
 8004a08:	4619      	mov	r1, r3
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a14:	464b      	mov	r3, r9
 8004a16:	460a      	mov	r2, r1
 8004a18:	eb42 0303 	adc.w	r3, r2, r3
 8004a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a34:	460b      	mov	r3, r1
 8004a36:	18db      	adds	r3, r3, r3
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	eb42 0303 	adc.w	r3, r2, r3
 8004a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a4a:	f7fb fc29 	bl	80002a0 <__aeabi_uldivmod>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	460b      	mov	r3, r1
 8004a52:	4b0d      	ldr	r3, [pc, #52]	; (8004a88 <UART_SetConfig+0x2d4>)
 8004a54:	fba3 1302 	umull	r1, r3, r3, r2
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	2164      	movs	r1, #100	; 0x64
 8004a5c:	fb01 f303 	mul.w	r3, r1, r3
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	3332      	adds	r3, #50	; 0x32
 8004a66:	4a08      	ldr	r2, [pc, #32]	; (8004a88 <UART_SetConfig+0x2d4>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	095b      	lsrs	r3, r3, #5
 8004a6e:	f003 0207 	and.w	r2, r3, #7
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4422      	add	r2, r4
 8004a7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a7c:	e105      	b.n	8004c8a <UART_SetConfig+0x4d6>
 8004a7e:	bf00      	nop
 8004a80:	40011000 	.word	0x40011000
 8004a84:	40011400 	.word	0x40011400
 8004a88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a90:	2200      	movs	r2, #0
 8004a92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a9e:	4642      	mov	r2, r8
 8004aa0:	464b      	mov	r3, r9
 8004aa2:	1891      	adds	r1, r2, r2
 8004aa4:	6239      	str	r1, [r7, #32]
 8004aa6:	415b      	adcs	r3, r3
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aae:	4641      	mov	r1, r8
 8004ab0:	1854      	adds	r4, r2, r1
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	eb43 0501 	adc.w	r5, r3, r1
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	00eb      	lsls	r3, r5, #3
 8004ac2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac6:	00e2      	lsls	r2, r4, #3
 8004ac8:	4614      	mov	r4, r2
 8004aca:	461d      	mov	r5, r3
 8004acc:	4643      	mov	r3, r8
 8004ace:	18e3      	adds	r3, r4, r3
 8004ad0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	eb45 0303 	adc.w	r3, r5, r3
 8004ada:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004aea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004afa:	4629      	mov	r1, r5
 8004afc:	008b      	lsls	r3, r1, #2
 8004afe:	4621      	mov	r1, r4
 8004b00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b04:	4621      	mov	r1, r4
 8004b06:	008a      	lsls	r2, r1, #2
 8004b08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b0c:	f7fb fbc8 	bl	80002a0 <__aeabi_uldivmod>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4b60      	ldr	r3, [pc, #384]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004b16:	fba3 2302 	umull	r2, r3, r3, r2
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	011c      	lsls	r4, r3, #4
 8004b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b22:	2200      	movs	r2, #0
 8004b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b30:	4642      	mov	r2, r8
 8004b32:	464b      	mov	r3, r9
 8004b34:	1891      	adds	r1, r2, r2
 8004b36:	61b9      	str	r1, [r7, #24]
 8004b38:	415b      	adcs	r3, r3
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b40:	4641      	mov	r1, r8
 8004b42:	1851      	adds	r1, r2, r1
 8004b44:	6139      	str	r1, [r7, #16]
 8004b46:	4649      	mov	r1, r9
 8004b48:	414b      	adcs	r3, r1
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b58:	4659      	mov	r1, fp
 8004b5a:	00cb      	lsls	r3, r1, #3
 8004b5c:	4651      	mov	r1, sl
 8004b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b62:	4651      	mov	r1, sl
 8004b64:	00ca      	lsls	r2, r1, #3
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4642      	mov	r2, r8
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b74:	464b      	mov	r3, r9
 8004b76:	460a      	mov	r2, r1
 8004b78:	eb42 0303 	adc.w	r3, r2, r3
 8004b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b98:	4649      	mov	r1, r9
 8004b9a:	008b      	lsls	r3, r1, #2
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba2:	4641      	mov	r1, r8
 8004ba4:	008a      	lsls	r2, r1, #2
 8004ba6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004baa:	f7fb fb79 	bl	80002a0 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4b39      	ldr	r3, [pc, #228]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	2164      	movs	r1, #100	; 0x64
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	3332      	adds	r3, #50	; 0x32
 8004bc6:	4a34      	ldr	r2, [pc, #208]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd2:	441c      	add	r4, r3
 8004bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd8:	2200      	movs	r2, #0
 8004bda:	673b      	str	r3, [r7, #112]	; 0x70
 8004bdc:	677a      	str	r2, [r7, #116]	; 0x74
 8004bde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004be2:	4642      	mov	r2, r8
 8004be4:	464b      	mov	r3, r9
 8004be6:	1891      	adds	r1, r2, r2
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	415b      	adcs	r3, r3
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf2:	4641      	mov	r1, r8
 8004bf4:	1851      	adds	r1, r2, r1
 8004bf6:	6039      	str	r1, [r7, #0]
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	414b      	adcs	r3, r1
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	f04f 0200 	mov.w	r2, #0
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c0a:	4659      	mov	r1, fp
 8004c0c:	00cb      	lsls	r3, r1, #3
 8004c0e:	4651      	mov	r1, sl
 8004c10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c14:	4651      	mov	r1, sl
 8004c16:	00ca      	lsls	r2, r1, #3
 8004c18:	4610      	mov	r0, r2
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4642      	mov	r2, r8
 8004c20:	189b      	adds	r3, r3, r2
 8004c22:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c24:	464b      	mov	r3, r9
 8004c26:	460a      	mov	r2, r1
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	663b      	str	r3, [r7, #96]	; 0x60
 8004c38:	667a      	str	r2, [r7, #100]	; 0x64
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c46:	4649      	mov	r1, r9
 8004c48:	008b      	lsls	r3, r1, #2
 8004c4a:	4641      	mov	r1, r8
 8004c4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c50:	4641      	mov	r1, r8
 8004c52:	008a      	lsls	r2, r1, #2
 8004c54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c58:	f7fb fb22 	bl	80002a0 <__aeabi_uldivmod>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004c62:	fba3 1302 	umull	r1, r3, r3, r2
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	2164      	movs	r1, #100	; 0x64
 8004c6a:	fb01 f303 	mul.w	r3, r1, r3
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	3332      	adds	r3, #50	; 0x32
 8004c74:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <UART_SetConfig+0x4e4>)
 8004c76:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7a:	095b      	lsrs	r3, r3, #5
 8004c7c:	f003 020f 	and.w	r2, r3, #15
 8004c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4422      	add	r2, r4
 8004c88:	609a      	str	r2, [r3, #8]
}
 8004c8a:	bf00      	nop
 8004c8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c90:	46bd      	mov	sp, r7
 8004c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c96:	bf00      	nop
 8004c98:	51eb851f 	.word	0x51eb851f

08004c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	f107 001c 	add.w	r0, r7, #28
 8004caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d122      	bne.n	8004cfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d105      	bne.n	8004cee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f001 fbee 	bl	80064d0 <USB_CoreReset>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	73fb      	strb	r3, [r7, #15]
 8004cf8:	e01a      	b.n	8004d30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f001 fbe2 	bl	80064d0 <USB_CoreReset>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d106      	bne.n	8004d24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	639a      	str	r2, [r3, #56]	; 0x38
 8004d22:	e005      	b.n	8004d30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d10b      	bne.n	8004d4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f043 0206 	orr.w	r2, r3, #6
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f043 0220 	orr.w	r2, r3, #32
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d5a:	b004      	add	sp, #16
 8004d5c:	4770      	bx	lr
	...

08004d60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d6e:	79fb      	ldrb	r3, [r7, #7]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d165      	bne.n	8004e40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4a41      	ldr	r2, [pc, #260]	; (8004e7c <USB_SetTurnaroundTime+0x11c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d906      	bls.n	8004d8a <USB_SetTurnaroundTime+0x2a>
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	4a40      	ldr	r2, [pc, #256]	; (8004e80 <USB_SetTurnaroundTime+0x120>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d202      	bcs.n	8004d8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d84:	230f      	movs	r3, #15
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	e062      	b.n	8004e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4a3c      	ldr	r2, [pc, #240]	; (8004e80 <USB_SetTurnaroundTime+0x120>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d306      	bcc.n	8004da0 <USB_SetTurnaroundTime+0x40>
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	4a3b      	ldr	r2, [pc, #236]	; (8004e84 <USB_SetTurnaroundTime+0x124>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d202      	bcs.n	8004da0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d9a:	230e      	movs	r3, #14
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	e057      	b.n	8004e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	4a38      	ldr	r2, [pc, #224]	; (8004e84 <USB_SetTurnaroundTime+0x124>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d306      	bcc.n	8004db6 <USB_SetTurnaroundTime+0x56>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	4a37      	ldr	r2, [pc, #220]	; (8004e88 <USB_SetTurnaroundTime+0x128>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d202      	bcs.n	8004db6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004db0:	230d      	movs	r3, #13
 8004db2:	617b      	str	r3, [r7, #20]
 8004db4:	e04c      	b.n	8004e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	4a33      	ldr	r2, [pc, #204]	; (8004e88 <USB_SetTurnaroundTime+0x128>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d306      	bcc.n	8004dcc <USB_SetTurnaroundTime+0x6c>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4a32      	ldr	r2, [pc, #200]	; (8004e8c <USB_SetTurnaroundTime+0x12c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d802      	bhi.n	8004dcc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004dc6:	230c      	movs	r3, #12
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e041      	b.n	8004e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4a2f      	ldr	r2, [pc, #188]	; (8004e8c <USB_SetTurnaroundTime+0x12c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d906      	bls.n	8004de2 <USB_SetTurnaroundTime+0x82>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4a2e      	ldr	r2, [pc, #184]	; (8004e90 <USB_SetTurnaroundTime+0x130>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d802      	bhi.n	8004de2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ddc:	230b      	movs	r3, #11
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e036      	b.n	8004e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4a2a      	ldr	r2, [pc, #168]	; (8004e90 <USB_SetTurnaroundTime+0x130>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d906      	bls.n	8004df8 <USB_SetTurnaroundTime+0x98>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4a29      	ldr	r2, [pc, #164]	; (8004e94 <USB_SetTurnaroundTime+0x134>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d802      	bhi.n	8004df8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004df2:	230a      	movs	r3, #10
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e02b      	b.n	8004e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4a26      	ldr	r2, [pc, #152]	; (8004e94 <USB_SetTurnaroundTime+0x134>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d906      	bls.n	8004e0e <USB_SetTurnaroundTime+0xae>
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	4a25      	ldr	r2, [pc, #148]	; (8004e98 <USB_SetTurnaroundTime+0x138>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d202      	bcs.n	8004e0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e08:	2309      	movs	r3, #9
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	e020      	b.n	8004e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <USB_SetTurnaroundTime+0x138>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d306      	bcc.n	8004e24 <USB_SetTurnaroundTime+0xc4>
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	4a20      	ldr	r2, [pc, #128]	; (8004e9c <USB_SetTurnaroundTime+0x13c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d802      	bhi.n	8004e24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e1e:	2308      	movs	r3, #8
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	e015      	b.n	8004e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4a1d      	ldr	r2, [pc, #116]	; (8004e9c <USB_SetTurnaroundTime+0x13c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d906      	bls.n	8004e3a <USB_SetTurnaroundTime+0xda>
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	4a1c      	ldr	r2, [pc, #112]	; (8004ea0 <USB_SetTurnaroundTime+0x140>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d202      	bcs.n	8004e3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e34:	2307      	movs	r3, #7
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e00a      	b.n	8004e50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e3a:	2306      	movs	r3, #6
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e007      	b.n	8004e50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e46:	2309      	movs	r3, #9
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e001      	b.n	8004e50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e4c:	2309      	movs	r3, #9
 8004e4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	029b      	lsls	r3, r3, #10
 8004e64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	371c      	adds	r7, #28
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	00d8acbf 	.word	0x00d8acbf
 8004e80:	00e4e1c0 	.word	0x00e4e1c0
 8004e84:	00f42400 	.word	0x00f42400
 8004e88:	01067380 	.word	0x01067380
 8004e8c:	011a499f 	.word	0x011a499f
 8004e90:	01312cff 	.word	0x01312cff
 8004e94:	014ca43f 	.word	0x014ca43f
 8004e98:	016e3600 	.word	0x016e3600
 8004e9c:	01a6ab1f 	.word	0x01a6ab1f
 8004ea0:	01e84800 	.word	0x01e84800

08004ea4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f043 0201 	orr.w	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d115      	bne.n	8004f36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f16:	2001      	movs	r0, #1
 8004f18:	f7fc f9f0 	bl	80012fc <HAL_Delay>
      ms++;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f001 fa45 	bl	80063b2 <USB_GetMode>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d01e      	beq.n	8004f6c <USB_SetCurrentMode+0x84>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2b31      	cmp	r3, #49	; 0x31
 8004f32:	d9f0      	bls.n	8004f16 <USB_SetCurrentMode+0x2e>
 8004f34:	e01a      	b.n	8004f6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f36:	78fb      	ldrb	r3, [r7, #3]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d115      	bne.n	8004f68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f48:	2001      	movs	r0, #1
 8004f4a:	f7fc f9d7 	bl	80012fc <HAL_Delay>
      ms++;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3301      	adds	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f001 fa2c 	bl	80063b2 <USB_GetMode>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d005      	beq.n	8004f6c <USB_SetCurrentMode+0x84>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2b31      	cmp	r3, #49	; 0x31
 8004f64:	d9f0      	bls.n	8004f48 <USB_SetCurrentMode+0x60>
 8004f66:	e001      	b.n	8004f6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e005      	b.n	8004f78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b32      	cmp	r3, #50	; 0x32
 8004f70:	d101      	bne.n	8004f76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f80:	b084      	sub	sp, #16
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b086      	sub	sp, #24
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	e009      	b.n	8004fb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	3340      	adds	r3, #64	; 0x40
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	2200      	movs	r2, #0
 8004fac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b0e      	cmp	r3, #14
 8004fb8:	d9f2      	bls.n	8004fa0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d11c      	bne.n	8004ffa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fce:	f043 0302 	orr.w	r3, r3, #2
 8004fd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8004ff8:	e00b      	b.n	8005012 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005018:	461a      	mov	r2, r3
 800501a:	2300      	movs	r3, #0
 800501c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005024:	4619      	mov	r1, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800502c:	461a      	mov	r2, r3
 800502e:	680b      	ldr	r3, [r1, #0]
 8005030:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b01      	cmp	r3, #1
 8005036:	d10c      	bne.n	8005052 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d104      	bne.n	8005048 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800503e:	2100      	movs	r1, #0
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f965 	bl	8005310 <USB_SetDevSpeed>
 8005046:	e008      	b.n	800505a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005048:	2101      	movs	r1, #1
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f960 	bl	8005310 <USB_SetDevSpeed>
 8005050:	e003      	b.n	800505a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005052:	2103      	movs	r1, #3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f95b 	bl	8005310 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800505a:	2110      	movs	r1, #16
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f8f3 	bl	8005248 <USB_FlushTxFifo>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f91f 	bl	80052b0 <USB_FlushRxFifo>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d001      	beq.n	800507c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	461a      	mov	r2, r3
 8005084:	2300      	movs	r3, #0
 8005086:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	461a      	mov	r2, r3
 8005090:	2300      	movs	r3, #0
 8005092:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509a:	461a      	mov	r2, r3
 800509c:	2300      	movs	r3, #0
 800509e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]
 80050a4:	e043      	b.n	800512e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050bc:	d118      	bne.n	80050f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d0:	461a      	mov	r2, r3
 80050d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	e013      	b.n	8005102 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e6:	461a      	mov	r2, r3
 80050e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	e008      	b.n	8005102 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fc:	461a      	mov	r2, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510e:	461a      	mov	r2, r3
 8005110:	2300      	movs	r3, #0
 8005112:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005120:	461a      	mov	r2, r3
 8005122:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005126:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	3301      	adds	r3, #1
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	429a      	cmp	r2, r3
 8005134:	d3b7      	bcc.n	80050a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	e043      	b.n	80051c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800514e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005152:	d118      	bne.n	8005186 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10a      	bne.n	8005170 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005166:	461a      	mov	r2, r3
 8005168:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e013      	b.n	8005198 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	461a      	mov	r2, r3
 800517e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	e008      	b.n	8005198 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	461a      	mov	r2, r3
 8005194:	2300      	movs	r3, #0
 8005196:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	461a      	mov	r2, r3
 80051a6:	2300      	movs	r3, #0
 80051a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	3301      	adds	r3, #1
 80051c2:	613b      	str	r3, [r7, #16]
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d3b7      	bcc.n	800513c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80051ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d105      	bne.n	8005200 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	f043 0210 	orr.w	r2, r3, #16
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699a      	ldr	r2, [r3, #24]
 8005204:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <USB_DevInit+0x2c4>)
 8005206:	4313      	orrs	r3, r2
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800520c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f043 0208 	orr.w	r2, r3, #8
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800521e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d107      	bne.n	8005234 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005234:	7dfb      	ldrb	r3, [r7, #23]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3718      	adds	r7, #24
 800523a:	46bd      	mov	sp, r7
 800523c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005240:	b004      	add	sp, #16
 8005242:	4770      	bx	lr
 8005244:	803c3800 	.word	0x803c3800

08005248 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005252:	2300      	movs	r3, #0
 8005254:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4a13      	ldr	r2, [pc, #76]	; (80052ac <USB_FlushTxFifo+0x64>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d901      	bls.n	8005268 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e01b      	b.n	80052a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	daf2      	bge.n	8005256 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	019b      	lsls	r3, r3, #6
 8005278:	f043 0220 	orr.w	r2, r3, #32
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3301      	adds	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	4a08      	ldr	r2, [pc, #32]	; (80052ac <USB_FlushTxFifo+0x64>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d901      	bls.n	8005292 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e006      	b.n	80052a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b20      	cmp	r3, #32
 800529c:	d0f0      	beq.n	8005280 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	00030d40 	.word	0x00030d40

080052b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3301      	adds	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4a11      	ldr	r2, [pc, #68]	; (800530c <USB_FlushRxFifo+0x5c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e018      	b.n	8005300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	daf2      	bge.n	80052bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2210      	movs	r2, #16
 80052de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	3301      	adds	r3, #1
 80052e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a08      	ldr	r2, [pc, #32]	; (800530c <USB_FlushRxFifo+0x5c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d901      	bls.n	80052f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e006      	b.n	8005300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	2b10      	cmp	r3, #16
 80052fc:	d0f0      	beq.n	80052e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	00030d40 	.word	0x00030d40

08005310 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005330:	4313      	orrs	r3, r2
 8005332:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005342:	b480      	push	{r7}
 8005344:	b087      	sub	sp, #28
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 0306 	and.w	r3, r3, #6
 800535a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005362:	2300      	movs	r3, #0
 8005364:	75fb      	strb	r3, [r7, #23]
 8005366:	e00a      	b.n	800537e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d002      	beq.n	8005374 <USB_GetDevSpeed+0x32>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b06      	cmp	r3, #6
 8005372:	d102      	bne.n	800537a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005374:	2302      	movs	r3, #2
 8005376:	75fb      	strb	r3, [r7, #23]
 8005378:	e001      	b.n	800537e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800537a:	230f      	movs	r3, #15
 800537c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800537e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005380:	4618      	mov	r0, r3
 8005382:	371c      	adds	r7, #28
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	785b      	ldrb	r3, [r3, #1]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d13a      	bne.n	800541e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ae:	69da      	ldr	r2, [r3, #28]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	f003 030f 	and.w	r3, r3, #15
 80053b8:	2101      	movs	r1, #1
 80053ba:	fa01 f303 	lsl.w	r3, r1, r3
 80053be:	b29b      	uxth	r3, r3
 80053c0:	68f9      	ldr	r1, [r7, #12]
 80053c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c6:	4313      	orrs	r3, r2
 80053c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d155      	bne.n	800548c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	791b      	ldrb	r3, [r3, #4]
 80053fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	059b      	lsls	r3, r3, #22
 8005402:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005404:	4313      	orrs	r3, r2
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	440a      	add	r2, r1
 800540e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541a:	6013      	str	r3, [r2, #0]
 800541c:	e036      	b.n	800548c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	2101      	movs	r1, #1
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	041b      	lsls	r3, r3, #16
 8005436:	68f9      	ldr	r1, [r7, #12]
 8005438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800543c:	4313      	orrs	r3, r2
 800543e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	015a      	lsls	r2, r3, #5
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4413      	add	r3, r2
 8005448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d11a      	bne.n	800548c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	015a      	lsls	r2, r3, #5
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4413      	add	r3, r2
 800545e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	791b      	ldrb	r3, [r3, #4]
 8005470:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005472:	430b      	orrs	r3, r1
 8005474:	4313      	orrs	r3, r2
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	0151      	lsls	r1, r2, #5
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	440a      	add	r2, r1
 800547e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800548a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
	...

0800549c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d161      	bne.n	800557c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ce:	d11f      	bne.n	8005510 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68ba      	ldr	r2, [r7, #8]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800550e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	2101      	movs	r1, #1
 8005522:	fa01 f303 	lsl.w	r3, r1, r3
 8005526:	b29b      	uxth	r3, r3
 8005528:	43db      	mvns	r3, r3
 800552a:	68f9      	ldr	r1, [r7, #12]
 800552c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005530:	4013      	ands	r3, r2
 8005532:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	2101      	movs	r1, #1
 8005546:	fa01 f303 	lsl.w	r3, r1, r3
 800554a:	b29b      	uxth	r3, r3
 800554c:	43db      	mvns	r3, r3
 800554e:	68f9      	ldr	r1, [r7, #12]
 8005550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005554:	4013      	ands	r3, r2
 8005556:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	0159      	lsls	r1, r3, #5
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	440b      	add	r3, r1
 800556e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005572:	4619      	mov	r1, r3
 8005574:	4b35      	ldr	r3, [pc, #212]	; (800564c <USB_DeactivateEndpoint+0x1b0>)
 8005576:	4013      	ands	r3, r2
 8005578:	600b      	str	r3, [r1, #0]
 800557a:	e060      	b.n	800563e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800558e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005592:	d11f      	bne.n	80055d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f003 030f 	and.w	r3, r3, #15
 80055e4:	2101      	movs	r1, #1
 80055e6:	fa01 f303 	lsl.w	r3, r1, r3
 80055ea:	041b      	lsls	r3, r3, #16
 80055ec:	43db      	mvns	r3, r3
 80055ee:	68f9      	ldr	r1, [r7, #12]
 80055f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055f4:	4013      	ands	r3, r2
 80055f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fe:	69da      	ldr	r2, [r3, #28]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	f003 030f 	and.w	r3, r3, #15
 8005608:	2101      	movs	r1, #1
 800560a:	fa01 f303 	lsl.w	r3, r1, r3
 800560e:	041b      	lsls	r3, r3, #16
 8005610:	43db      	mvns	r3, r3
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005618:	4013      	ands	r3, r2
 800561a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	0159      	lsls	r1, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	440b      	add	r3, r1
 8005632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005636:	4619      	mov	r1, r3
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <USB_DeactivateEndpoint+0x1b4>)
 800563a:	4013      	ands	r3, r2
 800563c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	ec337800 	.word	0xec337800
 8005650:	eff37800 	.word	0xeff37800

08005654 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08a      	sub	sp, #40	; 0x28
 8005658:	af02      	add	r7, sp, #8
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	785b      	ldrb	r3, [r3, #1]
 8005670:	2b01      	cmp	r3, #1
 8005672:	f040 815c 	bne.w	800592e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d132      	bne.n	80056e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	440a      	add	r2, r1
 8005694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005698:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800569c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056dc:	0cdb      	lsrs	r3, r3, #19
 80056de:	04db      	lsls	r3, r3, #19
 80056e0:	6113      	str	r3, [r2, #16]
 80056e2:	e074      	b.n	80057ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	0151      	lsls	r1, r2, #5
 80056f6:	69fa      	ldr	r2, [r7, #28]
 80056f8:	440a      	add	r2, r1
 80056fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fe:	0cdb      	lsrs	r3, r3, #19
 8005700:	04db      	lsls	r3, r3, #19
 8005702:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	0151      	lsls	r1, r2, #5
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	440a      	add	r2, r1
 800571a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005722:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005726:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6999      	ldr	r1, [r3, #24]
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	440b      	add	r3, r1
 8005740:	1e59      	subs	r1, r3, #1
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	fbb1 f3f3 	udiv	r3, r1, r3
 800574a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800574c:	4b9d      	ldr	r3, [pc, #628]	; (80059c4 <USB_EPStartXfer+0x370>)
 800574e:	400b      	ands	r3, r1
 8005750:	69b9      	ldr	r1, [r7, #24]
 8005752:	0148      	lsls	r0, r1, #5
 8005754:	69f9      	ldr	r1, [r7, #28]
 8005756:	4401      	add	r1, r0
 8005758:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800575c:	4313      	orrs	r3, r2
 800575e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005776:	69b9      	ldr	r1, [r7, #24]
 8005778:	0148      	lsls	r0, r1, #5
 800577a:	69f9      	ldr	r1, [r7, #28]
 800577c:	4401      	add	r1, r0
 800577e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005782:	4313      	orrs	r3, r2
 8005784:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	791b      	ldrb	r3, [r3, #4]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d11f      	bne.n	80057ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	0151      	lsls	r1, r2, #5
 80057a0:	69fa      	ldr	r2, [r7, #28]
 80057a2:	440a      	add	r2, r1
 80057a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d14b      	bne.n	800586c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d009      	beq.n	80057f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e8:	461a      	mov	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	791b      	ldrb	r3, [r3, #4]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d128      	bne.n	800584a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005804:	2b00      	cmp	r3, #0
 8005806:	d110      	bne.n	800582a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005822:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	e00f      	b.n	800584a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	0151      	lsls	r1, r2, #5
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	440a      	add	r2, r1
 8005840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005848:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005864:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005868:	6013      	str	r3, [r2, #0]
 800586a:	e133      	b.n	8005ad4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	0151      	lsls	r1, r2, #5
 800587e:	69fa      	ldr	r2, [r7, #28]
 8005880:	440a      	add	r2, r1
 8005882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005886:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800588a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	791b      	ldrb	r3, [r3, #4]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d015      	beq.n	80058c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 811b 	beq.w	8005ad4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	2101      	movs	r1, #1
 80058b0:	fa01 f303 	lsl.w	r3, r1, r3
 80058b4:	69f9      	ldr	r1, [r7, #28]
 80058b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058ba:	4313      	orrs	r3, r2
 80058bc:	634b      	str	r3, [r1, #52]	; 0x34
 80058be:	e109      	b.n	8005ad4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d110      	bne.n	80058f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	e00f      	b.n	8005912 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	0151      	lsls	r1, r2, #5
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	440a      	add	r2, r1
 8005908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005910:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6919      	ldr	r1, [r3, #16]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	b298      	uxth	r0, r3
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	4603      	mov	r3, r0
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fade 	bl	8005ee8 <USB_WritePacket>
 800592c:	e0d2      	b.n	8005ad4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	4413      	add	r3, r2
 8005936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	440a      	add	r2, r1
 8005944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005948:	0cdb      	lsrs	r3, r3, #19
 800594a:	04db      	lsls	r3, r3, #19
 800594c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	440a      	add	r2, r1
 8005964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005968:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800596c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005970:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d126      	bne.n	80059c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005990:	69b9      	ldr	r1, [r7, #24]
 8005992:	0148      	lsls	r0, r1, #5
 8005994:	69f9      	ldr	r1, [r7, #28]
 8005996:	4401      	add	r1, r0
 8005998:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800599c:	4313      	orrs	r3, r2
 800599e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059be:	6113      	str	r3, [r2, #16]
 80059c0:	e03a      	b.n	8005a38 <USB_EPStartXfer+0x3e4>
 80059c2:	bf00      	nop
 80059c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	699a      	ldr	r2, [r3, #24]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	1e5a      	subs	r2, r3, #1
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	8afa      	ldrh	r2, [r7, #22]
 80059e4:	fb03 f202 	mul.w	r2, r3, r2
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	8afb      	ldrh	r3, [r7, #22]
 80059fc:	04d9      	lsls	r1, r3, #19
 80059fe:	4b38      	ldr	r3, [pc, #224]	; (8005ae0 <USB_EPStartXfer+0x48c>)
 8005a00:	400b      	ands	r3, r1
 8005a02:	69b9      	ldr	r1, [r7, #24]
 8005a04:	0148      	lsls	r0, r1, #5
 8005a06:	69f9      	ldr	r1, [r7, #28]
 8005a08:	4401      	add	r1, r0
 8005a0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	015a      	lsls	r2, r3, #5
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4413      	add	r3, r2
 8005a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a28:	69b9      	ldr	r1, [r7, #24]
 8005a2a:	0148      	lsls	r0, r1, #5
 8005a2c:	69f9      	ldr	r1, [r7, #28]
 8005a2e:	4401      	add	r1, r0
 8005a30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a34:	4313      	orrs	r3, r2
 8005a36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d10d      	bne.n	8005a5a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6919      	ldr	r1, [r3, #16]
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	460a      	mov	r2, r1
 8005a58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	791b      	ldrb	r3, [r3, #4]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d128      	bne.n	8005ab4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d110      	bne.n	8005a94 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69ba      	ldr	r2, [r7, #24]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e00f      	b.n	8005ab4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	015a      	lsls	r2, r3, #5
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69ba      	ldr	r2, [r7, #24]
 8005aa4:	0151      	lsls	r1, r2, #5
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	0151      	lsls	r1, r2, #5
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	440a      	add	r2, r1
 8005aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ace:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3720      	adds	r7, #32
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	1ff80000 	.word	0x1ff80000

08005ae4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	4613      	mov	r3, r2
 8005af0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	f040 80ce 	bne.w	8005ca2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d132      	bne.n	8005b74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	0151      	lsls	r1, r2, #5
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	440a      	add	r2, r1
 8005b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	0151      	lsls	r1, r2, #5
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	440a      	add	r2, r1
 8005b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6c:	0cdb      	lsrs	r3, r3, #19
 8005b6e:	04db      	lsls	r3, r3, #19
 8005b70:	6113      	str	r3, [r2, #16]
 8005b72:	e04e      	b.n	8005c12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	0151      	lsls	r1, r2, #5
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	440a      	add	r2, r1
 8005b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b8e:	0cdb      	lsrs	r3, r3, #19
 8005b90:	04db      	lsls	r3, r3, #19
 8005b92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	0151      	lsls	r1, r2, #5
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	440a      	add	r2, r1
 8005baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d903      	bls.n	8005bcc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	68da      	ldr	r2, [r3, #12]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005be6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c02:	6939      	ldr	r1, [r7, #16]
 8005c04:	0148      	lsls	r0, r1, #5
 8005c06:	6979      	ldr	r1, [r7, #20]
 8005c08:	4401      	add	r1, r0
 8005c0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d11e      	bne.n	8005c56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	0151      	lsls	r1, r2, #5
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	440a      	add	r2, r1
 8005c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	e097      	b.n	8005d86 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 8083 	beq.w	8005d86 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	2101      	movs	r1, #1
 8005c92:	fa01 f303 	lsl.w	r3, r1, r3
 8005c96:	6979      	ldr	r1, [r7, #20]
 8005c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	634b      	str	r3, [r1, #52]	; 0x34
 8005ca0:	e071      	b.n	8005d86 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	015a      	lsls	r2, r3, #5
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	0151      	lsls	r1, r2, #5
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	440a      	add	r2, r1
 8005cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbc:	0cdb      	lsrs	r3, r3, #19
 8005cbe:	04db      	lsls	r3, r3, #19
 8005cc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	0151      	lsls	r1, r2, #5
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	440a      	add	r2, r1
 8005cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ce0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ce4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	69db      	ldr	r3, [r3, #28]
 8005d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d34:	6939      	ldr	r1, [r7, #16]
 8005d36:	0148      	lsls	r0, r1, #5
 8005d38:	6979      	ldr	r1, [r7, #20]
 8005d3a:	4401      	add	r1, r0
 8005d3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d40:	4313      	orrs	r3, r2
 8005d42:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d10d      	bne.n	8005d66 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d009      	beq.n	8005d66 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6919      	ldr	r1, [r3, #16]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d62:	460a      	mov	r2, r1
 8005d64:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	371c      	adds	r7, #28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b087      	sub	sp, #28
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	785b      	ldrb	r3, [r3, #1]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d14a      	bne.n	8005e48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dca:	f040 8086 	bne.w	8005eda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	7812      	ldrb	r2, [r2, #0]
 8005de2:	0151      	lsls	r1, r2, #5
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	440a      	add	r2, r1
 8005de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005df0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	7812      	ldrb	r2, [r2, #0]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	3301      	adds	r3, #1
 8005e1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d902      	bls.n	8005e2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
          break;
 8005e2a:	e056      	b.n	8005eda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e44:	d0e7      	beq.n	8005e16 <USB_EPStopXfer+0x82>
 8005e46:	e048      	b.n	8005eda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	015a      	lsls	r2, r3, #5
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	4413      	add	r3, r2
 8005e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e60:	d13b      	bne.n	8005eda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	7812      	ldrb	r2, [r2, #0]
 8005e76:	0151      	lsls	r1, r2, #5
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	440a      	add	r2, r1
 8005e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ea8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3301      	adds	r3, #1
 8005eae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d902      	bls.n	8005ec0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8005ebe:	e00c      	b.n	8005eda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	015a      	lsls	r2, r3, #5
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ed8:	d0e7      	beq.n	8005eaa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b089      	sub	sp, #36	; 0x24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	71fb      	strb	r3, [r7, #7]
 8005efa:	4613      	mov	r3, r2
 8005efc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005f06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d123      	bne.n	8005f56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005f0e:	88bb      	ldrh	r3, [r7, #4]
 8005f10:	3303      	adds	r3, #3
 8005f12:	089b      	lsrs	r3, r3, #2
 8005f14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005f16:	2300      	movs	r3, #0
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e018      	b.n	8005f4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005f1c:	79fb      	ldrb	r3, [r7, #7]
 8005f1e:	031a      	lsls	r2, r3, #12
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f28:	461a      	mov	r2, r3
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	3301      	adds	r3, #1
 8005f34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	3301      	adds	r3, #1
 8005f46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	61bb      	str	r3, [r7, #24]
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d3e2      	bcc.n	8005f1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3724      	adds	r7, #36	; 0x24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b08b      	sub	sp, #44	; 0x2c
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005f7a:	88fb      	ldrh	r3, [r7, #6]
 8005f7c:	089b      	lsrs	r3, r3, #2
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	f003 0303 	and.w	r3, r3, #3
 8005f88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	623b      	str	r3, [r7, #32]
 8005f8e:	e014      	b.n	8005fba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	3301      	adds	r3, #1
 8005fac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	623b      	str	r3, [r7, #32]
 8005fba:	6a3a      	ldr	r2, [r7, #32]
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d3e6      	bcc.n	8005f90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005fc2:	8bfb      	ldrh	r3, [r7, #30]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01e      	beq.n	8006006 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f107 0310 	add.w	r3, r7, #16
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	701a      	strb	r2, [r3, #0]
      i++;
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005ffa:	8bfb      	ldrh	r3, [r7, #30]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006000:	8bfb      	ldrh	r3, [r7, #30]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1ea      	bne.n	8005fdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006008:	4618      	mov	r0, r3
 800600a:	372c      	adds	r7, #44	; 0x2c
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	785b      	ldrb	r3, [r3, #1]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d12c      	bne.n	800608a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	db12      	blt.n	8006068 <USB_EPSetStall+0x54>
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00f      	beq.n	8006068 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006066:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	0151      	lsls	r1, r2, #5
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	440a      	add	r2, r1
 800607e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	e02b      	b.n	80060e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	db12      	blt.n	80060c2 <USB_EPSetStall+0xae>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00f      	beq.n	80060c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	015a      	lsls	r2, r3, #5
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4413      	add	r3, r2
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	0151      	lsls	r1, r2, #5
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	440a      	add	r2, r1
 80060d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	785b      	ldrb	r3, [r3, #1]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d128      	bne.n	800615e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	0151      	lsls	r1, r2, #5
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	440a      	add	r2, r1
 8006122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006126:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800612a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	791b      	ldrb	r3, [r3, #4]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d003      	beq.n	800613c <USB_EPClearStall+0x4c>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	791b      	ldrb	r3, [r3, #4]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d138      	bne.n	80061ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	e027      	b.n	80061ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006178:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800617c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	791b      	ldrb	r3, [r3, #4]
 8006182:	2b03      	cmp	r3, #3
 8006184:	d003      	beq.n	800618e <USB_EPClearStall+0x9e>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	791b      	ldrb	r3, [r3, #4]
 800618a:	2b02      	cmp	r3, #2
 800618c:	d10f      	bne.n	80061ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	0151      	lsls	r1, r2, #5
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	440a      	add	r2, r1
 80061a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80061de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80061f0:	68f9      	ldr	r1, [r7, #12]
 80061f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061f6:	4313      	orrs	r3, r2
 80061f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006222:	f023 0303 	bic.w	r3, r3, #3
 8006226:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006236:	f023 0302 	bic.w	r3, r3, #2
 800623a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3714      	adds	r7, #20
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006264:	f023 0303 	bic.w	r3, r3, #3
 8006268:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006278:	f043 0302 	orr.w	r3, r3, #2
 800627c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4013      	ands	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062a4:	68fb      	ldr	r3, [r7, #12]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062b2:	b480      	push	{r7}
 80062b4:	b085      	sub	sp, #20
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ce:	69db      	ldr	r3, [r3, #28]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	4013      	ands	r3, r2
 80062d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	0c1b      	lsrs	r3, r3, #16
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4013      	ands	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	b29b      	uxth	r3, r3
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800631a:	b480      	push	{r7}
 800631c:	b085      	sub	sp, #20
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	460b      	mov	r3, r1
 8006324:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800632a:	78fb      	ldrb	r3, [r7, #3]
 800632c:	015a      	lsls	r2, r3, #5
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4413      	add	r3, r2
 8006332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	4013      	ands	r3, r2
 8006346:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006348:	68bb      	ldr	r3, [r7, #8]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr

08006356 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006356:	b480      	push	{r7}
 8006358:	b087      	sub	sp, #28
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	460b      	mov	r3, r1
 8006360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006378:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800637a:	78fb      	ldrb	r3, [r7, #3]
 800637c:	f003 030f 	and.w	r3, r3, #15
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	fa22 f303 	lsr.w	r3, r2, r3
 8006386:	01db      	lsls	r3, r3, #7
 8006388:	b2db      	uxtb	r3, r3
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	4313      	orrs	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006390:	78fb      	ldrb	r3, [r7, #3]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4013      	ands	r3, r2
 80063a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063a4:	68bb      	ldr	r3, [r7, #8]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063b2:	b480      	push	{r7}
 80063b4:	b083      	sub	sp, #12
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0301 	and.w	r3, r3, #1
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063ec:	f023 0307 	bic.w	r3, r3, #7
 80063f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006404:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	460b      	mov	r3, r1
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	333c      	adds	r3, #60	; 0x3c
 800642a:	3304      	adds	r3, #4
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	4a26      	ldr	r2, [pc, #152]	; (80064cc <USB_EP0_OutStart+0xb8>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d90a      	bls.n	800644e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006448:	d101      	bne.n	800644e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	e037      	b.n	80064be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006454:	461a      	mov	r2, r3
 8006456:	2300      	movs	r3, #0
 8006458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800646c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800647c:	f043 0318 	orr.w	r3, r3, #24
 8006480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006490:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006494:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006496:	7afb      	ldrb	r3, [r7, #11]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d10f      	bne.n	80064bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a2:	461a      	mov	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	4f54300a 	.word	0x4f54300a

080064d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3301      	adds	r3, #1
 80064e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4a13      	ldr	r2, [pc, #76]	; (8006534 <USB_CoreReset+0x64>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d901      	bls.n	80064ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e01b      	b.n	8006526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	daf2      	bge.n	80064dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f043 0201 	orr.w	r2, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3301      	adds	r3, #1
 800650a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4a09      	ldr	r2, [pc, #36]	; (8006534 <USB_CoreReset+0x64>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d901      	bls.n	8006518 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e006      	b.n	8006526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b01      	cmp	r3, #1
 8006522:	d0f0      	beq.n	8006506 <USB_CoreReset+0x36>

  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	00030d40 	.word	0x00030d40

08006538 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006544:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006548:	f002 fcb0 	bl	8008eac <USBD_static_malloc>
 800654c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d109      	bne.n	8006568 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	32b0      	adds	r2, #176	; 0xb0
 800655e:	2100      	movs	r1, #0
 8006560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006564:	2302      	movs	r3, #2
 8006566:	e0d4      	b.n	8006712 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006568:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800656c:	2100      	movs	r1, #0
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f002 fd12 	bl	8008f98 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	32b0      	adds	r2, #176	; 0xb0
 800657e:	68f9      	ldr	r1, [r7, #12]
 8006580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	32b0      	adds	r2, #176	; 0xb0
 800658e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	7c1b      	ldrb	r3, [r3, #16]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d138      	bne.n	8006612 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80065a0:	4b5e      	ldr	r3, [pc, #376]	; (800671c <USBD_CDC_Init+0x1e4>)
 80065a2:	7819      	ldrb	r1, [r3, #0]
 80065a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a8:	2202      	movs	r2, #2
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f002 fb5b 	bl	8008c66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80065b0:	4b5a      	ldr	r3, [pc, #360]	; (800671c <USBD_CDC_Init+0x1e4>)
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	f003 020f 	and.w	r2, r3, #15
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	3324      	adds	r3, #36	; 0x24
 80065c6:	2201      	movs	r2, #1
 80065c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065ca:	4b55      	ldr	r3, [pc, #340]	; (8006720 <USBD_CDC_Init+0x1e8>)
 80065cc:	7819      	ldrb	r1, [r3, #0]
 80065ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065d2:	2202      	movs	r2, #2
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f002 fb46 	bl	8008c66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065da:	4b51      	ldr	r3, [pc, #324]	; (8006720 <USBD_CDC_Init+0x1e8>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	f003 020f 	and.w	r2, r3, #15
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	440b      	add	r3, r1
 80065ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065f2:	2201      	movs	r2, #1
 80065f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80065f6:	4b4b      	ldr	r3, [pc, #300]	; (8006724 <USBD_CDC_Init+0x1ec>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	f003 020f 	and.w	r2, r3, #15
 80065fe:	6879      	ldr	r1, [r7, #4]
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	3326      	adds	r3, #38	; 0x26
 800660c:	2210      	movs	r2, #16
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	e035      	b.n	800667e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006612:	4b42      	ldr	r3, [pc, #264]	; (800671c <USBD_CDC_Init+0x1e4>)
 8006614:	7819      	ldrb	r1, [r3, #0]
 8006616:	2340      	movs	r3, #64	; 0x40
 8006618:	2202      	movs	r2, #2
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f002 fb23 	bl	8008c66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006620:	4b3e      	ldr	r3, [pc, #248]	; (800671c <USBD_CDC_Init+0x1e4>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	f003 020f 	and.w	r2, r3, #15
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	440b      	add	r3, r1
 8006634:	3324      	adds	r3, #36	; 0x24
 8006636:	2201      	movs	r2, #1
 8006638:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800663a:	4b39      	ldr	r3, [pc, #228]	; (8006720 <USBD_CDC_Init+0x1e8>)
 800663c:	7819      	ldrb	r1, [r3, #0]
 800663e:	2340      	movs	r3, #64	; 0x40
 8006640:	2202      	movs	r2, #2
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f002 fb0f 	bl	8008c66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006648:	4b35      	ldr	r3, [pc, #212]	; (8006720 <USBD_CDC_Init+0x1e8>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f003 020f 	and.w	r2, r3, #15
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006660:	2201      	movs	r2, #1
 8006662:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006664:	4b2f      	ldr	r3, [pc, #188]	; (8006724 <USBD_CDC_Init+0x1ec>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f003 020f 	and.w	r2, r3, #15
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	3326      	adds	r3, #38	; 0x26
 800667a:	2210      	movs	r2, #16
 800667c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800667e:	4b29      	ldr	r3, [pc, #164]	; (8006724 <USBD_CDC_Init+0x1ec>)
 8006680:	7819      	ldrb	r1, [r3, #0]
 8006682:	2308      	movs	r3, #8
 8006684:	2203      	movs	r2, #3
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f002 faed 	bl	8008c66 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800668c:	4b25      	ldr	r3, [pc, #148]	; (8006724 <USBD_CDC_Init+0x1ec>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f003 020f 	and.w	r2, r3, #15
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	440b      	add	r3, r1
 80066a0:	3324      	adds	r3, #36	; 0x24
 80066a2:	2201      	movs	r2, #1
 80066a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	33b0      	adds	r3, #176	; 0xb0
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80066dc:	2302      	movs	r3, #2
 80066de:	e018      	b.n	8006712 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	7c1b      	ldrb	r3, [r3, #16]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066e8:	4b0d      	ldr	r3, [pc, #52]	; (8006720 <USBD_CDC_Init+0x1e8>)
 80066ea:	7819      	ldrb	r1, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f002 fba4 	bl	8008e44 <USBD_LL_PrepareReceive>
 80066fc:	e008      	b.n	8006710 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066fe:	4b08      	ldr	r3, [pc, #32]	; (8006720 <USBD_CDC_Init+0x1e8>)
 8006700:	7819      	ldrb	r1, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006708:	2340      	movs	r3, #64	; 0x40
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f002 fb9a 	bl	8008e44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20000093 	.word	0x20000093
 8006720:	20000094 	.word	0x20000094
 8006724:	20000095 	.word	0x20000095

08006728 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b082      	sub	sp, #8
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	460b      	mov	r3, r1
 8006732:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006734:	4b3a      	ldr	r3, [pc, #232]	; (8006820 <USBD_CDC_DeInit+0xf8>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	4619      	mov	r1, r3
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f002 fab9 	bl	8008cb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006740:	4b37      	ldr	r3, [pc, #220]	; (8006820 <USBD_CDC_DeInit+0xf8>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	f003 020f 	and.w	r2, r3, #15
 8006748:	6879      	ldr	r1, [r7, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	3324      	adds	r3, #36	; 0x24
 8006756:	2200      	movs	r2, #0
 8006758:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800675a:	4b32      	ldr	r3, [pc, #200]	; (8006824 <USBD_CDC_DeInit+0xfc>)
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f002 faa6 	bl	8008cb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006766:	4b2f      	ldr	r3, [pc, #188]	; (8006824 <USBD_CDC_DeInit+0xfc>)
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	f003 020f 	and.w	r2, r3, #15
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800677e:	2200      	movs	r2, #0
 8006780:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006782:	4b29      	ldr	r3, [pc, #164]	; (8006828 <USBD_CDC_DeInit+0x100>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f002 fa92 	bl	8008cb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800678e:	4b26      	ldr	r3, [pc, #152]	; (8006828 <USBD_CDC_DeInit+0x100>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	f003 020f 	and.w	r2, r3, #15
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	4613      	mov	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	3324      	adds	r3, #36	; 0x24
 80067a4:	2200      	movs	r2, #0
 80067a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80067a8:	4b1f      	ldr	r3, [pc, #124]	; (8006828 <USBD_CDC_DeInit+0x100>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	f003 020f 	and.w	r2, r3, #15
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	3326      	adds	r3, #38	; 0x26
 80067be:	2200      	movs	r2, #0
 80067c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	32b0      	adds	r2, #176	; 0xb0
 80067cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01f      	beq.n	8006814 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	33b0      	adds	r3, #176	; 0xb0
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	32b0      	adds	r2, #176	; 0xb0
 80067f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f002 fb66 	bl	8008ec8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	32b0      	adds	r2, #176	; 0xb0
 8006806:	2100      	movs	r1, #0
 8006808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	20000093 	.word	0x20000093
 8006824:	20000094 	.word	0x20000094
 8006828:	20000095 	.word	0x20000095

0800682c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	32b0      	adds	r2, #176	; 0xb0
 8006840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006844:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006846:	2300      	movs	r3, #0
 8006848:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800684e:	2300      	movs	r3, #0
 8006850:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006858:	2303      	movs	r3, #3
 800685a:	e0bf      	b.n	80069dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006864:	2b00      	cmp	r3, #0
 8006866:	d050      	beq.n	800690a <USBD_CDC_Setup+0xde>
 8006868:	2b20      	cmp	r3, #32
 800686a:	f040 80af 	bne.w	80069cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	88db      	ldrh	r3, [r3, #6]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d03a      	beq.n	80068ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b25b      	sxtb	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	da1b      	bge.n	80068b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006886:	687a      	ldr	r2, [r7, #4]
 8006888:	33b0      	adds	r3, #176	; 0xb0
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	683a      	ldr	r2, [r7, #0]
 8006894:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006896:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	88d2      	ldrh	r2, [r2, #6]
 800689c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	88db      	ldrh	r3, [r3, #6]
 80068a2:	2b07      	cmp	r3, #7
 80068a4:	bf28      	it	cs
 80068a6:	2307      	movcs	r3, #7
 80068a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	89fa      	ldrh	r2, [r7, #14]
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 fda5 	bl	8008400 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80068b6:	e090      	b.n	80069da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	785a      	ldrb	r2, [r3, #1]
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	88db      	ldrh	r3, [r3, #6]
 80068c6:	2b3f      	cmp	r3, #63	; 0x3f
 80068c8:	d803      	bhi.n	80068d2 <USBD_CDC_Setup+0xa6>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	88db      	ldrh	r3, [r3, #6]
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	e000      	b.n	80068d4 <USBD_CDC_Setup+0xa8>
 80068d2:	2240      	movs	r2, #64	; 0x40
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80068da:	6939      	ldr	r1, [r7, #16]
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80068e2:	461a      	mov	r2, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 fdb7 	bl	8008458 <USBD_CtlPrepareRx>
      break;
 80068ea:	e076      	b.n	80069da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	33b0      	adds	r3, #176	; 0xb0
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	4413      	add	r3, r2
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	7850      	ldrb	r0, [r2, #1]
 8006902:	2200      	movs	r2, #0
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	4798      	blx	r3
      break;
 8006908:	e067      	b.n	80069da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	785b      	ldrb	r3, [r3, #1]
 800690e:	2b0b      	cmp	r3, #11
 8006910:	d851      	bhi.n	80069b6 <USBD_CDC_Setup+0x18a>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <USBD_CDC_Setup+0xec>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	08006949 	.word	0x08006949
 800691c:	080069c5 	.word	0x080069c5
 8006920:	080069b7 	.word	0x080069b7
 8006924:	080069b7 	.word	0x080069b7
 8006928:	080069b7 	.word	0x080069b7
 800692c:	080069b7 	.word	0x080069b7
 8006930:	080069b7 	.word	0x080069b7
 8006934:	080069b7 	.word	0x080069b7
 8006938:	080069b7 	.word	0x080069b7
 800693c:	080069b7 	.word	0x080069b7
 8006940:	08006973 	.word	0x08006973
 8006944:	0800699d 	.word	0x0800699d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b03      	cmp	r3, #3
 8006952:	d107      	bne.n	8006964 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006954:	f107 030a 	add.w	r3, r7, #10
 8006958:	2202      	movs	r2, #2
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 fd4f 	bl	8008400 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006962:	e032      	b.n	80069ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f001 fcd9 	bl	800831e <USBD_CtlError>
            ret = USBD_FAIL;
 800696c:	2303      	movs	r3, #3
 800696e:	75fb      	strb	r3, [r7, #23]
          break;
 8006970:	e02b      	b.n	80069ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b03      	cmp	r3, #3
 800697c:	d107      	bne.n	800698e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800697e:	f107 030d 	add.w	r3, r7, #13
 8006982:	2201      	movs	r2, #1
 8006984:	4619      	mov	r1, r3
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f001 fd3a 	bl	8008400 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800698c:	e01d      	b.n	80069ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 fcc4 	bl	800831e <USBD_CtlError>
            ret = USBD_FAIL;
 8006996:	2303      	movs	r3, #3
 8006998:	75fb      	strb	r3, [r7, #23]
          break;
 800699a:	e016      	b.n	80069ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b03      	cmp	r3, #3
 80069a6:	d00f      	beq.n	80069c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f001 fcb7 	bl	800831e <USBD_CtlError>
            ret = USBD_FAIL;
 80069b0:	2303      	movs	r3, #3
 80069b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80069b4:	e008      	b.n	80069c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 fcb0 	bl	800831e <USBD_CtlError>
          ret = USBD_FAIL;
 80069be:	2303      	movs	r3, #3
 80069c0:	75fb      	strb	r3, [r7, #23]
          break;
 80069c2:	e002      	b.n	80069ca <USBD_CDC_Setup+0x19e>
          break;
 80069c4:	bf00      	nop
 80069c6:	e008      	b.n	80069da <USBD_CDC_Setup+0x1ae>
          break;
 80069c8:	bf00      	nop
      }
      break;
 80069ca:	e006      	b.n	80069da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f001 fca5 	bl	800831e <USBD_CtlError>
      ret = USBD_FAIL;
 80069d4:	2303      	movs	r3, #3
 80069d6:	75fb      	strb	r3, [r7, #23]
      break;
 80069d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80069f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	32b0      	adds	r2, #176	; 0xb0
 8006a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e065      	b.n	8006ada <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	32b0      	adds	r2, #176	; 0xb0
 8006a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	f003 020f 	and.w	r2, r3, #15
 8006a24:	6879      	ldr	r1, [r7, #4]
 8006a26:	4613      	mov	r3, r2
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	440b      	add	r3, r1
 8006a30:	3318      	adds	r3, #24
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d02f      	beq.n	8006a98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	f003 020f 	and.w	r2, r3, #15
 8006a3e:	6879      	ldr	r1, [r7, #4]
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	440b      	add	r3, r1
 8006a4a:	3318      	adds	r3, #24
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	78fb      	ldrb	r3, [r7, #3]
 8006a50:	f003 010f 	and.w	r1, r3, #15
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	460b      	mov	r3, r1
 8006a58:	00db      	lsls	r3, r3, #3
 8006a5a:	440b      	add	r3, r1
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4403      	add	r3, r0
 8006a60:	3348      	adds	r3, #72	; 0x48
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	fbb2 f1f3 	udiv	r1, r2, r3
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d112      	bne.n	8006a98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	f003 020f 	and.w	r2, r3, #15
 8006a78:	6879      	ldr	r1, [r7, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	440b      	add	r3, r1
 8006a84:	3318      	adds	r3, #24
 8006a86:	2200      	movs	r2, #0
 8006a88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006a8a:	78f9      	ldrb	r1, [r7, #3]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	2200      	movs	r2, #0
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f002 f9b6 	bl	8008e02 <USBD_LL_Transmit>
 8006a96:	e01f      	b.n	8006ad8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	33b0      	adds	r3, #176	; 0xb0
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d010      	beq.n	8006ad8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	33b0      	adds	r3, #176	; 0xb0
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4413      	add	r3, r2
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006ad4:	78fa      	ldrb	r2, [r7, #3]
 8006ad6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	32b0      	adds	r2, #176	; 0xb0
 8006af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	32b0      	adds	r2, #176	; 0xb0
 8006b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e01a      	b.n	8006b4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f002 f9b4 	bl	8008e86 <USBD_LL_GetRxDataSize>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	33b0      	adds	r3, #176	; 0xb0
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006b44:	4611      	mov	r1, r2
 8006b46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	32b0      	adds	r2, #176	; 0xb0
 8006b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e025      	b.n	8006bc0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	33b0      	adds	r3, #176	; 0xb0
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01a      	beq.n	8006bbe <USBD_CDC_EP0_RxReady+0x6c>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006b8e:	2bff      	cmp	r3, #255	; 0xff
 8006b90:	d015      	beq.n	8006bbe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	33b0      	adds	r3, #176	; 0xb0
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006baa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006bb2:	b292      	uxth	r2, r2
 8006bb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	22ff      	movs	r2, #255	; 0xff
 8006bba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bd0:	2182      	movs	r1, #130	; 0x82
 8006bd2:	4818      	ldr	r0, [pc, #96]	; (8006c34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bd4:	f000 fd6b 	bl	80076ae <USBD_GetEpDesc>
 8006bd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bda:	2101      	movs	r1, #1
 8006bdc:	4815      	ldr	r0, [pc, #84]	; (8006c34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006bde:	f000 fd66 	bl	80076ae <USBD_GetEpDesc>
 8006be2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006be4:	2181      	movs	r1, #129	; 0x81
 8006be6:	4813      	ldr	r0, [pc, #76]	; (8006c34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006be8:	f000 fd61 	bl	80076ae <USBD_GetEpDesc>
 8006bec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2210      	movs	r2, #16
 8006bf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d006      	beq.n	8006c0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c08:	711a      	strb	r2, [r3, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d006      	beq.n	8006c22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c1c:	711a      	strb	r2, [r3, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2243      	movs	r2, #67	; 0x43
 8006c26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c28:	4b02      	ldr	r3, [pc, #8]	; (8006c34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000050 	.word	0x20000050

08006c38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c40:	2182      	movs	r1, #130	; 0x82
 8006c42:	4818      	ldr	r0, [pc, #96]	; (8006ca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c44:	f000 fd33 	bl	80076ae <USBD_GetEpDesc>
 8006c48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	4815      	ldr	r0, [pc, #84]	; (8006ca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c4e:	f000 fd2e 	bl	80076ae <USBD_GetEpDesc>
 8006c52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c54:	2181      	movs	r1, #129	; 0x81
 8006c56:	4813      	ldr	r0, [pc, #76]	; (8006ca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006c58:	f000 fd29 	bl	80076ae <USBD_GetEpDesc>
 8006c5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	2210      	movs	r2, #16
 8006c68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d006      	beq.n	8006c7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2200      	movs	r2, #0
 8006c74:	711a      	strb	r2, [r3, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f042 0202 	orr.w	r2, r2, #2
 8006c7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d006      	beq.n	8006c92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	711a      	strb	r2, [r3, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f042 0202 	orr.w	r2, r2, #2
 8006c90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2243      	movs	r2, #67	; 0x43
 8006c96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c98:	4b02      	ldr	r3, [pc, #8]	; (8006ca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20000050 	.word	0x20000050

08006ca8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006cb0:	2182      	movs	r1, #130	; 0x82
 8006cb2:	4818      	ldr	r0, [pc, #96]	; (8006d14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cb4:	f000 fcfb 	bl	80076ae <USBD_GetEpDesc>
 8006cb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006cba:	2101      	movs	r1, #1
 8006cbc:	4815      	ldr	r0, [pc, #84]	; (8006d14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cbe:	f000 fcf6 	bl	80076ae <USBD_GetEpDesc>
 8006cc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006cc4:	2181      	movs	r1, #129	; 0x81
 8006cc6:	4813      	ldr	r0, [pc, #76]	; (8006d14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006cc8:	f000 fcf1 	bl	80076ae <USBD_GetEpDesc>
 8006ccc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2210      	movs	r2, #16
 8006cd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ce8:	711a      	strb	r2, [r3, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d006      	beq.n	8006d02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cfc:	711a      	strb	r2, [r3, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2243      	movs	r2, #67	; 0x43
 8006d06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006d08:	4b02      	ldr	r3, [pc, #8]	; (8006d14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000050 	.word	0x20000050

08006d18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	220a      	movs	r2, #10
 8006d24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d26:	4b03      	ldr	r3, [pc, #12]	; (8006d34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	2000000c 	.word	0x2000000c

08006d38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e009      	b.n	8006d60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	33b0      	adds	r3, #176	; 0xb0
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4413      	add	r3, r2
 8006d5a:	683a      	ldr	r2, [r7, #0]
 8006d5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	32b0      	adds	r2, #176	; 0xb0
 8006d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d86:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e008      	b.n	8006da4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	32b0      	adds	r2, #176	; 0xb0
 8006dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e004      	b.n	8006dde <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
	...

08006dec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32b0      	adds	r2, #176	; 0xb0
 8006dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	32b0      	adds	r2, #176	; 0xb0
 8006e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e025      	b.n	8006e6a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d11f      	bne.n	8006e68 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006e30:	4b10      	ldr	r3, [pc, #64]	; (8006e74 <USBD_CDC_TransmitPacket+0x88>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	f003 020f 	and.w	r2, r3, #15
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4613      	mov	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4403      	add	r3, r0
 8006e4a:	3318      	adds	r3, #24
 8006e4c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006e4e:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <USBD_CDC_TransmitPacket+0x88>)
 8006e50:	7819      	ldrb	r1, [r3, #0]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 ffcf 	bl	8008e02 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	20000093 	.word	0x20000093

08006e78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	32b0      	adds	r2, #176	; 0xb0
 8006e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	32b0      	adds	r2, #176	; 0xb0
 8006e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e018      	b.n	8006ed8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7c1b      	ldrb	r3, [r3, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10a      	bne.n	8006ec4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eae:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <USBD_CDC_ReceivePacket+0x68>)
 8006eb0:	7819      	ldrb	r1, [r3, #0]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 ffc1 	bl	8008e44 <USBD_LL_PrepareReceive>
 8006ec2:	e008      	b.n	8006ed6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ec4:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <USBD_CDC_ReceivePacket+0x68>)
 8006ec6:	7819      	ldrb	r1, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ece:	2340      	movs	r3, #64	; 0x40
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 ffb7 	bl	8008e44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000094 	.word	0x20000094

08006ee4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	4613      	mov	r3, r2
 8006ef0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8006ef8:	4817      	ldr	r0, [pc, #92]	; (8006f58 <USBD_Init+0x74>)
 8006efa:	f002 f935 	bl	8009168 <iprintf>
 8006efe:	4817      	ldr	r0, [pc, #92]	; (8006f5c <USBD_Init+0x78>)
 8006f00:	f002 f932 	bl	8009168 <iprintf>
 8006f04:	200a      	movs	r0, #10
 8006f06:	f002 f947 	bl	8009198 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e01f      	b.n	8006f4e <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	79fa      	ldrb	r2, [r7, #7]
 8006f40:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f001 fe28 	bl	8008b98 <USBD_LL_Init>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	0800a370 	.word	0x0800a370
 8006f5c:	0800a378 	.word	0x0800a378

08006f60 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10a      	bne.n	8006f8a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8006f74:	481a      	ldr	r0, [pc, #104]	; (8006fe0 <USBD_RegisterClass+0x80>)
 8006f76:	f002 f8f7 	bl	8009168 <iprintf>
 8006f7a:	481a      	ldr	r0, [pc, #104]	; (8006fe4 <USBD_RegisterClass+0x84>)
 8006f7c:	f002 f8f4 	bl	8009168 <iprintf>
 8006f80:	200a      	movs	r0, #10
 8006f82:	f002 f909 	bl	8009198 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e025      	b.n	8006fd6 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	32ae      	adds	r2, #174	; 0xae
 8006f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00f      	beq.n	8006fc6 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	32ae      	adds	r2, #174	; 0xae
 8006fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb6:	f107 020e 	add.w	r2, r7, #14
 8006fba:	4610      	mov	r0, r2
 8006fbc:	4798      	blx	r3
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	0800a370 	.word	0x0800a370
 8006fe4:	0800a390 	.word	0x0800a390

08006fe8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fe1d 	bl	8008c30 <USBD_LL_Start>
 8006ff6:	4603      	mov	r3, r0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d009      	beq.n	8007044 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	78fa      	ldrb	r2, [r7, #3]
 800703a:	4611      	mov	r1, r2
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	4611      	mov	r1, r2
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	4618      	mov	r0, r3
 8007096:	f001 f908 	bl	80082aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070a8:	461a      	mov	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d01a      	beq.n	80070f4 <USBD_LL_SetupStage+0x72>
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d822      	bhi.n	8007108 <USBD_LL_SetupStage+0x86>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <USBD_LL_SetupStage+0x4a>
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d00a      	beq.n	80070e0 <USBD_LL_SetupStage+0x5e>
 80070ca:	e01d      	b.n	8007108 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fb5f 	bl	8007798 <USBD_StdDevReq>
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]
      break;
 80070de:	e020      	b.n	8007122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fbc7 	bl	800787c <USBD_StdItfReq>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73fb      	strb	r3, [r7, #15]
      break;
 80070f2:	e016      	b.n	8007122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fc29 	bl	8007954 <USBD_StdEPReq>
 8007102:	4603      	mov	r3, r0
 8007104:	73fb      	strb	r3, [r7, #15]
      break;
 8007106:	e00c      	b.n	8007122 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800710e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007112:	b2db      	uxtb	r3, r3
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fdea 	bl	8008cf0 <USBD_LL_StallEP>
 800711c:	4603      	mov	r3, r0
 800711e:	73fb      	strb	r3, [r7, #15]
      break;
 8007120:	bf00      	nop
  }

  return ret;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	460b      	mov	r3, r1
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800713e:	7afb      	ldrb	r3, [r7, #11]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d16e      	bne.n	8007222 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800714a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007152:	2b03      	cmp	r3, #3
 8007154:	f040 8098 	bne.w	8007288 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	429a      	cmp	r2, r3
 8007162:	d913      	bls.n	800718c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	1ad2      	subs	r2, r2, r3
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	4293      	cmp	r3, r2
 800717c:	bf28      	it	cs
 800717e:	4613      	movcs	r3, r2
 8007180:	461a      	mov	r2, r3
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f001 f984 	bl	8008492 <USBD_CtlContinueRx>
 800718a:	e07d      	b.n	8007288 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2b02      	cmp	r3, #2
 8007198:	d014      	beq.n	80071c4 <USBD_LL_DataOutStage+0x98>
 800719a:	2b02      	cmp	r3, #2
 800719c:	d81d      	bhi.n	80071da <USBD_LL_DataOutStage+0xae>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <USBD_LL_DataOutStage+0x7c>
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d003      	beq.n	80071ae <USBD_LL_DataOutStage+0x82>
 80071a6:	e018      	b.n	80071da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75bb      	strb	r3, [r7, #22]
            break;
 80071ac:	e018      	b.n	80071e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	4619      	mov	r1, r3
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 fa5e 	bl	800767a <USBD_CoreFindIF>
 80071be:	4603      	mov	r3, r0
 80071c0:	75bb      	strb	r3, [r7, #22]
            break;
 80071c2:	e00d      	b.n	80071e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	4619      	mov	r1, r3
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fa60 	bl	8007694 <USBD_CoreFindEP>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75bb      	strb	r3, [r7, #22]
            break;
 80071d8:	e002      	b.n	80071e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	75bb      	strb	r3, [r7, #22]
            break;
 80071de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071e0:	7dbb      	ldrb	r3, [r7, #22]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d119      	bne.n	800721a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d113      	bne.n	800721a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071f2:	7dba      	ldrb	r2, [r7, #22]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	32ae      	adds	r2, #174	; 0xae
 80071f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00b      	beq.n	800721a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007202:	7dba      	ldrb	r2, [r7, #22]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800720a:	7dba      	ldrb	r2, [r7, #22]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	32ae      	adds	r2, #174	; 0xae
 8007210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f001 f94a 	bl	80084b4 <USBD_CtlSendStatus>
 8007220:	e032      	b.n	8007288 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007228:	b2db      	uxtb	r3, r3
 800722a:	4619      	mov	r1, r3
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fa31 	bl	8007694 <USBD_CoreFindEP>
 8007232:	4603      	mov	r3, r0
 8007234:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007236:	7dbb      	ldrb	r3, [r7, #22]
 8007238:	2bff      	cmp	r3, #255	; 0xff
 800723a:	d025      	beq.n	8007288 <USBD_LL_DataOutStage+0x15c>
 800723c:	7dbb      	ldrb	r3, [r7, #22]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d122      	bne.n	8007288 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d117      	bne.n	800727e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800724e:	7dba      	ldrb	r2, [r7, #22]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	32ae      	adds	r2, #174	; 0xae
 8007254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00f      	beq.n	800727e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800725e:	7dba      	ldrb	r2, [r7, #22]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007266:	7dba      	ldrb	r2, [r7, #22]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	32ae      	adds	r2, #174	; 0xae
 800726c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	7afa      	ldrb	r2, [r7, #11]
 8007274:	4611      	mov	r1, r2
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	4798      	blx	r3
 800727a:	4603      	mov	r3, r0
 800727c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	e000      	b.n	800728a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	460b      	mov	r3, r1
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d16f      	bne.n	8007386 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3314      	adds	r3, #20
 80072aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d15a      	bne.n	800736c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d914      	bls.n	80072ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	1ad2      	subs	r2, r2, r3
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f001 f8ac 	bl	8008436 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072de:	2300      	movs	r3, #0
 80072e0:	2200      	movs	r2, #0
 80072e2:	2100      	movs	r1, #0
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f001 fdad 	bl	8008e44 <USBD_LL_PrepareReceive>
 80072ea:	e03f      	b.n	800736c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d11c      	bne.n	8007332 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007300:	429a      	cmp	r2, r3
 8007302:	d316      	bcc.n	8007332 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800730e:	429a      	cmp	r2, r3
 8007310:	d20f      	bcs.n	8007332 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007312:	2200      	movs	r2, #0
 8007314:	2100      	movs	r1, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f001 f88d 	bl	8008436 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007324:	2300      	movs	r3, #0
 8007326:	2200      	movs	r2, #0
 8007328:	2100      	movs	r1, #0
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f001 fd8a 	bl	8008e44 <USBD_LL_PrepareReceive>
 8007330:	e01c      	b.n	800736c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d10f      	bne.n	800735e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800735e:	2180      	movs	r1, #128	; 0x80
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f001 fcc5 	bl	8008cf0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f001 f8b7 	bl	80084da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d03a      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff fe42 	bl	8007000 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007384:	e032      	b.n	80073ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800738c:	b2db      	uxtb	r3, r3
 800738e:	4619      	mov	r1, r3
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f97f 	bl	8007694 <USBD_CoreFindEP>
 8007396:	4603      	mov	r3, r0
 8007398:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	2bff      	cmp	r3, #255	; 0xff
 800739e:	d025      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d122      	bne.n	80073ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d11c      	bne.n	80073ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073b2:	7dfa      	ldrb	r2, [r7, #23]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	32ae      	adds	r2, #174	; 0xae
 80073b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d014      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073c2:	7dfa      	ldrb	r2, [r7, #23]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073ca:	7dfa      	ldrb	r2, [r7, #23]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	32ae      	adds	r2, #174	; 0xae
 80073d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	7afa      	ldrb	r2, [r7, #11]
 80073d8:	4611      	mov	r1, r2
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	4798      	blx	r3
 80073de:	4603      	mov	r3, r0
 80073e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073e2:	7dbb      	ldrb	r3, [r7, #22]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073e8:	7dbb      	ldrb	r3, [r7, #22]
 80073ea:	e000      	b.n	80073ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d014      	beq.n	800745c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00e      	beq.n	800745c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6852      	ldr	r2, [r2, #4]
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	4611      	mov	r1, r2
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	4798      	blx	r3
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007458:	2303      	movs	r3, #3
 800745a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800745c:	2340      	movs	r3, #64	; 0x40
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 fbff 	bl	8008c66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2240      	movs	r2, #64	; 0x40
 8007474:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007478:	2340      	movs	r3, #64	; 0x40
 800747a:	2200      	movs	r2, #0
 800747c:	2180      	movs	r1, #128	; 0x80
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fbf1 	bl	8008c66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2240      	movs	r2, #64	; 0x40
 800748e:	621a      	str	r2, [r3, #32]

  return ret;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2204      	movs	r2, #4
 80074d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074d8:	2300      	movs	r3, #0
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d106      	bne.n	8007508 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007500:	b2da      	uxtb	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b03      	cmp	r3, #3
 8007528:	d110      	bne.n	800754c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00b      	beq.n	800754c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753a:	69db      	ldr	r3, [r3, #28]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b082      	sub	sp, #8
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	32ae      	adds	r2, #174	; 0xae
 800756c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d101      	bne.n	8007578 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007574:	2303      	movs	r3, #3
 8007576:	e01c      	b.n	80075b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800757e:	b2db      	uxtb	r3, r3
 8007580:	2b03      	cmp	r3, #3
 8007582:	d115      	bne.n	80075b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32ae      	adds	r2, #174	; 0xae
 800758e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00b      	beq.n	80075b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	32ae      	adds	r2, #174	; 0xae
 80075a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	4611      	mov	r1, r2
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b082      	sub	sp, #8
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
 80075c2:	460b      	mov	r3, r1
 80075c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	32ae      	adds	r2, #174	; 0xae
 80075d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d101      	bne.n	80075dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075d8:	2303      	movs	r3, #3
 80075da:	e01c      	b.n	8007616 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d115      	bne.n	8007614 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	32ae      	adds	r2, #174	; 0xae
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	32ae      	adds	r2, #174	; 0xae
 8007606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	78fa      	ldrb	r2, [r7, #3]
 800760e:	4611      	mov	r1, r2
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00e      	beq.n	8007670 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6852      	ldr	r2, [r2, #4]
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	4611      	mov	r1, r2
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	4798      	blx	r3
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800766c:	2303      	movs	r3, #3
 800766e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007670:	7bfb      	ldrb	r3, [r7, #15]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	460b      	mov	r3, r1
 8007684:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007686:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	460b      	mov	r3, r1
 800769e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b086      	sub	sp, #24
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	885b      	ldrh	r3, [r3, #2]
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d920      	bls.n	8007718 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	b29b      	uxth	r3, r3
 80076dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076de:	e013      	b.n	8007708 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076e0:	f107 030a 	add.w	r3, r7, #10
 80076e4:	4619      	mov	r1, r3
 80076e6:	6978      	ldr	r0, [r7, #20]
 80076e8:	f000 f81b 	bl	8007722 <USBD_GetNextDesc>
 80076ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	785b      	ldrb	r3, [r3, #1]
 80076f2:	2b05      	cmp	r3, #5
 80076f4:	d108      	bne.n	8007708 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	789b      	ldrb	r3, [r3, #2]
 80076fe:	78fa      	ldrb	r2, [r7, #3]
 8007700:	429a      	cmp	r2, r3
 8007702:	d008      	beq.n	8007716 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007704:	2300      	movs	r3, #0
 8007706:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	885b      	ldrh	r3, [r3, #2]
 800770c:	b29a      	uxth	r2, r3
 800770e:	897b      	ldrh	r3, [r7, #10]
 8007710:	429a      	cmp	r2, r3
 8007712:	d8e5      	bhi.n	80076e0 <USBD_GetEpDesc+0x32>
 8007714:	e000      	b.n	8007718 <USBD_GetEpDesc+0x6a>
          break;
 8007716:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007718:	693b      	ldr	r3, [r7, #16]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007722:	b480      	push	{r7}
 8007724:	b085      	sub	sp, #20
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
 800772a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	881a      	ldrh	r2, [r3, #0]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	4413      	add	r3, r2
 800773c:	b29a      	uxth	r2, r3
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	461a      	mov	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4413      	add	r3, r2
 800774c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800774e:	68fb      	ldr	r3, [r7, #12]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	3301      	adds	r3, #1
 8007772:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800777a:	8a3b      	ldrh	r3, [r7, #16]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	b21a      	sxth	r2, r3
 8007780:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007784:	4313      	orrs	r3, r2
 8007786:	b21b      	sxth	r3, r3
 8007788:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800778a:	89fb      	ldrh	r3, [r7, #14]
}
 800778c:	4618      	mov	r0, r3
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d005      	beq.n	80077be <USBD_StdDevReq+0x26>
 80077b2:	2b40      	cmp	r3, #64	; 0x40
 80077b4:	d857      	bhi.n	8007866 <USBD_StdDevReq+0xce>
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00f      	beq.n	80077da <USBD_StdDevReq+0x42>
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	d153      	bne.n	8007866 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	32ae      	adds	r2, #174	; 0xae
 80077c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	4798      	blx	r3
 80077d4:	4603      	mov	r3, r0
 80077d6:	73fb      	strb	r3, [r7, #15]
      break;
 80077d8:	e04a      	b.n	8007870 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	785b      	ldrb	r3, [r3, #1]
 80077de:	2b09      	cmp	r3, #9
 80077e0:	d83b      	bhi.n	800785a <USBD_StdDevReq+0xc2>
 80077e2:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <USBD_StdDevReq+0x50>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	0800783d 	.word	0x0800783d
 80077ec:	08007851 	.word	0x08007851
 80077f0:	0800785b 	.word	0x0800785b
 80077f4:	08007847 	.word	0x08007847
 80077f8:	0800785b 	.word	0x0800785b
 80077fc:	0800781b 	.word	0x0800781b
 8007800:	08007811 	.word	0x08007811
 8007804:	0800785b 	.word	0x0800785b
 8007808:	08007833 	.word	0x08007833
 800780c:	08007825 	.word	0x08007825
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa3c 	bl	8007c90 <USBD_GetDescriptor>
          break;
 8007818:	e024      	b.n	8007864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800781a:	6839      	ldr	r1, [r7, #0]
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fba1 	bl	8007f64 <USBD_SetAddress>
          break;
 8007822:	e01f      	b.n	8007864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fbe0 	bl	8007fec <USBD_SetConfig>
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]
          break;
 8007830:	e018      	b.n	8007864 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fc83 	bl	8008140 <USBD_GetConfig>
          break;
 800783a:	e013      	b.n	8007864 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 fcb4 	bl	80081ac <USBD_GetStatus>
          break;
 8007844:	e00e      	b.n	8007864 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fce3 	bl	8008214 <USBD_SetFeature>
          break;
 800784e:	e009      	b.n	8007864 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fd07 	bl	8008266 <USBD_ClrFeature>
          break;
 8007858:	e004      	b.n	8007864 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fd5e 	bl	800831e <USBD_CtlError>
          break;
 8007862:	bf00      	nop
      }
      break;
 8007864:	e004      	b.n	8007870 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fd58 	bl	800831e <USBD_CtlError>
      break;
 800786e:	bf00      	nop
  }

  return ret;
 8007870:	7bfb      	ldrb	r3, [r7, #15]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop

0800787c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	d005      	beq.n	80078a2 <USBD_StdItfReq+0x26>
 8007896:	2b40      	cmp	r3, #64	; 0x40
 8007898:	d852      	bhi.n	8007940 <USBD_StdItfReq+0xc4>
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <USBD_StdItfReq+0x26>
 800789e:	2b20      	cmp	r3, #32
 80078a0:	d14e      	bne.n	8007940 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d840      	bhi.n	8007932 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	889b      	ldrh	r3, [r3, #4]
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d836      	bhi.n	8007928 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	889b      	ldrh	r3, [r3, #4]
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff fed9 	bl	800767a <USBD_CoreFindIF>
 80078c8:	4603      	mov	r3, r0
 80078ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2bff      	cmp	r3, #255	; 0xff
 80078d0:	d01d      	beq.n	800790e <USBD_StdItfReq+0x92>
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d11a      	bne.n	800790e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078d8:	7bba      	ldrb	r2, [r7, #14]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	32ae      	adds	r2, #174	; 0xae
 80078de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00f      	beq.n	8007908 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078e8:	7bba      	ldrb	r2, [r7, #14]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078f0:	7bba      	ldrb	r2, [r7, #14]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	32ae      	adds	r2, #174	; 0xae
 80078f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	6839      	ldr	r1, [r7, #0]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
 8007902:	4603      	mov	r3, r0
 8007904:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007906:	e004      	b.n	8007912 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007908:	2303      	movs	r3, #3
 800790a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800790c:	e001      	b.n	8007912 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800790e:	2303      	movs	r3, #3
 8007910:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	88db      	ldrh	r3, [r3, #6]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d110      	bne.n	800793c <USBD_StdItfReq+0xc0>
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10d      	bne.n	800793c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fdc7 	bl	80084b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007926:	e009      	b.n	800793c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fcf7 	bl	800831e <USBD_CtlError>
          break;
 8007930:	e004      	b.n	800793c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fcf2 	bl	800831e <USBD_CtlError>
          break;
 800793a:	e000      	b.n	800793e <USBD_StdItfReq+0xc2>
          break;
 800793c:	bf00      	nop
      }
      break;
 800793e:	e004      	b.n	800794a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fceb 	bl	800831e <USBD_CtlError>
      break;
 8007948:	bf00      	nop
  }

  return ret;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	889b      	ldrh	r3, [r3, #4]
 8007966:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007970:	2b40      	cmp	r3, #64	; 0x40
 8007972:	d007      	beq.n	8007984 <USBD_StdEPReq+0x30>
 8007974:	2b40      	cmp	r3, #64	; 0x40
 8007976:	f200 817f 	bhi.w	8007c78 <USBD_StdEPReq+0x324>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d02a      	beq.n	80079d4 <USBD_StdEPReq+0x80>
 800797e:	2b20      	cmp	r3, #32
 8007980:	f040 817a 	bne.w	8007c78 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	4619      	mov	r1, r3
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f7ff fe83 	bl	8007694 <USBD_CoreFindEP>
 800798e:	4603      	mov	r3, r0
 8007990:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007992:	7b7b      	ldrb	r3, [r7, #13]
 8007994:	2bff      	cmp	r3, #255	; 0xff
 8007996:	f000 8174 	beq.w	8007c82 <USBD_StdEPReq+0x32e>
 800799a:	7b7b      	ldrb	r3, [r7, #13]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f040 8170 	bne.w	8007c82 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079a2:	7b7a      	ldrb	r2, [r7, #13]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079aa:	7b7a      	ldrb	r2, [r7, #13]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	32ae      	adds	r2, #174	; 0xae
 80079b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 8163 	beq.w	8007c82 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079bc:	7b7a      	ldrb	r2, [r7, #13]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	32ae      	adds	r2, #174	; 0xae
 80079c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	4798      	blx	r3
 80079ce:	4603      	mov	r3, r0
 80079d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079d2:	e156      	b.n	8007c82 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	785b      	ldrb	r3, [r3, #1]
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d008      	beq.n	80079ee <USBD_StdEPReq+0x9a>
 80079dc:	2b03      	cmp	r3, #3
 80079de:	f300 8145 	bgt.w	8007c6c <USBD_StdEPReq+0x318>
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 809b 	beq.w	8007b1e <USBD_StdEPReq+0x1ca>
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d03c      	beq.n	8007a66 <USBD_StdEPReq+0x112>
 80079ec:	e13e      	b.n	8007c6c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d002      	beq.n	8007a00 <USBD_StdEPReq+0xac>
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d016      	beq.n	8007a2c <USBD_StdEPReq+0xd8>
 80079fe:	e02c      	b.n	8007a5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00d      	beq.n	8007a22 <USBD_StdEPReq+0xce>
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b80      	cmp	r3, #128	; 0x80
 8007a0a:	d00a      	beq.n	8007a22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 f96d 	bl	8008cf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a16:	2180      	movs	r1, #128	; 0x80
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 f969 	bl	8008cf0 <USBD_LL_StallEP>
 8007a1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a20:	e020      	b.n	8007a64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fc7a 	bl	800831e <USBD_CtlError>
              break;
 8007a2a:	e01b      	b.n	8007a64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	885b      	ldrh	r3, [r3, #2]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10e      	bne.n	8007a52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00b      	beq.n	8007a52 <USBD_StdEPReq+0xfe>
 8007a3a:	7bbb      	ldrb	r3, [r7, #14]
 8007a3c:	2b80      	cmp	r3, #128	; 0x80
 8007a3e:	d008      	beq.n	8007a52 <USBD_StdEPReq+0xfe>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	88db      	ldrh	r3, [r3, #6]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d104      	bne.n	8007a52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 f94f 	bl	8008cf0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 fd2e 	bl	80084b4 <USBD_CtlSendStatus>

              break;
 8007a58:	e004      	b.n	8007a64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fc5e 	bl	800831e <USBD_CtlError>
              break;
 8007a62:	bf00      	nop
          }
          break;
 8007a64:	e107      	b.n	8007c76 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	d002      	beq.n	8007a78 <USBD_StdEPReq+0x124>
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d016      	beq.n	8007aa4 <USBD_StdEPReq+0x150>
 8007a76:	e04b      	b.n	8007b10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00d      	beq.n	8007a9a <USBD_StdEPReq+0x146>
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b80      	cmp	r3, #128	; 0x80
 8007a82:	d00a      	beq.n	8007a9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 f931 	bl	8008cf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a8e:	2180      	movs	r1, #128	; 0x80
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f001 f92d 	bl	8008cf0 <USBD_LL_StallEP>
 8007a96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a98:	e040      	b.n	8007b1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fc3e 	bl	800831e <USBD_CtlError>
              break;
 8007aa2:	e03b      	b.n	8007b1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	885b      	ldrh	r3, [r3, #2]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d136      	bne.n	8007b1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d004      	beq.n	8007ac0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 f937 	bl	8008d2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 fcf7 	bl	80084b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ac6:	7bbb      	ldrb	r3, [r7, #14]
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff fde2 	bl	8007694 <USBD_CoreFindEP>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ad4:	7b7b      	ldrb	r3, [r7, #13]
 8007ad6:	2bff      	cmp	r3, #255	; 0xff
 8007ad8:	d01f      	beq.n	8007b1a <USBD_StdEPReq+0x1c6>
 8007ada:	7b7b      	ldrb	r3, [r7, #13]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d11c      	bne.n	8007b1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ae0:	7b7a      	ldrb	r2, [r7, #13]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007ae8:	7b7a      	ldrb	r2, [r7, #13]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	32ae      	adds	r2, #174	; 0xae
 8007aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d010      	beq.n	8007b1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007af8:	7b7a      	ldrb	r2, [r7, #13]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	32ae      	adds	r2, #174	; 0xae
 8007afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	4798      	blx	r3
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b0e:	e004      	b.n	8007b1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fc03 	bl	800831e <USBD_CtlError>
              break;
 8007b18:	e000      	b.n	8007b1c <USBD_StdEPReq+0x1c8>
              break;
 8007b1a:	bf00      	nop
          }
          break;
 8007b1c:	e0ab      	b.n	8007c76 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d002      	beq.n	8007b30 <USBD_StdEPReq+0x1dc>
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d032      	beq.n	8007b94 <USBD_StdEPReq+0x240>
 8007b2e:	e097      	b.n	8007c60 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <USBD_StdEPReq+0x1f2>
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	2b80      	cmp	r3, #128	; 0x80
 8007b3a:	d004      	beq.n	8007b46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fbed 	bl	800831e <USBD_CtlError>
                break;
 8007b44:	e091      	b.n	8007c6a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	da0b      	bge.n	8007b66 <USBD_StdEPReq+0x212>
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	3310      	adds	r3, #16
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	3304      	adds	r3, #4
 8007b64:	e00b      	b.n	8007b7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b66:	7bbb      	ldrb	r3, [r7, #14]
 8007b68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	3304      	adds	r3, #4
 8007b7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fc37 	bl	8008400 <USBD_CtlSendData>
              break;
 8007b92:	e06a      	b.n	8007c6a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	da11      	bge.n	8007bc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	f003 020f 	and.w	r2, r3, #15
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	440b      	add	r3, r1
 8007bae:	3324      	adds	r3, #36	; 0x24
 8007bb0:	881b      	ldrh	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d117      	bne.n	8007be6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bb6:	6839      	ldr	r1, [r7, #0]
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fbb0 	bl	800831e <USBD_CtlError>
                  break;
 8007bbe:	e054      	b.n	8007c6a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	f003 020f 	and.w	r2, r3, #15
 8007bc6:	6879      	ldr	r1, [r7, #4]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	440b      	add	r3, r1
 8007bd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d104      	bne.n	8007be6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fb9d 	bl	800831e <USBD_CtlError>
                  break;
 8007be4:	e041      	b.n	8007c6a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007be6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	da0b      	bge.n	8007c06 <USBD_StdEPReq+0x2b2>
 8007bee:	7bbb      	ldrb	r3, [r7, #14]
 8007bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	3310      	adds	r3, #16
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	3304      	adds	r3, #4
 8007c04:	e00b      	b.n	8007c1e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4413      	add	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <USBD_StdEPReq+0x2d8>
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	2b80      	cmp	r3, #128	; 0x80
 8007c2a:	d103      	bne.n	8007c34 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	e00e      	b.n	8007c52 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c34:	7bbb      	ldrb	r3, [r7, #14]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f001 f897 	bl	8008d6c <USBD_LL_IsStallEP>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	2201      	movs	r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e002      	b.n	8007c52 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2202      	movs	r2, #2
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fbd1 	bl	8008400 <USBD_CtlSendData>
              break;
 8007c5e:	e004      	b.n	8007c6a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fb5b 	bl	800831e <USBD_CtlError>
              break;
 8007c68:	bf00      	nop
          }
          break;
 8007c6a:	e004      	b.n	8007c76 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb55 	bl	800831e <USBD_CtlError>
          break;
 8007c74:	bf00      	nop
      }
      break;
 8007c76:	e005      	b.n	8007c84 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fb4f 	bl	800831e <USBD_CtlError>
      break;
 8007c80:	e000      	b.n	8007c84 <USBD_StdEPReq+0x330>
      break;
 8007c82:	bf00      	nop
  }

  return ret;
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
	...

08007c90 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	885b      	ldrh	r3, [r3, #2]
 8007caa:	0a1b      	lsrs	r3, r3, #8
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	2b06      	cmp	r3, #6
 8007cb2:	f200 8128 	bhi.w	8007f06 <USBD_GetDescriptor+0x276>
 8007cb6:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <USBD_GetDescriptor+0x2c>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007cd9 	.word	0x08007cd9
 8007cc0:	08007cf1 	.word	0x08007cf1
 8007cc4:	08007d31 	.word	0x08007d31
 8007cc8:	08007f07 	.word	0x08007f07
 8007ccc:	08007f07 	.word	0x08007f07
 8007cd0:	08007ea7 	.word	0x08007ea7
 8007cd4:	08007ed3 	.word	0x08007ed3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	7c12      	ldrb	r2, [r2, #16]
 8007ce4:	f107 0108 	add.w	r1, r7, #8
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	60f8      	str	r0, [r7, #12]
      break;
 8007cee:	e112      	b.n	8007f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	7c1b      	ldrb	r3, [r3, #16]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10d      	bne.n	8007d14 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d00:	f107 0208 	add.w	r2, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	2202      	movs	r2, #2
 8007d10:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d12:	e100      	b.n	8007f16 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	f107 0208 	add.w	r2, r7, #8
 8007d20:	4610      	mov	r0, r2
 8007d22:	4798      	blx	r3
 8007d24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	701a      	strb	r2, [r3, #0]
      break;
 8007d2e:	e0f2      	b.n	8007f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	885b      	ldrh	r3, [r3, #2]
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b05      	cmp	r3, #5
 8007d38:	f200 80ac 	bhi.w	8007e94 <USBD_GetDescriptor+0x204>
 8007d3c:	a201      	add	r2, pc, #4	; (adr r2, 8007d44 <USBD_GetDescriptor+0xb4>)
 8007d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d42:	bf00      	nop
 8007d44:	08007d5d 	.word	0x08007d5d
 8007d48:	08007d91 	.word	0x08007d91
 8007d4c:	08007dc5 	.word	0x08007dc5
 8007d50:	08007df9 	.word	0x08007df9
 8007d54:	08007e2d 	.word	0x08007e2d
 8007d58:	08007e61 	.word	0x08007e61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7c12      	ldrb	r2, [r2, #16]
 8007d74:	f107 0108 	add.w	r1, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7e:	e091      	b.n	8007ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 facb 	bl	800831e <USBD_CtlError>
            err++;
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8e:	e089      	b.n	8007ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	7c12      	ldrb	r2, [r2, #16]
 8007da8:	f107 0108 	add.w	r1, r7, #8
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db2:	e077      	b.n	8007ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fab1 	bl	800831e <USBD_CtlError>
            err++;
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc2:	e06f      	b.n	8007ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00b      	beq.n	8007de8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7c12      	ldrb	r2, [r2, #16]
 8007ddc:	f107 0108 	add.w	r1, r7, #8
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007de6:	e05d      	b.n	8007ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007de8:	6839      	ldr	r1, [r7, #0]
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fa97 	bl	800831e <USBD_CtlError>
            err++;
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	3301      	adds	r3, #1
 8007df4:	72fb      	strb	r3, [r7, #11]
          break;
 8007df6:	e055      	b.n	8007ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00b      	beq.n	8007e1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	7c12      	ldrb	r2, [r2, #16]
 8007e10:	f107 0108 	add.w	r1, r7, #8
 8007e14:	4610      	mov	r0, r2
 8007e16:	4798      	blx	r3
 8007e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e1a:	e043      	b.n	8007ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa7d 	bl	800831e <USBD_CtlError>
            err++;
 8007e24:	7afb      	ldrb	r3, [r7, #11]
 8007e26:	3301      	adds	r3, #1
 8007e28:	72fb      	strb	r3, [r7, #11]
          break;
 8007e2a:	e03b      	b.n	8007ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00b      	beq.n	8007e50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	7c12      	ldrb	r2, [r2, #16]
 8007e44:	f107 0108 	add.w	r1, r7, #8
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4798      	blx	r3
 8007e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e4e:	e029      	b.n	8007ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e50:	6839      	ldr	r1, [r7, #0]
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 fa63 	bl	800831e <USBD_CtlError>
            err++;
 8007e58:	7afb      	ldrb	r3, [r7, #11]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e5e:	e021      	b.n	8007ea4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00b      	beq.n	8007e84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	7c12      	ldrb	r2, [r2, #16]
 8007e78:	f107 0108 	add.w	r1, r7, #8
 8007e7c:	4610      	mov	r0, r2
 8007e7e:	4798      	blx	r3
 8007e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e82:	e00f      	b.n	8007ea4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa49 	bl	800831e <USBD_CtlError>
            err++;
 8007e8c:	7afb      	ldrb	r3, [r7, #11]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	72fb      	strb	r3, [r7, #11]
          break;
 8007e92:	e007      	b.n	8007ea4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e94:	6839      	ldr	r1, [r7, #0]
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fa41 	bl	800831e <USBD_CtlError>
          err++;
 8007e9c:	7afb      	ldrb	r3, [r7, #11]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007ea2:	bf00      	nop
      }
      break;
 8007ea4:	e037      	b.n	8007f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	7c1b      	ldrb	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d109      	bne.n	8007ec2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb6:	f107 0208 	add.w	r2, r7, #8
 8007eba:	4610      	mov	r0, r2
 8007ebc:	4798      	blx	r3
 8007ebe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ec0:	e029      	b.n	8007f16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ec2:	6839      	ldr	r1, [r7, #0]
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fa2a 	bl	800831e <USBD_CtlError>
        err++;
 8007eca:	7afb      	ldrb	r3, [r7, #11]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	72fb      	strb	r3, [r7, #11]
      break;
 8007ed0:	e021      	b.n	8007f16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	7c1b      	ldrb	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10d      	bne.n	8007ef6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee2:	f107 0208 	add.w	r2, r7, #8
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4798      	blx	r3
 8007eea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ef4:	e00f      	b.n	8007f16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fa10 	bl	800831e <USBD_CtlError>
        err++;
 8007efe:	7afb      	ldrb	r3, [r7, #11]
 8007f00:	3301      	adds	r3, #1
 8007f02:	72fb      	strb	r3, [r7, #11]
      break;
 8007f04:	e007      	b.n	8007f16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 fa08 	bl	800831e <USBD_CtlError>
      err++;
 8007f0e:	7afb      	ldrb	r3, [r7, #11]
 8007f10:	3301      	adds	r3, #1
 8007f12:	72fb      	strb	r3, [r7, #11]
      break;
 8007f14:	bf00      	nop
  }

  if (err != 0U)
 8007f16:	7afb      	ldrb	r3, [r7, #11]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d11e      	bne.n	8007f5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	88db      	ldrh	r3, [r3, #6]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d016      	beq.n	8007f52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007f24:	893b      	ldrh	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00e      	beq.n	8007f48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	88da      	ldrh	r2, [r3, #6]
 8007f2e:	893b      	ldrh	r3, [r7, #8]
 8007f30:	4293      	cmp	r3, r2
 8007f32:	bf28      	it	cs
 8007f34:	4613      	movcs	r3, r2
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f3a:	893b      	ldrh	r3, [r7, #8]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68f9      	ldr	r1, [r7, #12]
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fa5d 	bl	8008400 <USBD_CtlSendData>
 8007f46:	e009      	b.n	8007f5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f9e7 	bl	800831e <USBD_CtlError>
 8007f50:	e004      	b.n	8007f5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 faae 	bl	80084b4 <USBD_CtlSendStatus>
 8007f58:	e000      	b.n	8007f5c <USBD_GetDescriptor+0x2cc>
    return;
 8007f5a:	bf00      	nop
  }
}
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop

08007f64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	889b      	ldrh	r3, [r3, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d131      	bne.n	8007fda <USBD_SetAddress+0x76>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	88db      	ldrh	r3, [r3, #6]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d12d      	bne.n	8007fda <USBD_SetAddress+0x76>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	885b      	ldrh	r3, [r3, #2]
 8007f82:	2b7f      	cmp	r3, #127	; 0x7f
 8007f84:	d829      	bhi.n	8007fda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	885b      	ldrh	r3, [r3, #2]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b03      	cmp	r3, #3
 8007f9c:	d104      	bne.n	8007fa8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f9e:	6839      	ldr	r1, [r7, #0]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f9bc 	bl	800831e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa6:	e01d      	b.n	8007fe4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	7bfa      	ldrb	r2, [r7, #15]
 8007fac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 ff05 	bl	8008dc4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa7a 	bl	80084b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d004      	beq.n	8007fd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2202      	movs	r2, #2
 8007fca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fce:	e009      	b.n	8007fe4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd8:	e004      	b.n	8007fe4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f99e 	bl	800831e <USBD_CtlError>
  }
}
 8007fe2:	bf00      	nop
 8007fe4:	bf00      	nop
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	885b      	ldrh	r3, [r3, #2]
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	4b4e      	ldr	r3, [pc, #312]	; (800813c <USBD_SetConfig+0x150>)
 8008002:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008004:	4b4d      	ldr	r3, [pc, #308]	; (800813c <USBD_SetConfig+0x150>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d905      	bls.n	8008018 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f985 	bl	800831e <USBD_CtlError>
    return USBD_FAIL;
 8008014:	2303      	movs	r3, #3
 8008016:	e08c      	b.n	8008132 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b02      	cmp	r3, #2
 8008022:	d002      	beq.n	800802a <USBD_SetConfig+0x3e>
 8008024:	2b03      	cmp	r3, #3
 8008026:	d029      	beq.n	800807c <USBD_SetConfig+0x90>
 8008028:	e075      	b.n	8008116 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800802a:	4b44      	ldr	r3, [pc, #272]	; (800813c <USBD_SetConfig+0x150>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d020      	beq.n	8008074 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008032:	4b42      	ldr	r3, [pc, #264]	; (800813c <USBD_SetConfig+0x150>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800803c:	4b3f      	ldr	r3, [pc, #252]	; (800813c <USBD_SetConfig+0x150>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fe ffe7 	bl	8007016 <USBD_SetClassConfig>
 8008048:	4603      	mov	r3, r0
 800804a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d008      	beq.n	8008064 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008052:	6839      	ldr	r1, [r7, #0]
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 f962 	bl	800831e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2202      	movs	r2, #2
 800805e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008062:	e065      	b.n	8008130 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 fa25 	bl	80084b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2203      	movs	r2, #3
 800806e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008072:	e05d      	b.n	8008130 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fa1d 	bl	80084b4 <USBD_CtlSendStatus>
      break;
 800807a:	e059      	b.n	8008130 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800807c:	4b2f      	ldr	r3, [pc, #188]	; (800813c <USBD_SetConfig+0x150>)
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d112      	bne.n	80080aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800808c:	4b2b      	ldr	r3, [pc, #172]	; (800813c <USBD_SetConfig+0x150>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008096:	4b29      	ldr	r3, [pc, #164]	; (800813c <USBD_SetConfig+0x150>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7fe ffd6 	bl	800704e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa06 	bl	80084b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080a8:	e042      	b.n	8008130 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80080aa:	4b24      	ldr	r3, [pc, #144]	; (800813c <USBD_SetConfig+0x150>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d02a      	beq.n	800810e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7fe ffc4 	bl	800704e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80080c6:	4b1d      	ldr	r3, [pc, #116]	; (800813c <USBD_SetConfig+0x150>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	461a      	mov	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80080d0:	4b1a      	ldr	r3, [pc, #104]	; (800813c <USBD_SetConfig+0x150>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fe ff9d 	bl	8007016 <USBD_SetClassConfig>
 80080dc:	4603      	mov	r3, r0
 80080de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00f      	beq.n	8008106 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f918 	bl	800831e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fe ffa9 	bl	800704e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008104:	e014      	b.n	8008130 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f9d4 	bl	80084b4 <USBD_CtlSendStatus>
      break;
 800810c:	e010      	b.n	8008130 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f9d0 	bl	80084b4 <USBD_CtlSendStatus>
      break;
 8008114:	e00c      	b.n	8008130 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f900 	bl	800831e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800811e:	4b07      	ldr	r3, [pc, #28]	; (800813c <USBD_SetConfig+0x150>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7fe ff92 	bl	800704e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	73fb      	strb	r3, [r7, #15]
      break;
 800812e:	bf00      	nop
  }

  return ret;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	200003c4 	.word	0x200003c4

08008140 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	88db      	ldrh	r3, [r3, #6]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d004      	beq.n	800815c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008152:	6839      	ldr	r1, [r7, #0]
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f8e2 	bl	800831e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800815a:	e023      	b.n	80081a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b02      	cmp	r3, #2
 8008166:	dc02      	bgt.n	800816e <USBD_GetConfig+0x2e>
 8008168:	2b00      	cmp	r3, #0
 800816a:	dc03      	bgt.n	8008174 <USBD_GetConfig+0x34>
 800816c:	e015      	b.n	800819a <USBD_GetConfig+0x5a>
 800816e:	2b03      	cmp	r3, #3
 8008170:	d00b      	beq.n	800818a <USBD_GetConfig+0x4a>
 8008172:	e012      	b.n	800819a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	3308      	adds	r3, #8
 800817e:	2201      	movs	r2, #1
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f93c 	bl	8008400 <USBD_CtlSendData>
        break;
 8008188:	e00c      	b.n	80081a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3304      	adds	r3, #4
 800818e:	2201      	movs	r2, #1
 8008190:	4619      	mov	r1, r3
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f934 	bl	8008400 <USBD_CtlSendData>
        break;
 8008198:	e004      	b.n	80081a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f8be 	bl	800831e <USBD_CtlError>
        break;
 80081a2:	bf00      	nop
}
 80081a4:	bf00      	nop
 80081a6:	3708      	adds	r7, #8
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	3b01      	subs	r3, #1
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d81e      	bhi.n	8008202 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	88db      	ldrh	r3, [r3, #6]
 80081c8:	2b02      	cmp	r3, #2
 80081ca:	d004      	beq.n	80081d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f8a5 	bl	800831e <USBD_CtlError>
        break;
 80081d4:	e01a      	b.n	800820c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d005      	beq.n	80081f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	f043 0202 	orr.w	r2, r3, #2
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	330c      	adds	r3, #12
 80081f6:	2202      	movs	r2, #2
 80081f8:	4619      	mov	r1, r3
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f900 	bl	8008400 <USBD_CtlSendData>
      break;
 8008200:	e004      	b.n	800820c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f88a 	bl	800831e <USBD_CtlError>
      break;
 800820a:	bf00      	nop
  }
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	885b      	ldrh	r3, [r3, #2]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d107      	bne.n	8008236 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f940 	bl	80084b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008234:	e013      	b.n	800825e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	885b      	ldrh	r3, [r3, #2]
 800823a:	2b02      	cmp	r3, #2
 800823c:	d10b      	bne.n	8008256 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	889b      	ldrh	r3, [r3, #4]
 8008242:	0a1b      	lsrs	r3, r3, #8
 8008244:	b29b      	uxth	r3, r3
 8008246:	b2da      	uxtb	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f930 	bl	80084b4 <USBD_CtlSendStatus>
}
 8008254:	e003      	b.n	800825e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008256:	6839      	ldr	r1, [r7, #0]
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f860 	bl	800831e <USBD_CtlError>
}
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b082      	sub	sp, #8
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008276:	b2db      	uxtb	r3, r3
 8008278:	3b01      	subs	r3, #1
 800827a:	2b02      	cmp	r3, #2
 800827c:	d80b      	bhi.n	8008296 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	885b      	ldrh	r3, [r3, #2]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d10c      	bne.n	80082a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f910 	bl	80084b4 <USBD_CtlSendStatus>
      }
      break;
 8008294:	e004      	b.n	80082a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008296:	6839      	ldr	r1, [r7, #0]
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f840 	bl	800831e <USBD_CtlError>
      break;
 800829e:	e000      	b.n	80082a2 <USBD_ClrFeature+0x3c>
      break;
 80082a0:	bf00      	nop
  }
}
 80082a2:	bf00      	nop
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	781a      	ldrb	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	3301      	adds	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	781a      	ldrb	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3301      	adds	r3, #1
 80082d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80082d4:	68f8      	ldr	r0, [r7, #12]
 80082d6:	f7ff fa41 	bl	800775c <SWAPBYTE>
 80082da:	4603      	mov	r3, r0
 80082dc:	461a      	mov	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3301      	adds	r3, #1
 80082e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3301      	adds	r3, #1
 80082ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f7ff fa34 	bl	800775c <SWAPBYTE>
 80082f4:	4603      	mov	r3, r0
 80082f6:	461a      	mov	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3301      	adds	r3, #1
 8008300:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	3301      	adds	r3, #1
 8008306:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f7ff fa27 	bl	800775c <SWAPBYTE>
 800830e:	4603      	mov	r3, r0
 8008310:	461a      	mov	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	80da      	strh	r2, [r3, #6]
}
 8008316:	bf00      	nop
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b082      	sub	sp, #8
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008328:	2180      	movs	r1, #128	; 0x80
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f000 fce0 	bl	8008cf0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008330:	2100      	movs	r1, #0
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fcdc 	bl	8008cf0 <USBD_LL_StallEP>
}
 8008338:	bf00      	nop
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d036      	beq.n	80083c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800835a:	6938      	ldr	r0, [r7, #16]
 800835c:	f000 f836 	bl	80083cc <USBD_GetLen>
 8008360:	4603      	mov	r3, r0
 8008362:	3301      	adds	r3, #1
 8008364:	b29b      	uxth	r3, r3
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	b29a      	uxth	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800836e:	7dfb      	ldrb	r3, [r7, #23]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	4413      	add	r3, r2
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	7812      	ldrb	r2, [r2, #0]
 8008378:	701a      	strb	r2, [r3, #0]
  idx++;
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	3301      	adds	r3, #1
 800837e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008380:	7dfb      	ldrb	r3, [r7, #23]
 8008382:	68ba      	ldr	r2, [r7, #8]
 8008384:	4413      	add	r3, r2
 8008386:	2203      	movs	r2, #3
 8008388:	701a      	strb	r2, [r3, #0]
  idx++;
 800838a:	7dfb      	ldrb	r3, [r7, #23]
 800838c:	3301      	adds	r3, #1
 800838e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008390:	e013      	b.n	80083ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	4413      	add	r3, r2
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	7812      	ldrb	r2, [r2, #0]
 800839c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	3301      	adds	r3, #1
 80083a2:	613b      	str	r3, [r7, #16]
    idx++;
 80083a4:	7dfb      	ldrb	r3, [r7, #23]
 80083a6:	3301      	adds	r3, #1
 80083a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	4413      	add	r3, r2
 80083b0:	2200      	movs	r2, #0
 80083b2:	701a      	strb	r2, [r3, #0]
    idx++;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	3301      	adds	r3, #1
 80083b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1e7      	bne.n	8008392 <USBD_GetString+0x52>
 80083c2:	e000      	b.n	80083c6 <USBD_GetString+0x86>
    return;
 80083c4:	bf00      	nop
  }
}
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80083dc:	e005      	b.n	80083ea <USBD_GetLen+0x1e>
  {
    len++;
 80083de:	7bfb      	ldrb	r3, [r7, #15]
 80083e0:	3301      	adds	r3, #1
 80083e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	3301      	adds	r3, #1
 80083e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d1f5      	bne.n	80083de <USBD_GetLen+0x12>
  }

  return len;
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2202      	movs	r2, #2
 8008410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	2100      	movs	r1, #0
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 fceb 	bl	8008e02 <USBD_LL_Transmit>

  return USBD_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008436:	b580      	push	{r7, lr}
 8008438:	b084      	sub	sp, #16
 800843a:	af00      	add	r7, sp, #0
 800843c:	60f8      	str	r0, [r7, #12]
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	2100      	movs	r1, #0
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 fcda 	bl	8008e02 <USBD_LL_Transmit>

  return USBD_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2203      	movs	r2, #3
 8008468:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	2100      	movs	r1, #0
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 fcde 	bl	8008e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008488:	2300      	movs	r3, #0
}
 800848a:	4618      	mov	r0, r3
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b084      	sub	sp, #16
 8008496:	af00      	add	r7, sp, #0
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	2100      	movs	r1, #0
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 fccd 	bl	8008e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2204      	movs	r2, #4
 80084c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084c4:	2300      	movs	r3, #0
 80084c6:	2200      	movs	r2, #0
 80084c8:	2100      	movs	r1, #0
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fc99 	bl	8008e02 <USBD_LL_Transmit>

  return USBD_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b082      	sub	sp, #8
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2205      	movs	r2, #5
 80084e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084ea:	2300      	movs	r3, #0
 80084ec:	2200      	movs	r2, #0
 80084ee:	2100      	movs	r1, #0
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 fca7 	bl	8008e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008504:	2200      	movs	r2, #0
 8008506:	4912      	ldr	r1, [pc, #72]	; (8008550 <MX_USB_DEVICE_Init+0x50>)
 8008508:	4812      	ldr	r0, [pc, #72]	; (8008554 <MX_USB_DEVICE_Init+0x54>)
 800850a:	f7fe fceb 	bl	8006ee4 <USBD_Init>
 800850e:	4603      	mov	r3, r0
 8008510:	2b00      	cmp	r3, #0
 8008512:	d001      	beq.n	8008518 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008514:	f7f8 fb28 	bl	8000b68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008518:	490f      	ldr	r1, [pc, #60]	; (8008558 <MX_USB_DEVICE_Init+0x58>)
 800851a:	480e      	ldr	r0, [pc, #56]	; (8008554 <MX_USB_DEVICE_Init+0x54>)
 800851c:	f7fe fd20 	bl	8006f60 <USBD_RegisterClass>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008526:	f7f8 fb1f 	bl	8000b68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800852a:	490c      	ldr	r1, [pc, #48]	; (800855c <MX_USB_DEVICE_Init+0x5c>)
 800852c:	4809      	ldr	r0, [pc, #36]	; (8008554 <MX_USB_DEVICE_Init+0x54>)
 800852e:	f7fe fc03 	bl	8006d38 <USBD_CDC_RegisterInterface>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008538:	f7f8 fb16 	bl	8000b68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800853c:	4805      	ldr	r0, [pc, #20]	; (8008554 <MX_USB_DEVICE_Init+0x54>)
 800853e:	f7fe fd53 	bl	8006fe8 <USBD_Start>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008548:	f7f8 fb0e 	bl	8000b68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800854c:	bf00      	nop
 800854e:	bd80      	pop	{r7, pc}
 8008550:	200000ac 	.word	0x200000ac
 8008554:	200003c8 	.word	0x200003c8
 8008558:	20000018 	.word	0x20000018
 800855c:	20000098 	.word	0x20000098

08008560 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008564:	2200      	movs	r2, #0
 8008566:	4905      	ldr	r1, [pc, #20]	; (800857c <CDC_Init_FS+0x1c>)
 8008568:	4805      	ldr	r0, [pc, #20]	; (8008580 <CDC_Init_FS+0x20>)
 800856a:	f7fe fbff 	bl	8006d6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800856e:	4905      	ldr	r1, [pc, #20]	; (8008584 <CDC_Init_FS+0x24>)
 8008570:	4803      	ldr	r0, [pc, #12]	; (8008580 <CDC_Init_FS+0x20>)
 8008572:	f7fe fc1d 	bl	8006db0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008576:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008578:	4618      	mov	r0, r3
 800857a:	bd80      	pop	{r7, pc}
 800857c:	20000ea4 	.word	0x20000ea4
 8008580:	200003c8 	.word	0x200003c8
 8008584:	200006a4 	.word	0x200006a4

08008588 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008588:	b480      	push	{r7}
 800858a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800858c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800858e:	4618      	mov	r0, r3
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	6039      	str	r1, [r7, #0]
 80085a2:	71fb      	strb	r3, [r7, #7]
 80085a4:	4613      	mov	r3, r2
 80085a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	2b23      	cmp	r3, #35	; 0x23
 80085ac:	d84a      	bhi.n	8008644 <CDC_Control_FS+0xac>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <CDC_Control_FS+0x1c>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	08008645 	.word	0x08008645
 80085b8:	08008645 	.word	0x08008645
 80085bc:	08008645 	.word	0x08008645
 80085c0:	08008645 	.word	0x08008645
 80085c4:	08008645 	.word	0x08008645
 80085c8:	08008645 	.word	0x08008645
 80085cc:	08008645 	.word	0x08008645
 80085d0:	08008645 	.word	0x08008645
 80085d4:	08008645 	.word	0x08008645
 80085d8:	08008645 	.word	0x08008645
 80085dc:	08008645 	.word	0x08008645
 80085e0:	08008645 	.word	0x08008645
 80085e4:	08008645 	.word	0x08008645
 80085e8:	08008645 	.word	0x08008645
 80085ec:	08008645 	.word	0x08008645
 80085f0:	08008645 	.word	0x08008645
 80085f4:	08008645 	.word	0x08008645
 80085f8:	08008645 	.word	0x08008645
 80085fc:	08008645 	.word	0x08008645
 8008600:	08008645 	.word	0x08008645
 8008604:	08008645 	.word	0x08008645
 8008608:	08008645 	.word	0x08008645
 800860c:	08008645 	.word	0x08008645
 8008610:	08008645 	.word	0x08008645
 8008614:	08008645 	.word	0x08008645
 8008618:	08008645 	.word	0x08008645
 800861c:	08008645 	.word	0x08008645
 8008620:	08008645 	.word	0x08008645
 8008624:	08008645 	.word	0x08008645
 8008628:	08008645 	.word	0x08008645
 800862c:	08008645 	.word	0x08008645
 8008630:	08008645 	.word	0x08008645
 8008634:	08008645 	.word	0x08008645
 8008638:	08008645 	.word	0x08008645
 800863c:	08008645 	.word	0x08008645
 8008640:	08008645 	.word	0x08008645
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008644:	bf00      	nop
  }

  return (USBD_OK);
 8008646:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800865e:	6879      	ldr	r1, [r7, #4]
 8008660:	4805      	ldr	r0, [pc, #20]	; (8008678 <CDC_Receive_FS+0x24>)
 8008662:	f7fe fba5 	bl	8006db0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008666:	4804      	ldr	r0, [pc, #16]	; (8008678 <CDC_Receive_FS+0x24>)
 8008668:	f7fe fc06 	bl	8006e78 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800866c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	200003c8 	.word	0x200003c8

0800867c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800868c:	4b0d      	ldr	r3, [pc, #52]	; (80086c4 <CDC_Transmit_FS+0x48>)
 800868e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008692:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800869e:	2301      	movs	r3, #1
 80086a0:	e00b      	b.n	80086ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80086a2:	887b      	ldrh	r3, [r7, #2]
 80086a4:	461a      	mov	r2, r3
 80086a6:	6879      	ldr	r1, [r7, #4]
 80086a8:	4806      	ldr	r0, [pc, #24]	; (80086c4 <CDC_Transmit_FS+0x48>)
 80086aa:	f7fe fb5f 	bl	8006d6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80086ae:	4805      	ldr	r0, [pc, #20]	; (80086c4 <CDC_Transmit_FS+0x48>)
 80086b0:	f7fe fb9c 	bl	8006dec <USBD_CDC_TransmitPacket>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	200003c8 	.word	0x200003c8

080086c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4613      	mov	r3, r2
 80086d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80086da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
	...

080086ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2212      	movs	r2, #18
 80086fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086fe:	4b03      	ldr	r3, [pc, #12]	; (800870c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	200000c8 	.word	0x200000c8

08008710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2204      	movs	r2, #4
 8008720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008722:	4b03      	ldr	r3, [pc, #12]	; (8008730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	200000dc 	.word	0x200000dc

08008734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	4603      	mov	r3, r0
 800873c:	6039      	str	r1, [r7, #0]
 800873e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d105      	bne.n	8008752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4907      	ldr	r1, [pc, #28]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
 800874a:	4808      	ldr	r0, [pc, #32]	; (800876c <USBD_FS_ProductStrDescriptor+0x38>)
 800874c:	f7ff fdf8 	bl	8008340 <USBD_GetString>
 8008750:	e004      	b.n	800875c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	4904      	ldr	r1, [pc, #16]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
 8008756:	4805      	ldr	r0, [pc, #20]	; (800876c <USBD_FS_ProductStrDescriptor+0x38>)
 8008758:	f7ff fdf2 	bl	8008340 <USBD_GetString>
  }
  return USBD_StrDesc;
 800875c:	4b02      	ldr	r3, [pc, #8]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	200016a4 	.word	0x200016a4
 800876c:	0800a3a8 	.word	0x0800a3a8

08008770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	4904      	ldr	r1, [pc, #16]	; (8008790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008780:	4804      	ldr	r0, [pc, #16]	; (8008794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008782:	f7ff fddd 	bl	8008340 <USBD_GetString>
  return USBD_StrDesc;
 8008786:	4b02      	ldr	r3, [pc, #8]	; (8008790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	200016a4 	.word	0x200016a4
 8008794:	0800a3c0 	.word	0x0800a3c0

08008798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	221a      	movs	r2, #26
 80087a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087aa:	f000 f843 	bl	8008834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ae:	4b02      	ldr	r3, [pc, #8]	; (80087b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	200000e0 	.word	0x200000e0

080087bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	6039      	str	r1, [r7, #0]
 80087c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d105      	bne.n	80087da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	4907      	ldr	r1, [pc, #28]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087d2:	4808      	ldr	r0, [pc, #32]	; (80087f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087d4:	f7ff fdb4 	bl	8008340 <USBD_GetString>
 80087d8:	e004      	b.n	80087e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4904      	ldr	r1, [pc, #16]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087de:	4805      	ldr	r0, [pc, #20]	; (80087f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087e0:	f7ff fdae 	bl	8008340 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087e4:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	200016a4 	.word	0x200016a4
 80087f4:	0800a3d4 	.word	0x0800a3d4

080087f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	6039      	str	r1, [r7, #0]
 8008802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d105      	bne.n	8008816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4907      	ldr	r1, [pc, #28]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800880e:	4808      	ldr	r0, [pc, #32]	; (8008830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008810:	f7ff fd96 	bl	8008340 <USBD_GetString>
 8008814:	e004      	b.n	8008820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	4904      	ldr	r1, [pc, #16]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800881a:	4805      	ldr	r0, [pc, #20]	; (8008830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800881c:	f7ff fd90 	bl	8008340 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008820:	4b02      	ldr	r3, [pc, #8]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	200016a4 	.word	0x200016a4
 8008830:	0800a3e0 	.word	0x0800a3e0

08008834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <Get_SerialNum+0x44>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008840:	4b0e      	ldr	r3, [pc, #56]	; (800887c <Get_SerialNum+0x48>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008846:	4b0e      	ldr	r3, [pc, #56]	; (8008880 <Get_SerialNum+0x4c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4413      	add	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d009      	beq.n	800886e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800885a:	2208      	movs	r2, #8
 800885c:	4909      	ldr	r1, [pc, #36]	; (8008884 <Get_SerialNum+0x50>)
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f814 	bl	800888c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008864:	2204      	movs	r2, #4
 8008866:	4908      	ldr	r1, [pc, #32]	; (8008888 <Get_SerialNum+0x54>)
 8008868:	68b8      	ldr	r0, [r7, #8]
 800886a:	f000 f80f 	bl	800888c <IntToUnicode>
  }
}
 800886e:	bf00      	nop
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	1fff7a10 	.word	0x1fff7a10
 800887c:	1fff7a14 	.word	0x1fff7a14
 8008880:	1fff7a18 	.word	0x1fff7a18
 8008884:	200000e2 	.word	0x200000e2
 8008888:	200000f2 	.word	0x200000f2

0800888c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800889e:	2300      	movs	r3, #0
 80088a0:	75fb      	strb	r3, [r7, #23]
 80088a2:	e027      	b.n	80088f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	0f1b      	lsrs	r3, r3, #28
 80088a8:	2b09      	cmp	r3, #9
 80088aa:	d80b      	bhi.n	80088c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	0f1b      	lsrs	r3, r3, #28
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4619      	mov	r1, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	440b      	add	r3, r1
 80088bc:	3230      	adds	r2, #48	; 0x30
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	e00a      	b.n	80088da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	0f1b      	lsrs	r3, r3, #28
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	4619      	mov	r1, r3
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	440b      	add	r3, r1
 80088d4:	3237      	adds	r2, #55	; 0x37
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	3301      	adds	r3, #1
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	4413      	add	r3, r2
 80088ea:	2200      	movs	r2, #0
 80088ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	3301      	adds	r3, #1
 80088f2:	75fb      	strb	r3, [r7, #23]
 80088f4:	7dfa      	ldrb	r2, [r7, #23]
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d3d3      	bcc.n	80088a4 <IntToUnicode+0x18>
  }
}
 80088fc:	bf00      	nop
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
	...

0800890c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b08a      	sub	sp, #40	; 0x28
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008914:	f107 0314 	add.w	r3, r7, #20
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	605a      	str	r2, [r3, #4]
 800891e:	609a      	str	r2, [r3, #8]
 8008920:	60da      	str	r2, [r3, #12]
 8008922:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800892c:	d13a      	bne.n	80089a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800892e:	2300      	movs	r3, #0
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	4b1e      	ldr	r3, [pc, #120]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 8008934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008936:	4a1d      	ldr	r2, [pc, #116]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 8008938:	f043 0301 	orr.w	r3, r3, #1
 800893c:	6313      	str	r3, [r2, #48]	; 0x30
 800893e:	4b1b      	ldr	r3, [pc, #108]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 8008940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008942:	f003 0301 	and.w	r3, r3, #1
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800894a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800894e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008950:	2302      	movs	r3, #2
 8008952:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008954:	2300      	movs	r3, #0
 8008956:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008958:	2303      	movs	r3, #3
 800895a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800895c:	230a      	movs	r3, #10
 800895e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008960:	f107 0314 	add.w	r3, r7, #20
 8008964:	4619      	mov	r1, r3
 8008966:	4812      	ldr	r0, [pc, #72]	; (80089b0 <HAL_PCD_MspInit+0xa4>)
 8008968:	f7f9 fdfc 	bl	8002564 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800896c:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 800896e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008970:	4a0e      	ldr	r2, [pc, #56]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 8008972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008976:	6353      	str	r3, [r2, #52]	; 0x34
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 800897e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008980:	4a0a      	ldr	r2, [pc, #40]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 8008982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008986:	6453      	str	r3, [r2, #68]	; 0x44
 8008988:	4b08      	ldr	r3, [pc, #32]	; (80089ac <HAL_PCD_MspInit+0xa0>)
 800898a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008994:	2200      	movs	r2, #0
 8008996:	2100      	movs	r1, #0
 8008998:	2043      	movs	r0, #67	; 0x43
 800899a:	f7f9 fac2 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800899e:	2043      	movs	r0, #67	; 0x43
 80089a0:	f7f9 fadb 	bl	8001f5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80089a4:	bf00      	nop
 80089a6:	3728      	adds	r7, #40	; 0x28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	40023800 	.word	0x40023800
 80089b0:	40020000 	.word	0x40020000

080089b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089c8:	4619      	mov	r1, r3
 80089ca:	4610      	mov	r0, r2
 80089cc:	f7fe fb59 	bl	8007082 <USBD_LL_SetupStage>
}
 80089d0:	bf00      	nop
 80089d2:	3708      	adds	r7, #8
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089ea:	78fa      	ldrb	r2, [r7, #3]
 80089ec:	6879      	ldr	r1, [r7, #4]
 80089ee:	4613      	mov	r3, r2
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	4413      	add	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	440b      	add	r3, r1
 80089f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	4619      	mov	r1, r3
 8008a02:	f7fe fb93 	bl	800712c <USBD_LL_DataOutStage>
}
 8008a06:	bf00      	nop
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b082      	sub	sp, #8
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a20:	78fa      	ldrb	r2, [r7, #3]
 8008a22:	6879      	ldr	r1, [r7, #4]
 8008a24:	4613      	mov	r3, r2
 8008a26:	00db      	lsls	r3, r3, #3
 8008a28:	4413      	add	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	440b      	add	r3, r1
 8008a2e:	334c      	adds	r3, #76	; 0x4c
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	78fb      	ldrb	r3, [r7, #3]
 8008a34:	4619      	mov	r1, r3
 8008a36:	f7fe fc2c 	bl	8007292 <USBD_LL_DataInStage>
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fe fd60 	bl	8007516 <USBD_LL_SOF>
}
 8008a56:	bf00      	nop
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a66:	2301      	movs	r3, #1
 8008a68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d102      	bne.n	8008a78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008a72:	2300      	movs	r3, #0
 8008a74:	73fb      	strb	r3, [r7, #15]
 8008a76:	e008      	b.n	8008a8a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d102      	bne.n	8008a86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008a80:	2301      	movs	r3, #1
 8008a82:	73fb      	strb	r3, [r7, #15]
 8008a84:	e001      	b.n	8008a8a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008a86:	f7f8 f86f 	bl	8000b68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a90:	7bfa      	ldrb	r2, [r7, #15]
 8008a92:	4611      	mov	r1, r2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fd00 	bl	800749a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fe fca8 	bl	80073f6 <USBD_LL_Reset>
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fe fcfb 	bl	80074ba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ad6:	f043 0301 	orr.w	r3, r3, #1
 8008ada:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d005      	beq.n	8008af0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ae4:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <HAL_PCD_SuspendCallback+0x48>)
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	4a03      	ldr	r2, [pc, #12]	; (8008af8 <HAL_PCD_SuspendCallback+0x48>)
 8008aea:	f043 0306 	orr.w	r3, r3, #6
 8008aee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008af0:	bf00      	nop
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	e000ed00 	.word	0xe000ed00

08008afc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7fe fceb 	bl	80074e6 <USBD_LL_Resume>
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe fd43 	bl	80075ba <USBD_LL_IsoOUTIncomplete>
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fcff 	bl	8007556 <USBD_LL_IsoINIncomplete>
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fd55 	bl	800761e <USBD_LL_DevConnected>
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fd52 	bl	8007634 <USBD_LL_DevDisconnected>
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d13c      	bne.n	8008c22 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ba8:	4a20      	ldr	r2, [pc, #128]	; (8008c2c <USBD_LL_Init+0x94>)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a1e      	ldr	r2, [pc, #120]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bb4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bb8:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008bc0:	4b1a      	ldr	r3, [pc, #104]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bc2:	2204      	movs	r2, #4
 8008bc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bc6:	4b19      	ldr	r3, [pc, #100]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bc8:	2202      	movs	r2, #2
 8008bca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008bcc:	4b17      	ldr	r3, [pc, #92]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bd2:	4b16      	ldr	r3, [pc, #88]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bd8:	4b14      	ldr	r3, [pc, #80]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bde:	4b13      	ldr	r3, [pc, #76]	; (8008c2c <USBD_LL_Init+0x94>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008be4:	4b11      	ldr	r3, [pc, #68]	; (8008c2c <USBD_LL_Init+0x94>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008bea:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008bf0:	4b0e      	ldr	r3, [pc, #56]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008bf6:	480d      	ldr	r0, [pc, #52]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bf8:	f7f9 fe79 	bl	80028ee <HAL_PCD_Init>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c02:	f7f7 ffb1 	bl	8000b68 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c06:	2180      	movs	r1, #128	; 0x80
 8008c08:	4808      	ldr	r0, [pc, #32]	; (8008c2c <USBD_LL_Init+0x94>)
 8008c0a:	f7fb f8d0 	bl	8003dae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c0e:	2240      	movs	r2, #64	; 0x40
 8008c10:	2100      	movs	r1, #0
 8008c12:	4806      	ldr	r0, [pc, #24]	; (8008c2c <USBD_LL_Init+0x94>)
 8008c14:	f7fb f884 	bl	8003d20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c18:	2280      	movs	r2, #128	; 0x80
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	4803      	ldr	r0, [pc, #12]	; (8008c2c <USBD_LL_Init+0x94>)
 8008c1e:	f7fb f87f 	bl	8003d20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	200018a4 	.word	0x200018a4

08008c30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7f9 ff6e 	bl	8002b28 <HAL_PCD_Start>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c50:	7bfb      	ldrb	r3, [r7, #15]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f000 f942 	bl	8008edc <USBD_Get_USB_Status>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3710      	adds	r7, #16
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	4608      	mov	r0, r1
 8008c70:	4611      	mov	r1, r2
 8008c72:	461a      	mov	r2, r3
 8008c74:	4603      	mov	r3, r0
 8008c76:	70fb      	strb	r3, [r7, #3]
 8008c78:	460b      	mov	r3, r1
 8008c7a:	70bb      	strb	r3, [r7, #2]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c80:	2300      	movs	r3, #0
 8008c82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008c8e:	78bb      	ldrb	r3, [r7, #2]
 8008c90:	883a      	ldrh	r2, [r7, #0]
 8008c92:	78f9      	ldrb	r1, [r7, #3]
 8008c94:	f7fa fc3f 	bl	8003516 <HAL_PCD_EP_Open>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 f91c 	bl	8008edc <USBD_Get_USB_Status>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ccc:	78fa      	ldrb	r2, [r7, #3]
 8008cce:	4611      	mov	r1, r2
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fa fc88 	bl	80035e6 <HAL_PCD_EP_Close>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 f8fd 	bl	8008edc <USBD_Get_USB_Status>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	460b      	mov	r3, r1
 8008cfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d00:	2300      	movs	r3, #0
 8008d02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d0a:	78fa      	ldrb	r2, [r7, #3]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fa fd60 	bl	80037d4 <HAL_PCD_EP_SetStall>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 f8de 	bl	8008edc <USBD_Get_USB_Status>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d24:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d48:	78fa      	ldrb	r2, [r7, #3]
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7fa fda5 	bl	800389c <HAL_PCD_EP_ClrStall>
 8008d52:	4603      	mov	r3, r0
 8008d54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d56:	7bfb      	ldrb	r3, [r7, #15]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f000 f8bf 	bl	8008edc <USBD_Get_USB_Status>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	da0b      	bge.n	8008da0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008d88:	78fb      	ldrb	r3, [r7, #3]
 8008d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d8e:	68f9      	ldr	r1, [r7, #12]
 8008d90:	4613      	mov	r3, r2
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	4413      	add	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	333e      	adds	r3, #62	; 0x3e
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	e00b      	b.n	8008db8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008da6:	68f9      	ldr	r1, [r7, #12]
 8008da8:	4613      	mov	r3, r2
 8008daa:	00db      	lsls	r3, r3, #3
 8008dac:	4413      	add	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	440b      	add	r3, r1
 8008db2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008db6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	460b      	mov	r3, r1
 8008dce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008dde:	78fa      	ldrb	r2, [r7, #3]
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fa fb72 	bl	80034cc <HAL_PCD_SetAddress>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f000 f874 	bl	8008edc <USBD_Get_USB_Status>
 8008df4:	4603      	mov	r3, r0
 8008df6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3710      	adds	r7, #16
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b086      	sub	sp, #24
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e16:	2300      	movs	r3, #0
 8008e18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e20:	7af9      	ldrb	r1, [r7, #11]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	f7fa fc8b 	bl	8003740 <HAL_PCD_EP_Transmit>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 f853 	bl	8008edc <USBD_Get_USB_Status>
 8008e36:	4603      	mov	r3, r0
 8008e38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	607a      	str	r2, [r7, #4]
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	460b      	mov	r3, r1
 8008e52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008e62:	7af9      	ldrb	r1, [r7, #11]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	f7fa fc07 	bl	800367a <HAL_PCD_EP_Receive>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e70:	7dfb      	ldrb	r3, [r7, #23]
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 f832 	bl	8008edc <USBD_Get_USB_Status>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008e7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b082      	sub	sp, #8
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	460b      	mov	r3, r1
 8008e90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e98:	78fa      	ldrb	r2, [r7, #3]
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fa fc37 	bl	8003710 <HAL_PCD_EP_GetRxCount>
 8008ea2:	4603      	mov	r3, r0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}

08008eac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008eb4:	4b03      	ldr	r3, [pc, #12]	; (8008ec4 <USBD_static_malloc+0x18>)
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	20001db0 	.word	0x20001db0

08008ec8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]

}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d817      	bhi.n	8008f20 <USBD_Get_USB_Status+0x44>
 8008ef0:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <USBD_Get_USB_Status+0x1c>)
 8008ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef6:	bf00      	nop
 8008ef8:	08008f09 	.word	0x08008f09
 8008efc:	08008f0f 	.word	0x08008f0f
 8008f00:	08008f15 	.word	0x08008f15
 8008f04:	08008f1b 	.word	0x08008f1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0c:	e00b      	b.n	8008f26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	73fb      	strb	r3, [r7, #15]
    break;
 8008f12:	e008      	b.n	8008f26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f14:	2301      	movs	r3, #1
 8008f16:	73fb      	strb	r3, [r7, #15]
    break;
 8008f18:	e005      	b.n	8008f26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1e:	e002      	b.n	8008f26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f20:	2303      	movs	r3, #3
 8008f22:	73fb      	strb	r3, [r7, #15]
    break;
 8008f24:	bf00      	nop
  }
  return usb_status;
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3714      	adds	r7, #20
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <__errno>:
 8008f34:	4b01      	ldr	r3, [pc, #4]	; (8008f3c <__errno+0x8>)
 8008f36:	6818      	ldr	r0, [r3, #0]
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	200000fc 	.word	0x200000fc

08008f40 <__libc_init_array>:
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	4d0d      	ldr	r5, [pc, #52]	; (8008f78 <__libc_init_array+0x38>)
 8008f44:	4c0d      	ldr	r4, [pc, #52]	; (8008f7c <__libc_init_array+0x3c>)
 8008f46:	1b64      	subs	r4, r4, r5
 8008f48:	10a4      	asrs	r4, r4, #2
 8008f4a:	2600      	movs	r6, #0
 8008f4c:	42a6      	cmp	r6, r4
 8008f4e:	d109      	bne.n	8008f64 <__libc_init_array+0x24>
 8008f50:	4d0b      	ldr	r5, [pc, #44]	; (8008f80 <__libc_init_array+0x40>)
 8008f52:	4c0c      	ldr	r4, [pc, #48]	; (8008f84 <__libc_init_array+0x44>)
 8008f54:	f001 f9f0 	bl	800a338 <_init>
 8008f58:	1b64      	subs	r4, r4, r5
 8008f5a:	10a4      	asrs	r4, r4, #2
 8008f5c:	2600      	movs	r6, #0
 8008f5e:	42a6      	cmp	r6, r4
 8008f60:	d105      	bne.n	8008f6e <__libc_init_array+0x2e>
 8008f62:	bd70      	pop	{r4, r5, r6, pc}
 8008f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f68:	4798      	blx	r3
 8008f6a:	3601      	adds	r6, #1
 8008f6c:	e7ee      	b.n	8008f4c <__libc_init_array+0xc>
 8008f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f72:	4798      	blx	r3
 8008f74:	3601      	adds	r6, #1
 8008f76:	e7f2      	b.n	8008f5e <__libc_init_array+0x1e>
 8008f78:	0800a4b0 	.word	0x0800a4b0
 8008f7c:	0800a4b0 	.word	0x0800a4b0
 8008f80:	0800a4b0 	.word	0x0800a4b0
 8008f84:	0800a4b4 	.word	0x0800a4b4

08008f88 <malloc>:
 8008f88:	4b02      	ldr	r3, [pc, #8]	; (8008f94 <malloc+0xc>)
 8008f8a:	4601      	mov	r1, r0
 8008f8c:	6818      	ldr	r0, [r3, #0]
 8008f8e:	f000 b877 	b.w	8009080 <_malloc_r>
 8008f92:	bf00      	nop
 8008f94:	200000fc 	.word	0x200000fc

08008f98 <memset>:
 8008f98:	4402      	add	r2, r0
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d100      	bne.n	8008fa2 <memset+0xa>
 8008fa0:	4770      	bx	lr
 8008fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8008fa6:	e7f9      	b.n	8008f9c <memset+0x4>

08008fa8 <_free_r>:
 8008fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008faa:	2900      	cmp	r1, #0
 8008fac:	d044      	beq.n	8009038 <_free_r+0x90>
 8008fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fb2:	9001      	str	r0, [sp, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f1a1 0404 	sub.w	r4, r1, #4
 8008fba:	bfb8      	it	lt
 8008fbc:	18e4      	addlt	r4, r4, r3
 8008fbe:	f000 fa29 	bl	8009414 <__malloc_lock>
 8008fc2:	4a1e      	ldr	r2, [pc, #120]	; (800903c <_free_r+0x94>)
 8008fc4:	9801      	ldr	r0, [sp, #4]
 8008fc6:	6813      	ldr	r3, [r2, #0]
 8008fc8:	b933      	cbnz	r3, 8008fd8 <_free_r+0x30>
 8008fca:	6063      	str	r3, [r4, #4]
 8008fcc:	6014      	str	r4, [r2, #0]
 8008fce:	b003      	add	sp, #12
 8008fd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fd4:	f000 ba24 	b.w	8009420 <__malloc_unlock>
 8008fd8:	42a3      	cmp	r3, r4
 8008fda:	d908      	bls.n	8008fee <_free_r+0x46>
 8008fdc:	6825      	ldr	r5, [r4, #0]
 8008fde:	1961      	adds	r1, r4, r5
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	bf01      	itttt	eq
 8008fe4:	6819      	ldreq	r1, [r3, #0]
 8008fe6:	685b      	ldreq	r3, [r3, #4]
 8008fe8:	1949      	addeq	r1, r1, r5
 8008fea:	6021      	streq	r1, [r4, #0]
 8008fec:	e7ed      	b.n	8008fca <_free_r+0x22>
 8008fee:	461a      	mov	r2, r3
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	b10b      	cbz	r3, 8008ff8 <_free_r+0x50>
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	d9fa      	bls.n	8008fee <_free_r+0x46>
 8008ff8:	6811      	ldr	r1, [r2, #0]
 8008ffa:	1855      	adds	r5, r2, r1
 8008ffc:	42a5      	cmp	r5, r4
 8008ffe:	d10b      	bne.n	8009018 <_free_r+0x70>
 8009000:	6824      	ldr	r4, [r4, #0]
 8009002:	4421      	add	r1, r4
 8009004:	1854      	adds	r4, r2, r1
 8009006:	42a3      	cmp	r3, r4
 8009008:	6011      	str	r1, [r2, #0]
 800900a:	d1e0      	bne.n	8008fce <_free_r+0x26>
 800900c:	681c      	ldr	r4, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	6053      	str	r3, [r2, #4]
 8009012:	4421      	add	r1, r4
 8009014:	6011      	str	r1, [r2, #0]
 8009016:	e7da      	b.n	8008fce <_free_r+0x26>
 8009018:	d902      	bls.n	8009020 <_free_r+0x78>
 800901a:	230c      	movs	r3, #12
 800901c:	6003      	str	r3, [r0, #0]
 800901e:	e7d6      	b.n	8008fce <_free_r+0x26>
 8009020:	6825      	ldr	r5, [r4, #0]
 8009022:	1961      	adds	r1, r4, r5
 8009024:	428b      	cmp	r3, r1
 8009026:	bf04      	itt	eq
 8009028:	6819      	ldreq	r1, [r3, #0]
 800902a:	685b      	ldreq	r3, [r3, #4]
 800902c:	6063      	str	r3, [r4, #4]
 800902e:	bf04      	itt	eq
 8009030:	1949      	addeq	r1, r1, r5
 8009032:	6021      	streq	r1, [r4, #0]
 8009034:	6054      	str	r4, [r2, #4]
 8009036:	e7ca      	b.n	8008fce <_free_r+0x26>
 8009038:	b003      	add	sp, #12
 800903a:	bd30      	pop	{r4, r5, pc}
 800903c:	20001fd0 	.word	0x20001fd0

08009040 <sbrk_aligned>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	4e0e      	ldr	r6, [pc, #56]	; (800907c <sbrk_aligned+0x3c>)
 8009044:	460c      	mov	r4, r1
 8009046:	6831      	ldr	r1, [r6, #0]
 8009048:	4605      	mov	r5, r0
 800904a:	b911      	cbnz	r1, 8009052 <sbrk_aligned+0x12>
 800904c:	f000 f8ba 	bl	80091c4 <_sbrk_r>
 8009050:	6030      	str	r0, [r6, #0]
 8009052:	4621      	mov	r1, r4
 8009054:	4628      	mov	r0, r5
 8009056:	f000 f8b5 	bl	80091c4 <_sbrk_r>
 800905a:	1c43      	adds	r3, r0, #1
 800905c:	d00a      	beq.n	8009074 <sbrk_aligned+0x34>
 800905e:	1cc4      	adds	r4, r0, #3
 8009060:	f024 0403 	bic.w	r4, r4, #3
 8009064:	42a0      	cmp	r0, r4
 8009066:	d007      	beq.n	8009078 <sbrk_aligned+0x38>
 8009068:	1a21      	subs	r1, r4, r0
 800906a:	4628      	mov	r0, r5
 800906c:	f000 f8aa 	bl	80091c4 <_sbrk_r>
 8009070:	3001      	adds	r0, #1
 8009072:	d101      	bne.n	8009078 <sbrk_aligned+0x38>
 8009074:	f04f 34ff 	mov.w	r4, #4294967295
 8009078:	4620      	mov	r0, r4
 800907a:	bd70      	pop	{r4, r5, r6, pc}
 800907c:	20001fd4 	.word	0x20001fd4

08009080 <_malloc_r>:
 8009080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009084:	1ccd      	adds	r5, r1, #3
 8009086:	f025 0503 	bic.w	r5, r5, #3
 800908a:	3508      	adds	r5, #8
 800908c:	2d0c      	cmp	r5, #12
 800908e:	bf38      	it	cc
 8009090:	250c      	movcc	r5, #12
 8009092:	2d00      	cmp	r5, #0
 8009094:	4607      	mov	r7, r0
 8009096:	db01      	blt.n	800909c <_malloc_r+0x1c>
 8009098:	42a9      	cmp	r1, r5
 800909a:	d905      	bls.n	80090a8 <_malloc_r+0x28>
 800909c:	230c      	movs	r3, #12
 800909e:	603b      	str	r3, [r7, #0]
 80090a0:	2600      	movs	r6, #0
 80090a2:	4630      	mov	r0, r6
 80090a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a8:	4e2e      	ldr	r6, [pc, #184]	; (8009164 <_malloc_r+0xe4>)
 80090aa:	f000 f9b3 	bl	8009414 <__malloc_lock>
 80090ae:	6833      	ldr	r3, [r6, #0]
 80090b0:	461c      	mov	r4, r3
 80090b2:	bb34      	cbnz	r4, 8009102 <_malloc_r+0x82>
 80090b4:	4629      	mov	r1, r5
 80090b6:	4638      	mov	r0, r7
 80090b8:	f7ff ffc2 	bl	8009040 <sbrk_aligned>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	4604      	mov	r4, r0
 80090c0:	d14d      	bne.n	800915e <_malloc_r+0xde>
 80090c2:	6834      	ldr	r4, [r6, #0]
 80090c4:	4626      	mov	r6, r4
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	d140      	bne.n	800914c <_malloc_r+0xcc>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	4631      	mov	r1, r6
 80090ce:	4638      	mov	r0, r7
 80090d0:	eb04 0803 	add.w	r8, r4, r3
 80090d4:	f000 f876 	bl	80091c4 <_sbrk_r>
 80090d8:	4580      	cmp	r8, r0
 80090da:	d13a      	bne.n	8009152 <_malloc_r+0xd2>
 80090dc:	6821      	ldr	r1, [r4, #0]
 80090de:	3503      	adds	r5, #3
 80090e0:	1a6d      	subs	r5, r5, r1
 80090e2:	f025 0503 	bic.w	r5, r5, #3
 80090e6:	3508      	adds	r5, #8
 80090e8:	2d0c      	cmp	r5, #12
 80090ea:	bf38      	it	cc
 80090ec:	250c      	movcc	r5, #12
 80090ee:	4629      	mov	r1, r5
 80090f0:	4638      	mov	r0, r7
 80090f2:	f7ff ffa5 	bl	8009040 <sbrk_aligned>
 80090f6:	3001      	adds	r0, #1
 80090f8:	d02b      	beq.n	8009152 <_malloc_r+0xd2>
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	442b      	add	r3, r5
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	e00e      	b.n	8009120 <_malloc_r+0xa0>
 8009102:	6822      	ldr	r2, [r4, #0]
 8009104:	1b52      	subs	r2, r2, r5
 8009106:	d41e      	bmi.n	8009146 <_malloc_r+0xc6>
 8009108:	2a0b      	cmp	r2, #11
 800910a:	d916      	bls.n	800913a <_malloc_r+0xba>
 800910c:	1961      	adds	r1, r4, r5
 800910e:	42a3      	cmp	r3, r4
 8009110:	6025      	str	r5, [r4, #0]
 8009112:	bf18      	it	ne
 8009114:	6059      	strne	r1, [r3, #4]
 8009116:	6863      	ldr	r3, [r4, #4]
 8009118:	bf08      	it	eq
 800911a:	6031      	streq	r1, [r6, #0]
 800911c:	5162      	str	r2, [r4, r5]
 800911e:	604b      	str	r3, [r1, #4]
 8009120:	4638      	mov	r0, r7
 8009122:	f104 060b 	add.w	r6, r4, #11
 8009126:	f000 f97b 	bl	8009420 <__malloc_unlock>
 800912a:	f026 0607 	bic.w	r6, r6, #7
 800912e:	1d23      	adds	r3, r4, #4
 8009130:	1af2      	subs	r2, r6, r3
 8009132:	d0b6      	beq.n	80090a2 <_malloc_r+0x22>
 8009134:	1b9b      	subs	r3, r3, r6
 8009136:	50a3      	str	r3, [r4, r2]
 8009138:	e7b3      	b.n	80090a2 <_malloc_r+0x22>
 800913a:	6862      	ldr	r2, [r4, #4]
 800913c:	42a3      	cmp	r3, r4
 800913e:	bf0c      	ite	eq
 8009140:	6032      	streq	r2, [r6, #0]
 8009142:	605a      	strne	r2, [r3, #4]
 8009144:	e7ec      	b.n	8009120 <_malloc_r+0xa0>
 8009146:	4623      	mov	r3, r4
 8009148:	6864      	ldr	r4, [r4, #4]
 800914a:	e7b2      	b.n	80090b2 <_malloc_r+0x32>
 800914c:	4634      	mov	r4, r6
 800914e:	6876      	ldr	r6, [r6, #4]
 8009150:	e7b9      	b.n	80090c6 <_malloc_r+0x46>
 8009152:	230c      	movs	r3, #12
 8009154:	603b      	str	r3, [r7, #0]
 8009156:	4638      	mov	r0, r7
 8009158:	f000 f962 	bl	8009420 <__malloc_unlock>
 800915c:	e7a1      	b.n	80090a2 <_malloc_r+0x22>
 800915e:	6025      	str	r5, [r4, #0]
 8009160:	e7de      	b.n	8009120 <_malloc_r+0xa0>
 8009162:	bf00      	nop
 8009164:	20001fd0 	.word	0x20001fd0

08009168 <iprintf>:
 8009168:	b40f      	push	{r0, r1, r2, r3}
 800916a:	4b0a      	ldr	r3, [pc, #40]	; (8009194 <iprintf+0x2c>)
 800916c:	b513      	push	{r0, r1, r4, lr}
 800916e:	681c      	ldr	r4, [r3, #0]
 8009170:	b124      	cbz	r4, 800917c <iprintf+0x14>
 8009172:	69a3      	ldr	r3, [r4, #24]
 8009174:	b913      	cbnz	r3, 800917c <iprintf+0x14>
 8009176:	4620      	mov	r0, r4
 8009178:	f000 f8ac 	bl	80092d4 <__sinit>
 800917c:	ab05      	add	r3, sp, #20
 800917e:	9a04      	ldr	r2, [sp, #16]
 8009180:	68a1      	ldr	r1, [r4, #8]
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	4620      	mov	r0, r4
 8009186:	f000 fad7 	bl	8009738 <_vfiprintf_r>
 800918a:	b002      	add	sp, #8
 800918c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009190:	b004      	add	sp, #16
 8009192:	4770      	bx	lr
 8009194:	200000fc 	.word	0x200000fc

08009198 <putchar>:
 8009198:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <putchar+0x28>)
 800919a:	b513      	push	{r0, r1, r4, lr}
 800919c:	681c      	ldr	r4, [r3, #0]
 800919e:	4601      	mov	r1, r0
 80091a0:	b134      	cbz	r4, 80091b0 <putchar+0x18>
 80091a2:	69a3      	ldr	r3, [r4, #24]
 80091a4:	b923      	cbnz	r3, 80091b0 <putchar+0x18>
 80091a6:	9001      	str	r0, [sp, #4]
 80091a8:	4620      	mov	r0, r4
 80091aa:	f000 f893 	bl	80092d4 <__sinit>
 80091ae:	9901      	ldr	r1, [sp, #4]
 80091b0:	68a2      	ldr	r2, [r4, #8]
 80091b2:	4620      	mov	r0, r4
 80091b4:	b002      	add	sp, #8
 80091b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ba:	f000 bd81 	b.w	8009cc0 <_putc_r>
 80091be:	bf00      	nop
 80091c0:	200000fc 	.word	0x200000fc

080091c4 <_sbrk_r>:
 80091c4:	b538      	push	{r3, r4, r5, lr}
 80091c6:	4d06      	ldr	r5, [pc, #24]	; (80091e0 <_sbrk_r+0x1c>)
 80091c8:	2300      	movs	r3, #0
 80091ca:	4604      	mov	r4, r0
 80091cc:	4608      	mov	r0, r1
 80091ce:	602b      	str	r3, [r5, #0]
 80091d0:	f7f7 ffb0 	bl	8001134 <_sbrk>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d102      	bne.n	80091de <_sbrk_r+0x1a>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	b103      	cbz	r3, 80091de <_sbrk_r+0x1a>
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	bd38      	pop	{r3, r4, r5, pc}
 80091e0:	20001fdc 	.word	0x20001fdc

080091e4 <siprintf>:
 80091e4:	b40e      	push	{r1, r2, r3}
 80091e6:	b500      	push	{lr}
 80091e8:	b09c      	sub	sp, #112	; 0x70
 80091ea:	ab1d      	add	r3, sp, #116	; 0x74
 80091ec:	9002      	str	r0, [sp, #8]
 80091ee:	9006      	str	r0, [sp, #24]
 80091f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80091f4:	4809      	ldr	r0, [pc, #36]	; (800921c <siprintf+0x38>)
 80091f6:	9107      	str	r1, [sp, #28]
 80091f8:	9104      	str	r1, [sp, #16]
 80091fa:	4909      	ldr	r1, [pc, #36]	; (8009220 <siprintf+0x3c>)
 80091fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009200:	9105      	str	r1, [sp, #20]
 8009202:	6800      	ldr	r0, [r0, #0]
 8009204:	9301      	str	r3, [sp, #4]
 8009206:	a902      	add	r1, sp, #8
 8009208:	f000 f96c 	bl	80094e4 <_svfiprintf_r>
 800920c:	9b02      	ldr	r3, [sp, #8]
 800920e:	2200      	movs	r2, #0
 8009210:	701a      	strb	r2, [r3, #0]
 8009212:	b01c      	add	sp, #112	; 0x70
 8009214:	f85d eb04 	ldr.w	lr, [sp], #4
 8009218:	b003      	add	sp, #12
 800921a:	4770      	bx	lr
 800921c:	200000fc 	.word	0x200000fc
 8009220:	ffff0208 	.word	0xffff0208

08009224 <std>:
 8009224:	2300      	movs	r3, #0
 8009226:	b510      	push	{r4, lr}
 8009228:	4604      	mov	r4, r0
 800922a:	e9c0 3300 	strd	r3, r3, [r0]
 800922e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009232:	6083      	str	r3, [r0, #8]
 8009234:	8181      	strh	r1, [r0, #12]
 8009236:	6643      	str	r3, [r0, #100]	; 0x64
 8009238:	81c2      	strh	r2, [r0, #14]
 800923a:	6183      	str	r3, [r0, #24]
 800923c:	4619      	mov	r1, r3
 800923e:	2208      	movs	r2, #8
 8009240:	305c      	adds	r0, #92	; 0x5c
 8009242:	f7ff fea9 	bl	8008f98 <memset>
 8009246:	4b05      	ldr	r3, [pc, #20]	; (800925c <std+0x38>)
 8009248:	6263      	str	r3, [r4, #36]	; 0x24
 800924a:	4b05      	ldr	r3, [pc, #20]	; (8009260 <std+0x3c>)
 800924c:	62a3      	str	r3, [r4, #40]	; 0x28
 800924e:	4b05      	ldr	r3, [pc, #20]	; (8009264 <std+0x40>)
 8009250:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009252:	4b05      	ldr	r3, [pc, #20]	; (8009268 <std+0x44>)
 8009254:	6224      	str	r4, [r4, #32]
 8009256:	6323      	str	r3, [r4, #48]	; 0x30
 8009258:	bd10      	pop	{r4, pc}
 800925a:	bf00      	nop
 800925c:	08009d51 	.word	0x08009d51
 8009260:	08009d73 	.word	0x08009d73
 8009264:	08009dab 	.word	0x08009dab
 8009268:	08009dcf 	.word	0x08009dcf

0800926c <_cleanup_r>:
 800926c:	4901      	ldr	r1, [pc, #4]	; (8009274 <_cleanup_r+0x8>)
 800926e:	f000 b8af 	b.w	80093d0 <_fwalk_reent>
 8009272:	bf00      	nop
 8009274:	0800a0a9 	.word	0x0800a0a9

08009278 <__sfmoreglue>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	2268      	movs	r2, #104	; 0x68
 800927c:	1e4d      	subs	r5, r1, #1
 800927e:	4355      	muls	r5, r2
 8009280:	460e      	mov	r6, r1
 8009282:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009286:	f7ff fefb 	bl	8009080 <_malloc_r>
 800928a:	4604      	mov	r4, r0
 800928c:	b140      	cbz	r0, 80092a0 <__sfmoreglue+0x28>
 800928e:	2100      	movs	r1, #0
 8009290:	e9c0 1600 	strd	r1, r6, [r0]
 8009294:	300c      	adds	r0, #12
 8009296:	60a0      	str	r0, [r4, #8]
 8009298:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800929c:	f7ff fe7c 	bl	8008f98 <memset>
 80092a0:	4620      	mov	r0, r4
 80092a2:	bd70      	pop	{r4, r5, r6, pc}

080092a4 <__sfp_lock_acquire>:
 80092a4:	4801      	ldr	r0, [pc, #4]	; (80092ac <__sfp_lock_acquire+0x8>)
 80092a6:	f000 b8b3 	b.w	8009410 <__retarget_lock_acquire_recursive>
 80092aa:	bf00      	nop
 80092ac:	20001fd9 	.word	0x20001fd9

080092b0 <__sfp_lock_release>:
 80092b0:	4801      	ldr	r0, [pc, #4]	; (80092b8 <__sfp_lock_release+0x8>)
 80092b2:	f000 b8ae 	b.w	8009412 <__retarget_lock_release_recursive>
 80092b6:	bf00      	nop
 80092b8:	20001fd9 	.word	0x20001fd9

080092bc <__sinit_lock_acquire>:
 80092bc:	4801      	ldr	r0, [pc, #4]	; (80092c4 <__sinit_lock_acquire+0x8>)
 80092be:	f000 b8a7 	b.w	8009410 <__retarget_lock_acquire_recursive>
 80092c2:	bf00      	nop
 80092c4:	20001fda 	.word	0x20001fda

080092c8 <__sinit_lock_release>:
 80092c8:	4801      	ldr	r0, [pc, #4]	; (80092d0 <__sinit_lock_release+0x8>)
 80092ca:	f000 b8a2 	b.w	8009412 <__retarget_lock_release_recursive>
 80092ce:	bf00      	nop
 80092d0:	20001fda 	.word	0x20001fda

080092d4 <__sinit>:
 80092d4:	b510      	push	{r4, lr}
 80092d6:	4604      	mov	r4, r0
 80092d8:	f7ff fff0 	bl	80092bc <__sinit_lock_acquire>
 80092dc:	69a3      	ldr	r3, [r4, #24]
 80092de:	b11b      	cbz	r3, 80092e8 <__sinit+0x14>
 80092e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e4:	f7ff bff0 	b.w	80092c8 <__sinit_lock_release>
 80092e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80092ec:	6523      	str	r3, [r4, #80]	; 0x50
 80092ee:	4b13      	ldr	r3, [pc, #76]	; (800933c <__sinit+0x68>)
 80092f0:	4a13      	ldr	r2, [pc, #76]	; (8009340 <__sinit+0x6c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80092f6:	42a3      	cmp	r3, r4
 80092f8:	bf04      	itt	eq
 80092fa:	2301      	moveq	r3, #1
 80092fc:	61a3      	streq	r3, [r4, #24]
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 f820 	bl	8009344 <__sfp>
 8009304:	6060      	str	r0, [r4, #4]
 8009306:	4620      	mov	r0, r4
 8009308:	f000 f81c 	bl	8009344 <__sfp>
 800930c:	60a0      	str	r0, [r4, #8]
 800930e:	4620      	mov	r0, r4
 8009310:	f000 f818 	bl	8009344 <__sfp>
 8009314:	2200      	movs	r2, #0
 8009316:	60e0      	str	r0, [r4, #12]
 8009318:	2104      	movs	r1, #4
 800931a:	6860      	ldr	r0, [r4, #4]
 800931c:	f7ff ff82 	bl	8009224 <std>
 8009320:	68a0      	ldr	r0, [r4, #8]
 8009322:	2201      	movs	r2, #1
 8009324:	2109      	movs	r1, #9
 8009326:	f7ff ff7d 	bl	8009224 <std>
 800932a:	68e0      	ldr	r0, [r4, #12]
 800932c:	2202      	movs	r2, #2
 800932e:	2112      	movs	r1, #18
 8009330:	f7ff ff78 	bl	8009224 <std>
 8009334:	2301      	movs	r3, #1
 8009336:	61a3      	str	r3, [r4, #24]
 8009338:	e7d2      	b.n	80092e0 <__sinit+0xc>
 800933a:	bf00      	nop
 800933c:	0800a410 	.word	0x0800a410
 8009340:	0800926d 	.word	0x0800926d

08009344 <__sfp>:
 8009344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009346:	4607      	mov	r7, r0
 8009348:	f7ff ffac 	bl	80092a4 <__sfp_lock_acquire>
 800934c:	4b1e      	ldr	r3, [pc, #120]	; (80093c8 <__sfp+0x84>)
 800934e:	681e      	ldr	r6, [r3, #0]
 8009350:	69b3      	ldr	r3, [r6, #24]
 8009352:	b913      	cbnz	r3, 800935a <__sfp+0x16>
 8009354:	4630      	mov	r0, r6
 8009356:	f7ff ffbd 	bl	80092d4 <__sinit>
 800935a:	3648      	adds	r6, #72	; 0x48
 800935c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009360:	3b01      	subs	r3, #1
 8009362:	d503      	bpl.n	800936c <__sfp+0x28>
 8009364:	6833      	ldr	r3, [r6, #0]
 8009366:	b30b      	cbz	r3, 80093ac <__sfp+0x68>
 8009368:	6836      	ldr	r6, [r6, #0]
 800936a:	e7f7      	b.n	800935c <__sfp+0x18>
 800936c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009370:	b9d5      	cbnz	r5, 80093a8 <__sfp+0x64>
 8009372:	4b16      	ldr	r3, [pc, #88]	; (80093cc <__sfp+0x88>)
 8009374:	60e3      	str	r3, [r4, #12]
 8009376:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800937a:	6665      	str	r5, [r4, #100]	; 0x64
 800937c:	f000 f847 	bl	800940e <__retarget_lock_init_recursive>
 8009380:	f7ff ff96 	bl	80092b0 <__sfp_lock_release>
 8009384:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009388:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800938c:	6025      	str	r5, [r4, #0]
 800938e:	61a5      	str	r5, [r4, #24]
 8009390:	2208      	movs	r2, #8
 8009392:	4629      	mov	r1, r5
 8009394:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009398:	f7ff fdfe 	bl	8008f98 <memset>
 800939c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093a4:	4620      	mov	r0, r4
 80093a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a8:	3468      	adds	r4, #104	; 0x68
 80093aa:	e7d9      	b.n	8009360 <__sfp+0x1c>
 80093ac:	2104      	movs	r1, #4
 80093ae:	4638      	mov	r0, r7
 80093b0:	f7ff ff62 	bl	8009278 <__sfmoreglue>
 80093b4:	4604      	mov	r4, r0
 80093b6:	6030      	str	r0, [r6, #0]
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d1d5      	bne.n	8009368 <__sfp+0x24>
 80093bc:	f7ff ff78 	bl	80092b0 <__sfp_lock_release>
 80093c0:	230c      	movs	r3, #12
 80093c2:	603b      	str	r3, [r7, #0]
 80093c4:	e7ee      	b.n	80093a4 <__sfp+0x60>
 80093c6:	bf00      	nop
 80093c8:	0800a410 	.word	0x0800a410
 80093cc:	ffff0001 	.word	0xffff0001

080093d0 <_fwalk_reent>:
 80093d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093d4:	4606      	mov	r6, r0
 80093d6:	4688      	mov	r8, r1
 80093d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80093dc:	2700      	movs	r7, #0
 80093de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093e2:	f1b9 0901 	subs.w	r9, r9, #1
 80093e6:	d505      	bpl.n	80093f4 <_fwalk_reent+0x24>
 80093e8:	6824      	ldr	r4, [r4, #0]
 80093ea:	2c00      	cmp	r4, #0
 80093ec:	d1f7      	bne.n	80093de <_fwalk_reent+0xe>
 80093ee:	4638      	mov	r0, r7
 80093f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093f4:	89ab      	ldrh	r3, [r5, #12]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d907      	bls.n	800940a <_fwalk_reent+0x3a>
 80093fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80093fe:	3301      	adds	r3, #1
 8009400:	d003      	beq.n	800940a <_fwalk_reent+0x3a>
 8009402:	4629      	mov	r1, r5
 8009404:	4630      	mov	r0, r6
 8009406:	47c0      	blx	r8
 8009408:	4307      	orrs	r7, r0
 800940a:	3568      	adds	r5, #104	; 0x68
 800940c:	e7e9      	b.n	80093e2 <_fwalk_reent+0x12>

0800940e <__retarget_lock_init_recursive>:
 800940e:	4770      	bx	lr

08009410 <__retarget_lock_acquire_recursive>:
 8009410:	4770      	bx	lr

08009412 <__retarget_lock_release_recursive>:
 8009412:	4770      	bx	lr

08009414 <__malloc_lock>:
 8009414:	4801      	ldr	r0, [pc, #4]	; (800941c <__malloc_lock+0x8>)
 8009416:	f7ff bffb 	b.w	8009410 <__retarget_lock_acquire_recursive>
 800941a:	bf00      	nop
 800941c:	20001fd8 	.word	0x20001fd8

08009420 <__malloc_unlock>:
 8009420:	4801      	ldr	r0, [pc, #4]	; (8009428 <__malloc_unlock+0x8>)
 8009422:	f7ff bff6 	b.w	8009412 <__retarget_lock_release_recursive>
 8009426:	bf00      	nop
 8009428:	20001fd8 	.word	0x20001fd8

0800942c <__ssputs_r>:
 800942c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009430:	688e      	ldr	r6, [r1, #8]
 8009432:	429e      	cmp	r6, r3
 8009434:	4682      	mov	sl, r0
 8009436:	460c      	mov	r4, r1
 8009438:	4690      	mov	r8, r2
 800943a:	461f      	mov	r7, r3
 800943c:	d838      	bhi.n	80094b0 <__ssputs_r+0x84>
 800943e:	898a      	ldrh	r2, [r1, #12]
 8009440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009444:	d032      	beq.n	80094ac <__ssputs_r+0x80>
 8009446:	6825      	ldr	r5, [r4, #0]
 8009448:	6909      	ldr	r1, [r1, #16]
 800944a:	eba5 0901 	sub.w	r9, r5, r1
 800944e:	6965      	ldr	r5, [r4, #20]
 8009450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009458:	3301      	adds	r3, #1
 800945a:	444b      	add	r3, r9
 800945c:	106d      	asrs	r5, r5, #1
 800945e:	429d      	cmp	r5, r3
 8009460:	bf38      	it	cc
 8009462:	461d      	movcc	r5, r3
 8009464:	0553      	lsls	r3, r2, #21
 8009466:	d531      	bpl.n	80094cc <__ssputs_r+0xa0>
 8009468:	4629      	mov	r1, r5
 800946a:	f7ff fe09 	bl	8009080 <_malloc_r>
 800946e:	4606      	mov	r6, r0
 8009470:	b950      	cbnz	r0, 8009488 <__ssputs_r+0x5c>
 8009472:	230c      	movs	r3, #12
 8009474:	f8ca 3000 	str.w	r3, [sl]
 8009478:	89a3      	ldrh	r3, [r4, #12]
 800947a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800947e:	81a3      	strh	r3, [r4, #12]
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009488:	6921      	ldr	r1, [r4, #16]
 800948a:	464a      	mov	r2, r9
 800948c:	f000 fec0 	bl	800a210 <memcpy>
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800949a:	81a3      	strh	r3, [r4, #12]
 800949c:	6126      	str	r6, [r4, #16]
 800949e:	6165      	str	r5, [r4, #20]
 80094a0:	444e      	add	r6, r9
 80094a2:	eba5 0509 	sub.w	r5, r5, r9
 80094a6:	6026      	str	r6, [r4, #0]
 80094a8:	60a5      	str	r5, [r4, #8]
 80094aa:	463e      	mov	r6, r7
 80094ac:	42be      	cmp	r6, r7
 80094ae:	d900      	bls.n	80094b2 <__ssputs_r+0x86>
 80094b0:	463e      	mov	r6, r7
 80094b2:	6820      	ldr	r0, [r4, #0]
 80094b4:	4632      	mov	r2, r6
 80094b6:	4641      	mov	r1, r8
 80094b8:	f000 feb8 	bl	800a22c <memmove>
 80094bc:	68a3      	ldr	r3, [r4, #8]
 80094be:	1b9b      	subs	r3, r3, r6
 80094c0:	60a3      	str	r3, [r4, #8]
 80094c2:	6823      	ldr	r3, [r4, #0]
 80094c4:	4433      	add	r3, r6
 80094c6:	6023      	str	r3, [r4, #0]
 80094c8:	2000      	movs	r0, #0
 80094ca:	e7db      	b.n	8009484 <__ssputs_r+0x58>
 80094cc:	462a      	mov	r2, r5
 80094ce:	f000 fec7 	bl	800a260 <_realloc_r>
 80094d2:	4606      	mov	r6, r0
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d1e1      	bne.n	800949c <__ssputs_r+0x70>
 80094d8:	6921      	ldr	r1, [r4, #16]
 80094da:	4650      	mov	r0, sl
 80094dc:	f7ff fd64 	bl	8008fa8 <_free_r>
 80094e0:	e7c7      	b.n	8009472 <__ssputs_r+0x46>
	...

080094e4 <_svfiprintf_r>:
 80094e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	4698      	mov	r8, r3
 80094ea:	898b      	ldrh	r3, [r1, #12]
 80094ec:	061b      	lsls	r3, r3, #24
 80094ee:	b09d      	sub	sp, #116	; 0x74
 80094f0:	4607      	mov	r7, r0
 80094f2:	460d      	mov	r5, r1
 80094f4:	4614      	mov	r4, r2
 80094f6:	d50e      	bpl.n	8009516 <_svfiprintf_r+0x32>
 80094f8:	690b      	ldr	r3, [r1, #16]
 80094fa:	b963      	cbnz	r3, 8009516 <_svfiprintf_r+0x32>
 80094fc:	2140      	movs	r1, #64	; 0x40
 80094fe:	f7ff fdbf 	bl	8009080 <_malloc_r>
 8009502:	6028      	str	r0, [r5, #0]
 8009504:	6128      	str	r0, [r5, #16]
 8009506:	b920      	cbnz	r0, 8009512 <_svfiprintf_r+0x2e>
 8009508:	230c      	movs	r3, #12
 800950a:	603b      	str	r3, [r7, #0]
 800950c:	f04f 30ff 	mov.w	r0, #4294967295
 8009510:	e0d1      	b.n	80096b6 <_svfiprintf_r+0x1d2>
 8009512:	2340      	movs	r3, #64	; 0x40
 8009514:	616b      	str	r3, [r5, #20]
 8009516:	2300      	movs	r3, #0
 8009518:	9309      	str	r3, [sp, #36]	; 0x24
 800951a:	2320      	movs	r3, #32
 800951c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009520:	f8cd 800c 	str.w	r8, [sp, #12]
 8009524:	2330      	movs	r3, #48	; 0x30
 8009526:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80096d0 <_svfiprintf_r+0x1ec>
 800952a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800952e:	f04f 0901 	mov.w	r9, #1
 8009532:	4623      	mov	r3, r4
 8009534:	469a      	mov	sl, r3
 8009536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800953a:	b10a      	cbz	r2, 8009540 <_svfiprintf_r+0x5c>
 800953c:	2a25      	cmp	r2, #37	; 0x25
 800953e:	d1f9      	bne.n	8009534 <_svfiprintf_r+0x50>
 8009540:	ebba 0b04 	subs.w	fp, sl, r4
 8009544:	d00b      	beq.n	800955e <_svfiprintf_r+0x7a>
 8009546:	465b      	mov	r3, fp
 8009548:	4622      	mov	r2, r4
 800954a:	4629      	mov	r1, r5
 800954c:	4638      	mov	r0, r7
 800954e:	f7ff ff6d 	bl	800942c <__ssputs_r>
 8009552:	3001      	adds	r0, #1
 8009554:	f000 80aa 	beq.w	80096ac <_svfiprintf_r+0x1c8>
 8009558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800955a:	445a      	add	r2, fp
 800955c:	9209      	str	r2, [sp, #36]	; 0x24
 800955e:	f89a 3000 	ldrb.w	r3, [sl]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 80a2 	beq.w	80096ac <_svfiprintf_r+0x1c8>
 8009568:	2300      	movs	r3, #0
 800956a:	f04f 32ff 	mov.w	r2, #4294967295
 800956e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009572:	f10a 0a01 	add.w	sl, sl, #1
 8009576:	9304      	str	r3, [sp, #16]
 8009578:	9307      	str	r3, [sp, #28]
 800957a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800957e:	931a      	str	r3, [sp, #104]	; 0x68
 8009580:	4654      	mov	r4, sl
 8009582:	2205      	movs	r2, #5
 8009584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009588:	4851      	ldr	r0, [pc, #324]	; (80096d0 <_svfiprintf_r+0x1ec>)
 800958a:	f7f6 fe39 	bl	8000200 <memchr>
 800958e:	9a04      	ldr	r2, [sp, #16]
 8009590:	b9d8      	cbnz	r0, 80095ca <_svfiprintf_r+0xe6>
 8009592:	06d0      	lsls	r0, r2, #27
 8009594:	bf44      	itt	mi
 8009596:	2320      	movmi	r3, #32
 8009598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800959c:	0711      	lsls	r1, r2, #28
 800959e:	bf44      	itt	mi
 80095a0:	232b      	movmi	r3, #43	; 0x2b
 80095a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a6:	f89a 3000 	ldrb.w	r3, [sl]
 80095aa:	2b2a      	cmp	r3, #42	; 0x2a
 80095ac:	d015      	beq.n	80095da <_svfiprintf_r+0xf6>
 80095ae:	9a07      	ldr	r2, [sp, #28]
 80095b0:	4654      	mov	r4, sl
 80095b2:	2000      	movs	r0, #0
 80095b4:	f04f 0c0a 	mov.w	ip, #10
 80095b8:	4621      	mov	r1, r4
 80095ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095be:	3b30      	subs	r3, #48	; 0x30
 80095c0:	2b09      	cmp	r3, #9
 80095c2:	d94e      	bls.n	8009662 <_svfiprintf_r+0x17e>
 80095c4:	b1b0      	cbz	r0, 80095f4 <_svfiprintf_r+0x110>
 80095c6:	9207      	str	r2, [sp, #28]
 80095c8:	e014      	b.n	80095f4 <_svfiprintf_r+0x110>
 80095ca:	eba0 0308 	sub.w	r3, r0, r8
 80095ce:	fa09 f303 	lsl.w	r3, r9, r3
 80095d2:	4313      	orrs	r3, r2
 80095d4:	9304      	str	r3, [sp, #16]
 80095d6:	46a2      	mov	sl, r4
 80095d8:	e7d2      	b.n	8009580 <_svfiprintf_r+0x9c>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	1d19      	adds	r1, r3, #4
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	9103      	str	r1, [sp, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	bfbb      	ittet	lt
 80095e6:	425b      	neglt	r3, r3
 80095e8:	f042 0202 	orrlt.w	r2, r2, #2
 80095ec:	9307      	strge	r3, [sp, #28]
 80095ee:	9307      	strlt	r3, [sp, #28]
 80095f0:	bfb8      	it	lt
 80095f2:	9204      	strlt	r2, [sp, #16]
 80095f4:	7823      	ldrb	r3, [r4, #0]
 80095f6:	2b2e      	cmp	r3, #46	; 0x2e
 80095f8:	d10c      	bne.n	8009614 <_svfiprintf_r+0x130>
 80095fa:	7863      	ldrb	r3, [r4, #1]
 80095fc:	2b2a      	cmp	r3, #42	; 0x2a
 80095fe:	d135      	bne.n	800966c <_svfiprintf_r+0x188>
 8009600:	9b03      	ldr	r3, [sp, #12]
 8009602:	1d1a      	adds	r2, r3, #4
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	9203      	str	r2, [sp, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	bfb8      	it	lt
 800960c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009610:	3402      	adds	r4, #2
 8009612:	9305      	str	r3, [sp, #20]
 8009614:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096e0 <_svfiprintf_r+0x1fc>
 8009618:	7821      	ldrb	r1, [r4, #0]
 800961a:	2203      	movs	r2, #3
 800961c:	4650      	mov	r0, sl
 800961e:	f7f6 fdef 	bl	8000200 <memchr>
 8009622:	b140      	cbz	r0, 8009636 <_svfiprintf_r+0x152>
 8009624:	2340      	movs	r3, #64	; 0x40
 8009626:	eba0 000a 	sub.w	r0, r0, sl
 800962a:	fa03 f000 	lsl.w	r0, r3, r0
 800962e:	9b04      	ldr	r3, [sp, #16]
 8009630:	4303      	orrs	r3, r0
 8009632:	3401      	adds	r4, #1
 8009634:	9304      	str	r3, [sp, #16]
 8009636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963a:	4826      	ldr	r0, [pc, #152]	; (80096d4 <_svfiprintf_r+0x1f0>)
 800963c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009640:	2206      	movs	r2, #6
 8009642:	f7f6 fddd 	bl	8000200 <memchr>
 8009646:	2800      	cmp	r0, #0
 8009648:	d038      	beq.n	80096bc <_svfiprintf_r+0x1d8>
 800964a:	4b23      	ldr	r3, [pc, #140]	; (80096d8 <_svfiprintf_r+0x1f4>)
 800964c:	bb1b      	cbnz	r3, 8009696 <_svfiprintf_r+0x1b2>
 800964e:	9b03      	ldr	r3, [sp, #12]
 8009650:	3307      	adds	r3, #7
 8009652:	f023 0307 	bic.w	r3, r3, #7
 8009656:	3308      	adds	r3, #8
 8009658:	9303      	str	r3, [sp, #12]
 800965a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965c:	4433      	add	r3, r6
 800965e:	9309      	str	r3, [sp, #36]	; 0x24
 8009660:	e767      	b.n	8009532 <_svfiprintf_r+0x4e>
 8009662:	fb0c 3202 	mla	r2, ip, r2, r3
 8009666:	460c      	mov	r4, r1
 8009668:	2001      	movs	r0, #1
 800966a:	e7a5      	b.n	80095b8 <_svfiprintf_r+0xd4>
 800966c:	2300      	movs	r3, #0
 800966e:	3401      	adds	r4, #1
 8009670:	9305      	str	r3, [sp, #20]
 8009672:	4619      	mov	r1, r3
 8009674:	f04f 0c0a 	mov.w	ip, #10
 8009678:	4620      	mov	r0, r4
 800967a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800967e:	3a30      	subs	r2, #48	; 0x30
 8009680:	2a09      	cmp	r2, #9
 8009682:	d903      	bls.n	800968c <_svfiprintf_r+0x1a8>
 8009684:	2b00      	cmp	r3, #0
 8009686:	d0c5      	beq.n	8009614 <_svfiprintf_r+0x130>
 8009688:	9105      	str	r1, [sp, #20]
 800968a:	e7c3      	b.n	8009614 <_svfiprintf_r+0x130>
 800968c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009690:	4604      	mov	r4, r0
 8009692:	2301      	movs	r3, #1
 8009694:	e7f0      	b.n	8009678 <_svfiprintf_r+0x194>
 8009696:	ab03      	add	r3, sp, #12
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	462a      	mov	r2, r5
 800969c:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <_svfiprintf_r+0x1f8>)
 800969e:	a904      	add	r1, sp, #16
 80096a0:	4638      	mov	r0, r7
 80096a2:	f3af 8000 	nop.w
 80096a6:	1c42      	adds	r2, r0, #1
 80096a8:	4606      	mov	r6, r0
 80096aa:	d1d6      	bne.n	800965a <_svfiprintf_r+0x176>
 80096ac:	89ab      	ldrh	r3, [r5, #12]
 80096ae:	065b      	lsls	r3, r3, #25
 80096b0:	f53f af2c 	bmi.w	800950c <_svfiprintf_r+0x28>
 80096b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096b6:	b01d      	add	sp, #116	; 0x74
 80096b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096bc:	ab03      	add	r3, sp, #12
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	462a      	mov	r2, r5
 80096c2:	4b06      	ldr	r3, [pc, #24]	; (80096dc <_svfiprintf_r+0x1f8>)
 80096c4:	a904      	add	r1, sp, #16
 80096c6:	4638      	mov	r0, r7
 80096c8:	f000 f9d4 	bl	8009a74 <_printf_i>
 80096cc:	e7eb      	b.n	80096a6 <_svfiprintf_r+0x1c2>
 80096ce:	bf00      	nop
 80096d0:	0800a474 	.word	0x0800a474
 80096d4:	0800a47e 	.word	0x0800a47e
 80096d8:	00000000 	.word	0x00000000
 80096dc:	0800942d 	.word	0x0800942d
 80096e0:	0800a47a 	.word	0x0800a47a

080096e4 <__sfputc_r>:
 80096e4:	6893      	ldr	r3, [r2, #8]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	b410      	push	{r4}
 80096ec:	6093      	str	r3, [r2, #8]
 80096ee:	da08      	bge.n	8009702 <__sfputc_r+0x1e>
 80096f0:	6994      	ldr	r4, [r2, #24]
 80096f2:	42a3      	cmp	r3, r4
 80096f4:	db01      	blt.n	80096fa <__sfputc_r+0x16>
 80096f6:	290a      	cmp	r1, #10
 80096f8:	d103      	bne.n	8009702 <__sfputc_r+0x1e>
 80096fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096fe:	f000 bb6b 	b.w	8009dd8 <__swbuf_r>
 8009702:	6813      	ldr	r3, [r2, #0]
 8009704:	1c58      	adds	r0, r3, #1
 8009706:	6010      	str	r0, [r2, #0]
 8009708:	7019      	strb	r1, [r3, #0]
 800970a:	4608      	mov	r0, r1
 800970c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009710:	4770      	bx	lr

08009712 <__sfputs_r>:
 8009712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009714:	4606      	mov	r6, r0
 8009716:	460f      	mov	r7, r1
 8009718:	4614      	mov	r4, r2
 800971a:	18d5      	adds	r5, r2, r3
 800971c:	42ac      	cmp	r4, r5
 800971e:	d101      	bne.n	8009724 <__sfputs_r+0x12>
 8009720:	2000      	movs	r0, #0
 8009722:	e007      	b.n	8009734 <__sfputs_r+0x22>
 8009724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009728:	463a      	mov	r2, r7
 800972a:	4630      	mov	r0, r6
 800972c:	f7ff ffda 	bl	80096e4 <__sfputc_r>
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	d1f3      	bne.n	800971c <__sfputs_r+0xa>
 8009734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009738 <_vfiprintf_r>:
 8009738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	460d      	mov	r5, r1
 800973e:	b09d      	sub	sp, #116	; 0x74
 8009740:	4614      	mov	r4, r2
 8009742:	4698      	mov	r8, r3
 8009744:	4606      	mov	r6, r0
 8009746:	b118      	cbz	r0, 8009750 <_vfiprintf_r+0x18>
 8009748:	6983      	ldr	r3, [r0, #24]
 800974a:	b90b      	cbnz	r3, 8009750 <_vfiprintf_r+0x18>
 800974c:	f7ff fdc2 	bl	80092d4 <__sinit>
 8009750:	4b89      	ldr	r3, [pc, #548]	; (8009978 <_vfiprintf_r+0x240>)
 8009752:	429d      	cmp	r5, r3
 8009754:	d11b      	bne.n	800978e <_vfiprintf_r+0x56>
 8009756:	6875      	ldr	r5, [r6, #4]
 8009758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800975a:	07d9      	lsls	r1, r3, #31
 800975c:	d405      	bmi.n	800976a <_vfiprintf_r+0x32>
 800975e:	89ab      	ldrh	r3, [r5, #12]
 8009760:	059a      	lsls	r2, r3, #22
 8009762:	d402      	bmi.n	800976a <_vfiprintf_r+0x32>
 8009764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009766:	f7ff fe53 	bl	8009410 <__retarget_lock_acquire_recursive>
 800976a:	89ab      	ldrh	r3, [r5, #12]
 800976c:	071b      	lsls	r3, r3, #28
 800976e:	d501      	bpl.n	8009774 <_vfiprintf_r+0x3c>
 8009770:	692b      	ldr	r3, [r5, #16]
 8009772:	b9eb      	cbnz	r3, 80097b0 <_vfiprintf_r+0x78>
 8009774:	4629      	mov	r1, r5
 8009776:	4630      	mov	r0, r6
 8009778:	f000 fb92 	bl	8009ea0 <__swsetup_r>
 800977c:	b1c0      	cbz	r0, 80097b0 <_vfiprintf_r+0x78>
 800977e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009780:	07dc      	lsls	r4, r3, #31
 8009782:	d50e      	bpl.n	80097a2 <_vfiprintf_r+0x6a>
 8009784:	f04f 30ff 	mov.w	r0, #4294967295
 8009788:	b01d      	add	sp, #116	; 0x74
 800978a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978e:	4b7b      	ldr	r3, [pc, #492]	; (800997c <_vfiprintf_r+0x244>)
 8009790:	429d      	cmp	r5, r3
 8009792:	d101      	bne.n	8009798 <_vfiprintf_r+0x60>
 8009794:	68b5      	ldr	r5, [r6, #8]
 8009796:	e7df      	b.n	8009758 <_vfiprintf_r+0x20>
 8009798:	4b79      	ldr	r3, [pc, #484]	; (8009980 <_vfiprintf_r+0x248>)
 800979a:	429d      	cmp	r5, r3
 800979c:	bf08      	it	eq
 800979e:	68f5      	ldreq	r5, [r6, #12]
 80097a0:	e7da      	b.n	8009758 <_vfiprintf_r+0x20>
 80097a2:	89ab      	ldrh	r3, [r5, #12]
 80097a4:	0598      	lsls	r0, r3, #22
 80097a6:	d4ed      	bmi.n	8009784 <_vfiprintf_r+0x4c>
 80097a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097aa:	f7ff fe32 	bl	8009412 <__retarget_lock_release_recursive>
 80097ae:	e7e9      	b.n	8009784 <_vfiprintf_r+0x4c>
 80097b0:	2300      	movs	r3, #0
 80097b2:	9309      	str	r3, [sp, #36]	; 0x24
 80097b4:	2320      	movs	r3, #32
 80097b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80097be:	2330      	movs	r3, #48	; 0x30
 80097c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009984 <_vfiprintf_r+0x24c>
 80097c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097c8:	f04f 0901 	mov.w	r9, #1
 80097cc:	4623      	mov	r3, r4
 80097ce:	469a      	mov	sl, r3
 80097d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097d4:	b10a      	cbz	r2, 80097da <_vfiprintf_r+0xa2>
 80097d6:	2a25      	cmp	r2, #37	; 0x25
 80097d8:	d1f9      	bne.n	80097ce <_vfiprintf_r+0x96>
 80097da:	ebba 0b04 	subs.w	fp, sl, r4
 80097de:	d00b      	beq.n	80097f8 <_vfiprintf_r+0xc0>
 80097e0:	465b      	mov	r3, fp
 80097e2:	4622      	mov	r2, r4
 80097e4:	4629      	mov	r1, r5
 80097e6:	4630      	mov	r0, r6
 80097e8:	f7ff ff93 	bl	8009712 <__sfputs_r>
 80097ec:	3001      	adds	r0, #1
 80097ee:	f000 80aa 	beq.w	8009946 <_vfiprintf_r+0x20e>
 80097f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097f4:	445a      	add	r2, fp
 80097f6:	9209      	str	r2, [sp, #36]	; 0x24
 80097f8:	f89a 3000 	ldrb.w	r3, [sl]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 80a2 	beq.w	8009946 <_vfiprintf_r+0x20e>
 8009802:	2300      	movs	r3, #0
 8009804:	f04f 32ff 	mov.w	r2, #4294967295
 8009808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800980c:	f10a 0a01 	add.w	sl, sl, #1
 8009810:	9304      	str	r3, [sp, #16]
 8009812:	9307      	str	r3, [sp, #28]
 8009814:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009818:	931a      	str	r3, [sp, #104]	; 0x68
 800981a:	4654      	mov	r4, sl
 800981c:	2205      	movs	r2, #5
 800981e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009822:	4858      	ldr	r0, [pc, #352]	; (8009984 <_vfiprintf_r+0x24c>)
 8009824:	f7f6 fcec 	bl	8000200 <memchr>
 8009828:	9a04      	ldr	r2, [sp, #16]
 800982a:	b9d8      	cbnz	r0, 8009864 <_vfiprintf_r+0x12c>
 800982c:	06d1      	lsls	r1, r2, #27
 800982e:	bf44      	itt	mi
 8009830:	2320      	movmi	r3, #32
 8009832:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009836:	0713      	lsls	r3, r2, #28
 8009838:	bf44      	itt	mi
 800983a:	232b      	movmi	r3, #43	; 0x2b
 800983c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009840:	f89a 3000 	ldrb.w	r3, [sl]
 8009844:	2b2a      	cmp	r3, #42	; 0x2a
 8009846:	d015      	beq.n	8009874 <_vfiprintf_r+0x13c>
 8009848:	9a07      	ldr	r2, [sp, #28]
 800984a:	4654      	mov	r4, sl
 800984c:	2000      	movs	r0, #0
 800984e:	f04f 0c0a 	mov.w	ip, #10
 8009852:	4621      	mov	r1, r4
 8009854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009858:	3b30      	subs	r3, #48	; 0x30
 800985a:	2b09      	cmp	r3, #9
 800985c:	d94e      	bls.n	80098fc <_vfiprintf_r+0x1c4>
 800985e:	b1b0      	cbz	r0, 800988e <_vfiprintf_r+0x156>
 8009860:	9207      	str	r2, [sp, #28]
 8009862:	e014      	b.n	800988e <_vfiprintf_r+0x156>
 8009864:	eba0 0308 	sub.w	r3, r0, r8
 8009868:	fa09 f303 	lsl.w	r3, r9, r3
 800986c:	4313      	orrs	r3, r2
 800986e:	9304      	str	r3, [sp, #16]
 8009870:	46a2      	mov	sl, r4
 8009872:	e7d2      	b.n	800981a <_vfiprintf_r+0xe2>
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	1d19      	adds	r1, r3, #4
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	9103      	str	r1, [sp, #12]
 800987c:	2b00      	cmp	r3, #0
 800987e:	bfbb      	ittet	lt
 8009880:	425b      	neglt	r3, r3
 8009882:	f042 0202 	orrlt.w	r2, r2, #2
 8009886:	9307      	strge	r3, [sp, #28]
 8009888:	9307      	strlt	r3, [sp, #28]
 800988a:	bfb8      	it	lt
 800988c:	9204      	strlt	r2, [sp, #16]
 800988e:	7823      	ldrb	r3, [r4, #0]
 8009890:	2b2e      	cmp	r3, #46	; 0x2e
 8009892:	d10c      	bne.n	80098ae <_vfiprintf_r+0x176>
 8009894:	7863      	ldrb	r3, [r4, #1]
 8009896:	2b2a      	cmp	r3, #42	; 0x2a
 8009898:	d135      	bne.n	8009906 <_vfiprintf_r+0x1ce>
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	1d1a      	adds	r2, r3, #4
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	9203      	str	r2, [sp, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	bfb8      	it	lt
 80098a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80098aa:	3402      	adds	r4, #2
 80098ac:	9305      	str	r3, [sp, #20]
 80098ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009994 <_vfiprintf_r+0x25c>
 80098b2:	7821      	ldrb	r1, [r4, #0]
 80098b4:	2203      	movs	r2, #3
 80098b6:	4650      	mov	r0, sl
 80098b8:	f7f6 fca2 	bl	8000200 <memchr>
 80098bc:	b140      	cbz	r0, 80098d0 <_vfiprintf_r+0x198>
 80098be:	2340      	movs	r3, #64	; 0x40
 80098c0:	eba0 000a 	sub.w	r0, r0, sl
 80098c4:	fa03 f000 	lsl.w	r0, r3, r0
 80098c8:	9b04      	ldr	r3, [sp, #16]
 80098ca:	4303      	orrs	r3, r0
 80098cc:	3401      	adds	r4, #1
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d4:	482c      	ldr	r0, [pc, #176]	; (8009988 <_vfiprintf_r+0x250>)
 80098d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098da:	2206      	movs	r2, #6
 80098dc:	f7f6 fc90 	bl	8000200 <memchr>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d03f      	beq.n	8009964 <_vfiprintf_r+0x22c>
 80098e4:	4b29      	ldr	r3, [pc, #164]	; (800998c <_vfiprintf_r+0x254>)
 80098e6:	bb1b      	cbnz	r3, 8009930 <_vfiprintf_r+0x1f8>
 80098e8:	9b03      	ldr	r3, [sp, #12]
 80098ea:	3307      	adds	r3, #7
 80098ec:	f023 0307 	bic.w	r3, r3, #7
 80098f0:	3308      	adds	r3, #8
 80098f2:	9303      	str	r3, [sp, #12]
 80098f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f6:	443b      	add	r3, r7
 80098f8:	9309      	str	r3, [sp, #36]	; 0x24
 80098fa:	e767      	b.n	80097cc <_vfiprintf_r+0x94>
 80098fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009900:	460c      	mov	r4, r1
 8009902:	2001      	movs	r0, #1
 8009904:	e7a5      	b.n	8009852 <_vfiprintf_r+0x11a>
 8009906:	2300      	movs	r3, #0
 8009908:	3401      	adds	r4, #1
 800990a:	9305      	str	r3, [sp, #20]
 800990c:	4619      	mov	r1, r3
 800990e:	f04f 0c0a 	mov.w	ip, #10
 8009912:	4620      	mov	r0, r4
 8009914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009918:	3a30      	subs	r2, #48	; 0x30
 800991a:	2a09      	cmp	r2, #9
 800991c:	d903      	bls.n	8009926 <_vfiprintf_r+0x1ee>
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0c5      	beq.n	80098ae <_vfiprintf_r+0x176>
 8009922:	9105      	str	r1, [sp, #20]
 8009924:	e7c3      	b.n	80098ae <_vfiprintf_r+0x176>
 8009926:	fb0c 2101 	mla	r1, ip, r1, r2
 800992a:	4604      	mov	r4, r0
 800992c:	2301      	movs	r3, #1
 800992e:	e7f0      	b.n	8009912 <_vfiprintf_r+0x1da>
 8009930:	ab03      	add	r3, sp, #12
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	462a      	mov	r2, r5
 8009936:	4b16      	ldr	r3, [pc, #88]	; (8009990 <_vfiprintf_r+0x258>)
 8009938:	a904      	add	r1, sp, #16
 800993a:	4630      	mov	r0, r6
 800993c:	f3af 8000 	nop.w
 8009940:	4607      	mov	r7, r0
 8009942:	1c78      	adds	r0, r7, #1
 8009944:	d1d6      	bne.n	80098f4 <_vfiprintf_r+0x1bc>
 8009946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009948:	07d9      	lsls	r1, r3, #31
 800994a:	d405      	bmi.n	8009958 <_vfiprintf_r+0x220>
 800994c:	89ab      	ldrh	r3, [r5, #12]
 800994e:	059a      	lsls	r2, r3, #22
 8009950:	d402      	bmi.n	8009958 <_vfiprintf_r+0x220>
 8009952:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009954:	f7ff fd5d 	bl	8009412 <__retarget_lock_release_recursive>
 8009958:	89ab      	ldrh	r3, [r5, #12]
 800995a:	065b      	lsls	r3, r3, #25
 800995c:	f53f af12 	bmi.w	8009784 <_vfiprintf_r+0x4c>
 8009960:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009962:	e711      	b.n	8009788 <_vfiprintf_r+0x50>
 8009964:	ab03      	add	r3, sp, #12
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	462a      	mov	r2, r5
 800996a:	4b09      	ldr	r3, [pc, #36]	; (8009990 <_vfiprintf_r+0x258>)
 800996c:	a904      	add	r1, sp, #16
 800996e:	4630      	mov	r0, r6
 8009970:	f000 f880 	bl	8009a74 <_printf_i>
 8009974:	e7e4      	b.n	8009940 <_vfiprintf_r+0x208>
 8009976:	bf00      	nop
 8009978:	0800a434 	.word	0x0800a434
 800997c:	0800a454 	.word	0x0800a454
 8009980:	0800a414 	.word	0x0800a414
 8009984:	0800a474 	.word	0x0800a474
 8009988:	0800a47e 	.word	0x0800a47e
 800998c:	00000000 	.word	0x00000000
 8009990:	08009713 	.word	0x08009713
 8009994:	0800a47a 	.word	0x0800a47a

08009998 <_printf_common>:
 8009998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800999c:	4616      	mov	r6, r2
 800999e:	4699      	mov	r9, r3
 80099a0:	688a      	ldr	r2, [r1, #8]
 80099a2:	690b      	ldr	r3, [r1, #16]
 80099a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099a8:	4293      	cmp	r3, r2
 80099aa:	bfb8      	it	lt
 80099ac:	4613      	movlt	r3, r2
 80099ae:	6033      	str	r3, [r6, #0]
 80099b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80099b4:	4607      	mov	r7, r0
 80099b6:	460c      	mov	r4, r1
 80099b8:	b10a      	cbz	r2, 80099be <_printf_common+0x26>
 80099ba:	3301      	adds	r3, #1
 80099bc:	6033      	str	r3, [r6, #0]
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	0699      	lsls	r1, r3, #26
 80099c2:	bf42      	ittt	mi
 80099c4:	6833      	ldrmi	r3, [r6, #0]
 80099c6:	3302      	addmi	r3, #2
 80099c8:	6033      	strmi	r3, [r6, #0]
 80099ca:	6825      	ldr	r5, [r4, #0]
 80099cc:	f015 0506 	ands.w	r5, r5, #6
 80099d0:	d106      	bne.n	80099e0 <_printf_common+0x48>
 80099d2:	f104 0a19 	add.w	sl, r4, #25
 80099d6:	68e3      	ldr	r3, [r4, #12]
 80099d8:	6832      	ldr	r2, [r6, #0]
 80099da:	1a9b      	subs	r3, r3, r2
 80099dc:	42ab      	cmp	r3, r5
 80099de:	dc26      	bgt.n	8009a2e <_printf_common+0x96>
 80099e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099e4:	1e13      	subs	r3, r2, #0
 80099e6:	6822      	ldr	r2, [r4, #0]
 80099e8:	bf18      	it	ne
 80099ea:	2301      	movne	r3, #1
 80099ec:	0692      	lsls	r2, r2, #26
 80099ee:	d42b      	bmi.n	8009a48 <_printf_common+0xb0>
 80099f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099f4:	4649      	mov	r1, r9
 80099f6:	4638      	mov	r0, r7
 80099f8:	47c0      	blx	r8
 80099fa:	3001      	adds	r0, #1
 80099fc:	d01e      	beq.n	8009a3c <_printf_common+0xa4>
 80099fe:	6823      	ldr	r3, [r4, #0]
 8009a00:	68e5      	ldr	r5, [r4, #12]
 8009a02:	6832      	ldr	r2, [r6, #0]
 8009a04:	f003 0306 	and.w	r3, r3, #6
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	bf08      	it	eq
 8009a0c:	1aad      	subeq	r5, r5, r2
 8009a0e:	68a3      	ldr	r3, [r4, #8]
 8009a10:	6922      	ldr	r2, [r4, #16]
 8009a12:	bf0c      	ite	eq
 8009a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a18:	2500      	movne	r5, #0
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	bfc4      	itt	gt
 8009a1e:	1a9b      	subgt	r3, r3, r2
 8009a20:	18ed      	addgt	r5, r5, r3
 8009a22:	2600      	movs	r6, #0
 8009a24:	341a      	adds	r4, #26
 8009a26:	42b5      	cmp	r5, r6
 8009a28:	d11a      	bne.n	8009a60 <_printf_common+0xc8>
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	e008      	b.n	8009a40 <_printf_common+0xa8>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	4652      	mov	r2, sl
 8009a32:	4649      	mov	r1, r9
 8009a34:	4638      	mov	r0, r7
 8009a36:	47c0      	blx	r8
 8009a38:	3001      	adds	r0, #1
 8009a3a:	d103      	bne.n	8009a44 <_printf_common+0xac>
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a44:	3501      	adds	r5, #1
 8009a46:	e7c6      	b.n	80099d6 <_printf_common+0x3e>
 8009a48:	18e1      	adds	r1, r4, r3
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	2030      	movs	r0, #48	; 0x30
 8009a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a52:	4422      	add	r2, r4
 8009a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	e7c7      	b.n	80099f0 <_printf_common+0x58>
 8009a60:	2301      	movs	r3, #1
 8009a62:	4622      	mov	r2, r4
 8009a64:	4649      	mov	r1, r9
 8009a66:	4638      	mov	r0, r7
 8009a68:	47c0      	blx	r8
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	d0e6      	beq.n	8009a3c <_printf_common+0xa4>
 8009a6e:	3601      	adds	r6, #1
 8009a70:	e7d9      	b.n	8009a26 <_printf_common+0x8e>
	...

08009a74 <_printf_i>:
 8009a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a78:	7e0f      	ldrb	r7, [r1, #24]
 8009a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009a7c:	2f78      	cmp	r7, #120	; 0x78
 8009a7e:	4691      	mov	r9, r2
 8009a80:	4680      	mov	r8, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	469a      	mov	sl, r3
 8009a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009a8a:	d807      	bhi.n	8009a9c <_printf_i+0x28>
 8009a8c:	2f62      	cmp	r7, #98	; 0x62
 8009a8e:	d80a      	bhi.n	8009aa6 <_printf_i+0x32>
 8009a90:	2f00      	cmp	r7, #0
 8009a92:	f000 80d8 	beq.w	8009c46 <_printf_i+0x1d2>
 8009a96:	2f58      	cmp	r7, #88	; 0x58
 8009a98:	f000 80a3 	beq.w	8009be2 <_printf_i+0x16e>
 8009a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009aa4:	e03a      	b.n	8009b1c <_printf_i+0xa8>
 8009aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009aaa:	2b15      	cmp	r3, #21
 8009aac:	d8f6      	bhi.n	8009a9c <_printf_i+0x28>
 8009aae:	a101      	add	r1, pc, #4	; (adr r1, 8009ab4 <_printf_i+0x40>)
 8009ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ab4:	08009b0d 	.word	0x08009b0d
 8009ab8:	08009b21 	.word	0x08009b21
 8009abc:	08009a9d 	.word	0x08009a9d
 8009ac0:	08009a9d 	.word	0x08009a9d
 8009ac4:	08009a9d 	.word	0x08009a9d
 8009ac8:	08009a9d 	.word	0x08009a9d
 8009acc:	08009b21 	.word	0x08009b21
 8009ad0:	08009a9d 	.word	0x08009a9d
 8009ad4:	08009a9d 	.word	0x08009a9d
 8009ad8:	08009a9d 	.word	0x08009a9d
 8009adc:	08009a9d 	.word	0x08009a9d
 8009ae0:	08009c2d 	.word	0x08009c2d
 8009ae4:	08009b51 	.word	0x08009b51
 8009ae8:	08009c0f 	.word	0x08009c0f
 8009aec:	08009a9d 	.word	0x08009a9d
 8009af0:	08009a9d 	.word	0x08009a9d
 8009af4:	08009c4f 	.word	0x08009c4f
 8009af8:	08009a9d 	.word	0x08009a9d
 8009afc:	08009b51 	.word	0x08009b51
 8009b00:	08009a9d 	.word	0x08009a9d
 8009b04:	08009a9d 	.word	0x08009a9d
 8009b08:	08009c17 	.word	0x08009c17
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	1d1a      	adds	r2, r3, #4
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	602a      	str	r2, [r5, #0]
 8009b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e0a3      	b.n	8009c68 <_printf_i+0x1f4>
 8009b20:	6820      	ldr	r0, [r4, #0]
 8009b22:	6829      	ldr	r1, [r5, #0]
 8009b24:	0606      	lsls	r6, r0, #24
 8009b26:	f101 0304 	add.w	r3, r1, #4
 8009b2a:	d50a      	bpl.n	8009b42 <_printf_i+0xce>
 8009b2c:	680e      	ldr	r6, [r1, #0]
 8009b2e:	602b      	str	r3, [r5, #0]
 8009b30:	2e00      	cmp	r6, #0
 8009b32:	da03      	bge.n	8009b3c <_printf_i+0xc8>
 8009b34:	232d      	movs	r3, #45	; 0x2d
 8009b36:	4276      	negs	r6, r6
 8009b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b3c:	485e      	ldr	r0, [pc, #376]	; (8009cb8 <_printf_i+0x244>)
 8009b3e:	230a      	movs	r3, #10
 8009b40:	e019      	b.n	8009b76 <_printf_i+0x102>
 8009b42:	680e      	ldr	r6, [r1, #0]
 8009b44:	602b      	str	r3, [r5, #0]
 8009b46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b4a:	bf18      	it	ne
 8009b4c:	b236      	sxthne	r6, r6
 8009b4e:	e7ef      	b.n	8009b30 <_printf_i+0xbc>
 8009b50:	682b      	ldr	r3, [r5, #0]
 8009b52:	6820      	ldr	r0, [r4, #0]
 8009b54:	1d19      	adds	r1, r3, #4
 8009b56:	6029      	str	r1, [r5, #0]
 8009b58:	0601      	lsls	r1, r0, #24
 8009b5a:	d501      	bpl.n	8009b60 <_printf_i+0xec>
 8009b5c:	681e      	ldr	r6, [r3, #0]
 8009b5e:	e002      	b.n	8009b66 <_printf_i+0xf2>
 8009b60:	0646      	lsls	r6, r0, #25
 8009b62:	d5fb      	bpl.n	8009b5c <_printf_i+0xe8>
 8009b64:	881e      	ldrh	r6, [r3, #0]
 8009b66:	4854      	ldr	r0, [pc, #336]	; (8009cb8 <_printf_i+0x244>)
 8009b68:	2f6f      	cmp	r7, #111	; 0x6f
 8009b6a:	bf0c      	ite	eq
 8009b6c:	2308      	moveq	r3, #8
 8009b6e:	230a      	movne	r3, #10
 8009b70:	2100      	movs	r1, #0
 8009b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b76:	6865      	ldr	r5, [r4, #4]
 8009b78:	60a5      	str	r5, [r4, #8]
 8009b7a:	2d00      	cmp	r5, #0
 8009b7c:	bfa2      	ittt	ge
 8009b7e:	6821      	ldrge	r1, [r4, #0]
 8009b80:	f021 0104 	bicge.w	r1, r1, #4
 8009b84:	6021      	strge	r1, [r4, #0]
 8009b86:	b90e      	cbnz	r6, 8009b8c <_printf_i+0x118>
 8009b88:	2d00      	cmp	r5, #0
 8009b8a:	d04d      	beq.n	8009c28 <_printf_i+0x1b4>
 8009b8c:	4615      	mov	r5, r2
 8009b8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b92:	fb03 6711 	mls	r7, r3, r1, r6
 8009b96:	5dc7      	ldrb	r7, [r0, r7]
 8009b98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b9c:	4637      	mov	r7, r6
 8009b9e:	42bb      	cmp	r3, r7
 8009ba0:	460e      	mov	r6, r1
 8009ba2:	d9f4      	bls.n	8009b8e <_printf_i+0x11a>
 8009ba4:	2b08      	cmp	r3, #8
 8009ba6:	d10b      	bne.n	8009bc0 <_printf_i+0x14c>
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	07de      	lsls	r6, r3, #31
 8009bac:	d508      	bpl.n	8009bc0 <_printf_i+0x14c>
 8009bae:	6923      	ldr	r3, [r4, #16]
 8009bb0:	6861      	ldr	r1, [r4, #4]
 8009bb2:	4299      	cmp	r1, r3
 8009bb4:	bfde      	ittt	le
 8009bb6:	2330      	movle	r3, #48	; 0x30
 8009bb8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009bbc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009bc0:	1b52      	subs	r2, r2, r5
 8009bc2:	6122      	str	r2, [r4, #16]
 8009bc4:	f8cd a000 	str.w	sl, [sp]
 8009bc8:	464b      	mov	r3, r9
 8009bca:	aa03      	add	r2, sp, #12
 8009bcc:	4621      	mov	r1, r4
 8009bce:	4640      	mov	r0, r8
 8009bd0:	f7ff fee2 	bl	8009998 <_printf_common>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	d14c      	bne.n	8009c72 <_printf_i+0x1fe>
 8009bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009bdc:	b004      	add	sp, #16
 8009bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be2:	4835      	ldr	r0, [pc, #212]	; (8009cb8 <_printf_i+0x244>)
 8009be4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009be8:	6829      	ldr	r1, [r5, #0]
 8009bea:	6823      	ldr	r3, [r4, #0]
 8009bec:	f851 6b04 	ldr.w	r6, [r1], #4
 8009bf0:	6029      	str	r1, [r5, #0]
 8009bf2:	061d      	lsls	r5, r3, #24
 8009bf4:	d514      	bpl.n	8009c20 <_printf_i+0x1ac>
 8009bf6:	07df      	lsls	r7, r3, #31
 8009bf8:	bf44      	itt	mi
 8009bfa:	f043 0320 	orrmi.w	r3, r3, #32
 8009bfe:	6023      	strmi	r3, [r4, #0]
 8009c00:	b91e      	cbnz	r6, 8009c0a <_printf_i+0x196>
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	f023 0320 	bic.w	r3, r3, #32
 8009c08:	6023      	str	r3, [r4, #0]
 8009c0a:	2310      	movs	r3, #16
 8009c0c:	e7b0      	b.n	8009b70 <_printf_i+0xfc>
 8009c0e:	6823      	ldr	r3, [r4, #0]
 8009c10:	f043 0320 	orr.w	r3, r3, #32
 8009c14:	6023      	str	r3, [r4, #0]
 8009c16:	2378      	movs	r3, #120	; 0x78
 8009c18:	4828      	ldr	r0, [pc, #160]	; (8009cbc <_printf_i+0x248>)
 8009c1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c1e:	e7e3      	b.n	8009be8 <_printf_i+0x174>
 8009c20:	0659      	lsls	r1, r3, #25
 8009c22:	bf48      	it	mi
 8009c24:	b2b6      	uxthmi	r6, r6
 8009c26:	e7e6      	b.n	8009bf6 <_printf_i+0x182>
 8009c28:	4615      	mov	r5, r2
 8009c2a:	e7bb      	b.n	8009ba4 <_printf_i+0x130>
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	6826      	ldr	r6, [r4, #0]
 8009c30:	6961      	ldr	r1, [r4, #20]
 8009c32:	1d18      	adds	r0, r3, #4
 8009c34:	6028      	str	r0, [r5, #0]
 8009c36:	0635      	lsls	r5, r6, #24
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	d501      	bpl.n	8009c40 <_printf_i+0x1cc>
 8009c3c:	6019      	str	r1, [r3, #0]
 8009c3e:	e002      	b.n	8009c46 <_printf_i+0x1d2>
 8009c40:	0670      	lsls	r0, r6, #25
 8009c42:	d5fb      	bpl.n	8009c3c <_printf_i+0x1c8>
 8009c44:	8019      	strh	r1, [r3, #0]
 8009c46:	2300      	movs	r3, #0
 8009c48:	6123      	str	r3, [r4, #16]
 8009c4a:	4615      	mov	r5, r2
 8009c4c:	e7ba      	b.n	8009bc4 <_printf_i+0x150>
 8009c4e:	682b      	ldr	r3, [r5, #0]
 8009c50:	1d1a      	adds	r2, r3, #4
 8009c52:	602a      	str	r2, [r5, #0]
 8009c54:	681d      	ldr	r5, [r3, #0]
 8009c56:	6862      	ldr	r2, [r4, #4]
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f7f6 fad0 	bl	8000200 <memchr>
 8009c60:	b108      	cbz	r0, 8009c66 <_printf_i+0x1f2>
 8009c62:	1b40      	subs	r0, r0, r5
 8009c64:	6060      	str	r0, [r4, #4]
 8009c66:	6863      	ldr	r3, [r4, #4]
 8009c68:	6123      	str	r3, [r4, #16]
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c70:	e7a8      	b.n	8009bc4 <_printf_i+0x150>
 8009c72:	6923      	ldr	r3, [r4, #16]
 8009c74:	462a      	mov	r2, r5
 8009c76:	4649      	mov	r1, r9
 8009c78:	4640      	mov	r0, r8
 8009c7a:	47d0      	blx	sl
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	d0ab      	beq.n	8009bd8 <_printf_i+0x164>
 8009c80:	6823      	ldr	r3, [r4, #0]
 8009c82:	079b      	lsls	r3, r3, #30
 8009c84:	d413      	bmi.n	8009cae <_printf_i+0x23a>
 8009c86:	68e0      	ldr	r0, [r4, #12]
 8009c88:	9b03      	ldr	r3, [sp, #12]
 8009c8a:	4298      	cmp	r0, r3
 8009c8c:	bfb8      	it	lt
 8009c8e:	4618      	movlt	r0, r3
 8009c90:	e7a4      	b.n	8009bdc <_printf_i+0x168>
 8009c92:	2301      	movs	r3, #1
 8009c94:	4632      	mov	r2, r6
 8009c96:	4649      	mov	r1, r9
 8009c98:	4640      	mov	r0, r8
 8009c9a:	47d0      	blx	sl
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d09b      	beq.n	8009bd8 <_printf_i+0x164>
 8009ca0:	3501      	adds	r5, #1
 8009ca2:	68e3      	ldr	r3, [r4, #12]
 8009ca4:	9903      	ldr	r1, [sp, #12]
 8009ca6:	1a5b      	subs	r3, r3, r1
 8009ca8:	42ab      	cmp	r3, r5
 8009caa:	dcf2      	bgt.n	8009c92 <_printf_i+0x21e>
 8009cac:	e7eb      	b.n	8009c86 <_printf_i+0x212>
 8009cae:	2500      	movs	r5, #0
 8009cb0:	f104 0619 	add.w	r6, r4, #25
 8009cb4:	e7f5      	b.n	8009ca2 <_printf_i+0x22e>
 8009cb6:	bf00      	nop
 8009cb8:	0800a485 	.word	0x0800a485
 8009cbc:	0800a496 	.word	0x0800a496

08009cc0 <_putc_r>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	460d      	mov	r5, r1
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	b118      	cbz	r0, 8009cd2 <_putc_r+0x12>
 8009cca:	6983      	ldr	r3, [r0, #24]
 8009ccc:	b90b      	cbnz	r3, 8009cd2 <_putc_r+0x12>
 8009cce:	f7ff fb01 	bl	80092d4 <__sinit>
 8009cd2:	4b1c      	ldr	r3, [pc, #112]	; (8009d44 <_putc_r+0x84>)
 8009cd4:	429c      	cmp	r4, r3
 8009cd6:	d124      	bne.n	8009d22 <_putc_r+0x62>
 8009cd8:	6874      	ldr	r4, [r6, #4]
 8009cda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cdc:	07d8      	lsls	r0, r3, #31
 8009cde:	d405      	bmi.n	8009cec <_putc_r+0x2c>
 8009ce0:	89a3      	ldrh	r3, [r4, #12]
 8009ce2:	0599      	lsls	r1, r3, #22
 8009ce4:	d402      	bmi.n	8009cec <_putc_r+0x2c>
 8009ce6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ce8:	f7ff fb92 	bl	8009410 <__retarget_lock_acquire_recursive>
 8009cec:	68a3      	ldr	r3, [r4, #8]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	60a3      	str	r3, [r4, #8]
 8009cf4:	da05      	bge.n	8009d02 <_putc_r+0x42>
 8009cf6:	69a2      	ldr	r2, [r4, #24]
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	db1c      	blt.n	8009d36 <_putc_r+0x76>
 8009cfc:	b2eb      	uxtb	r3, r5
 8009cfe:	2b0a      	cmp	r3, #10
 8009d00:	d019      	beq.n	8009d36 <_putc_r+0x76>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	1c5a      	adds	r2, r3, #1
 8009d06:	6022      	str	r2, [r4, #0]
 8009d08:	701d      	strb	r5, [r3, #0]
 8009d0a:	b2ed      	uxtb	r5, r5
 8009d0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d0e:	07da      	lsls	r2, r3, #31
 8009d10:	d405      	bmi.n	8009d1e <_putc_r+0x5e>
 8009d12:	89a3      	ldrh	r3, [r4, #12]
 8009d14:	059b      	lsls	r3, r3, #22
 8009d16:	d402      	bmi.n	8009d1e <_putc_r+0x5e>
 8009d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d1a:	f7ff fb7a 	bl	8009412 <__retarget_lock_release_recursive>
 8009d1e:	4628      	mov	r0, r5
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
 8009d22:	4b09      	ldr	r3, [pc, #36]	; (8009d48 <_putc_r+0x88>)
 8009d24:	429c      	cmp	r4, r3
 8009d26:	d101      	bne.n	8009d2c <_putc_r+0x6c>
 8009d28:	68b4      	ldr	r4, [r6, #8]
 8009d2a:	e7d6      	b.n	8009cda <_putc_r+0x1a>
 8009d2c:	4b07      	ldr	r3, [pc, #28]	; (8009d4c <_putc_r+0x8c>)
 8009d2e:	429c      	cmp	r4, r3
 8009d30:	bf08      	it	eq
 8009d32:	68f4      	ldreq	r4, [r6, #12]
 8009d34:	e7d1      	b.n	8009cda <_putc_r+0x1a>
 8009d36:	4629      	mov	r1, r5
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f000 f84c 	bl	8009dd8 <__swbuf_r>
 8009d40:	4605      	mov	r5, r0
 8009d42:	e7e3      	b.n	8009d0c <_putc_r+0x4c>
 8009d44:	0800a434 	.word	0x0800a434
 8009d48:	0800a454 	.word	0x0800a454
 8009d4c:	0800a414 	.word	0x0800a414

08009d50 <__sread>:
 8009d50:	b510      	push	{r4, lr}
 8009d52:	460c      	mov	r4, r1
 8009d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d58:	f000 fab2 	bl	800a2c0 <_read_r>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	bfab      	itete	ge
 8009d60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d62:	89a3      	ldrhlt	r3, [r4, #12]
 8009d64:	181b      	addge	r3, r3, r0
 8009d66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d6a:	bfac      	ite	ge
 8009d6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d6e:	81a3      	strhlt	r3, [r4, #12]
 8009d70:	bd10      	pop	{r4, pc}

08009d72 <__swrite>:
 8009d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d76:	461f      	mov	r7, r3
 8009d78:	898b      	ldrh	r3, [r1, #12]
 8009d7a:	05db      	lsls	r3, r3, #23
 8009d7c:	4605      	mov	r5, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	4616      	mov	r6, r2
 8009d82:	d505      	bpl.n	8009d90 <__swrite+0x1e>
 8009d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d88:	2302      	movs	r3, #2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f000 f9c8 	bl	800a120 <_lseek_r>
 8009d90:	89a3      	ldrh	r3, [r4, #12]
 8009d92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	4632      	mov	r2, r6
 8009d9e:	463b      	mov	r3, r7
 8009da0:	4628      	mov	r0, r5
 8009da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009da6:	f000 b869 	b.w	8009e7c <_write_r>

08009daa <__sseek>:
 8009daa:	b510      	push	{r4, lr}
 8009dac:	460c      	mov	r4, r1
 8009dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db2:	f000 f9b5 	bl	800a120 <_lseek_r>
 8009db6:	1c43      	adds	r3, r0, #1
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	bf15      	itete	ne
 8009dbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009dc6:	81a3      	strheq	r3, [r4, #12]
 8009dc8:	bf18      	it	ne
 8009dca:	81a3      	strhne	r3, [r4, #12]
 8009dcc:	bd10      	pop	{r4, pc}

08009dce <__sclose>:
 8009dce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd2:	f000 b8d3 	b.w	8009f7c <_close_r>
	...

08009dd8 <__swbuf_r>:
 8009dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dda:	460e      	mov	r6, r1
 8009ddc:	4614      	mov	r4, r2
 8009dde:	4605      	mov	r5, r0
 8009de0:	b118      	cbz	r0, 8009dea <__swbuf_r+0x12>
 8009de2:	6983      	ldr	r3, [r0, #24]
 8009de4:	b90b      	cbnz	r3, 8009dea <__swbuf_r+0x12>
 8009de6:	f7ff fa75 	bl	80092d4 <__sinit>
 8009dea:	4b21      	ldr	r3, [pc, #132]	; (8009e70 <__swbuf_r+0x98>)
 8009dec:	429c      	cmp	r4, r3
 8009dee:	d12b      	bne.n	8009e48 <__swbuf_r+0x70>
 8009df0:	686c      	ldr	r4, [r5, #4]
 8009df2:	69a3      	ldr	r3, [r4, #24]
 8009df4:	60a3      	str	r3, [r4, #8]
 8009df6:	89a3      	ldrh	r3, [r4, #12]
 8009df8:	071a      	lsls	r2, r3, #28
 8009dfa:	d52f      	bpl.n	8009e5c <__swbuf_r+0x84>
 8009dfc:	6923      	ldr	r3, [r4, #16]
 8009dfe:	b36b      	cbz	r3, 8009e5c <__swbuf_r+0x84>
 8009e00:	6923      	ldr	r3, [r4, #16]
 8009e02:	6820      	ldr	r0, [r4, #0]
 8009e04:	1ac0      	subs	r0, r0, r3
 8009e06:	6963      	ldr	r3, [r4, #20]
 8009e08:	b2f6      	uxtb	r6, r6
 8009e0a:	4283      	cmp	r3, r0
 8009e0c:	4637      	mov	r7, r6
 8009e0e:	dc04      	bgt.n	8009e1a <__swbuf_r+0x42>
 8009e10:	4621      	mov	r1, r4
 8009e12:	4628      	mov	r0, r5
 8009e14:	f000 f948 	bl	800a0a8 <_fflush_r>
 8009e18:	bb30      	cbnz	r0, 8009e68 <__swbuf_r+0x90>
 8009e1a:	68a3      	ldr	r3, [r4, #8]
 8009e1c:	3b01      	subs	r3, #1
 8009e1e:	60a3      	str	r3, [r4, #8]
 8009e20:	6823      	ldr	r3, [r4, #0]
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	6022      	str	r2, [r4, #0]
 8009e26:	701e      	strb	r6, [r3, #0]
 8009e28:	6963      	ldr	r3, [r4, #20]
 8009e2a:	3001      	adds	r0, #1
 8009e2c:	4283      	cmp	r3, r0
 8009e2e:	d004      	beq.n	8009e3a <__swbuf_r+0x62>
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	07db      	lsls	r3, r3, #31
 8009e34:	d506      	bpl.n	8009e44 <__swbuf_r+0x6c>
 8009e36:	2e0a      	cmp	r6, #10
 8009e38:	d104      	bne.n	8009e44 <__swbuf_r+0x6c>
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f000 f933 	bl	800a0a8 <_fflush_r>
 8009e42:	b988      	cbnz	r0, 8009e68 <__swbuf_r+0x90>
 8009e44:	4638      	mov	r0, r7
 8009e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e48:	4b0a      	ldr	r3, [pc, #40]	; (8009e74 <__swbuf_r+0x9c>)
 8009e4a:	429c      	cmp	r4, r3
 8009e4c:	d101      	bne.n	8009e52 <__swbuf_r+0x7a>
 8009e4e:	68ac      	ldr	r4, [r5, #8]
 8009e50:	e7cf      	b.n	8009df2 <__swbuf_r+0x1a>
 8009e52:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <__swbuf_r+0xa0>)
 8009e54:	429c      	cmp	r4, r3
 8009e56:	bf08      	it	eq
 8009e58:	68ec      	ldreq	r4, [r5, #12]
 8009e5a:	e7ca      	b.n	8009df2 <__swbuf_r+0x1a>
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	4628      	mov	r0, r5
 8009e60:	f000 f81e 	bl	8009ea0 <__swsetup_r>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	d0cb      	beq.n	8009e00 <__swbuf_r+0x28>
 8009e68:	f04f 37ff 	mov.w	r7, #4294967295
 8009e6c:	e7ea      	b.n	8009e44 <__swbuf_r+0x6c>
 8009e6e:	bf00      	nop
 8009e70:	0800a434 	.word	0x0800a434
 8009e74:	0800a454 	.word	0x0800a454
 8009e78:	0800a414 	.word	0x0800a414

08009e7c <_write_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4d07      	ldr	r5, [pc, #28]	; (8009e9c <_write_r+0x20>)
 8009e80:	4604      	mov	r4, r0
 8009e82:	4608      	mov	r0, r1
 8009e84:	4611      	mov	r1, r2
 8009e86:	2200      	movs	r2, #0
 8009e88:	602a      	str	r2, [r5, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	f7f7 f901 	bl	8001092 <_write>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_write_r+0x1e>
 8009e94:	682b      	ldr	r3, [r5, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_write_r+0x1e>
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	20001fdc 	.word	0x20001fdc

08009ea0 <__swsetup_r>:
 8009ea0:	4b32      	ldr	r3, [pc, #200]	; (8009f6c <__swsetup_r+0xcc>)
 8009ea2:	b570      	push	{r4, r5, r6, lr}
 8009ea4:	681d      	ldr	r5, [r3, #0]
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	b125      	cbz	r5, 8009eb6 <__swsetup_r+0x16>
 8009eac:	69ab      	ldr	r3, [r5, #24]
 8009eae:	b913      	cbnz	r3, 8009eb6 <__swsetup_r+0x16>
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f7ff fa0f 	bl	80092d4 <__sinit>
 8009eb6:	4b2e      	ldr	r3, [pc, #184]	; (8009f70 <__swsetup_r+0xd0>)
 8009eb8:	429c      	cmp	r4, r3
 8009eba:	d10f      	bne.n	8009edc <__swsetup_r+0x3c>
 8009ebc:	686c      	ldr	r4, [r5, #4]
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ec4:	0719      	lsls	r1, r3, #28
 8009ec6:	d42c      	bmi.n	8009f22 <__swsetup_r+0x82>
 8009ec8:	06dd      	lsls	r5, r3, #27
 8009eca:	d411      	bmi.n	8009ef0 <__swsetup_r+0x50>
 8009ecc:	2309      	movs	r3, #9
 8009ece:	6033      	str	r3, [r6, #0]
 8009ed0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eda:	e03e      	b.n	8009f5a <__swsetup_r+0xba>
 8009edc:	4b25      	ldr	r3, [pc, #148]	; (8009f74 <__swsetup_r+0xd4>)
 8009ede:	429c      	cmp	r4, r3
 8009ee0:	d101      	bne.n	8009ee6 <__swsetup_r+0x46>
 8009ee2:	68ac      	ldr	r4, [r5, #8]
 8009ee4:	e7eb      	b.n	8009ebe <__swsetup_r+0x1e>
 8009ee6:	4b24      	ldr	r3, [pc, #144]	; (8009f78 <__swsetup_r+0xd8>)
 8009ee8:	429c      	cmp	r4, r3
 8009eea:	bf08      	it	eq
 8009eec:	68ec      	ldreq	r4, [r5, #12]
 8009eee:	e7e6      	b.n	8009ebe <__swsetup_r+0x1e>
 8009ef0:	0758      	lsls	r0, r3, #29
 8009ef2:	d512      	bpl.n	8009f1a <__swsetup_r+0x7a>
 8009ef4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ef6:	b141      	cbz	r1, 8009f0a <__swsetup_r+0x6a>
 8009ef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009efc:	4299      	cmp	r1, r3
 8009efe:	d002      	beq.n	8009f06 <__swsetup_r+0x66>
 8009f00:	4630      	mov	r0, r6
 8009f02:	f7ff f851 	bl	8008fa8 <_free_r>
 8009f06:	2300      	movs	r3, #0
 8009f08:	6363      	str	r3, [r4, #52]	; 0x34
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f10:	81a3      	strh	r3, [r4, #12]
 8009f12:	2300      	movs	r3, #0
 8009f14:	6063      	str	r3, [r4, #4]
 8009f16:	6923      	ldr	r3, [r4, #16]
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	f043 0308 	orr.w	r3, r3, #8
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	6923      	ldr	r3, [r4, #16]
 8009f24:	b94b      	cbnz	r3, 8009f3a <__swsetup_r+0x9a>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f30:	d003      	beq.n	8009f3a <__swsetup_r+0x9a>
 8009f32:	4621      	mov	r1, r4
 8009f34:	4630      	mov	r0, r6
 8009f36:	f000 f92b 	bl	800a190 <__smakebuf_r>
 8009f3a:	89a0      	ldrh	r0, [r4, #12]
 8009f3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f40:	f010 0301 	ands.w	r3, r0, #1
 8009f44:	d00a      	beq.n	8009f5c <__swsetup_r+0xbc>
 8009f46:	2300      	movs	r3, #0
 8009f48:	60a3      	str	r3, [r4, #8]
 8009f4a:	6963      	ldr	r3, [r4, #20]
 8009f4c:	425b      	negs	r3, r3
 8009f4e:	61a3      	str	r3, [r4, #24]
 8009f50:	6923      	ldr	r3, [r4, #16]
 8009f52:	b943      	cbnz	r3, 8009f66 <__swsetup_r+0xc6>
 8009f54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f58:	d1ba      	bne.n	8009ed0 <__swsetup_r+0x30>
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	0781      	lsls	r1, r0, #30
 8009f5e:	bf58      	it	pl
 8009f60:	6963      	ldrpl	r3, [r4, #20]
 8009f62:	60a3      	str	r3, [r4, #8]
 8009f64:	e7f4      	b.n	8009f50 <__swsetup_r+0xb0>
 8009f66:	2000      	movs	r0, #0
 8009f68:	e7f7      	b.n	8009f5a <__swsetup_r+0xba>
 8009f6a:	bf00      	nop
 8009f6c:	200000fc 	.word	0x200000fc
 8009f70:	0800a434 	.word	0x0800a434
 8009f74:	0800a454 	.word	0x0800a454
 8009f78:	0800a414 	.word	0x0800a414

08009f7c <_close_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d06      	ldr	r5, [pc, #24]	; (8009f98 <_close_r+0x1c>)
 8009f80:	2300      	movs	r3, #0
 8009f82:	4604      	mov	r4, r0
 8009f84:	4608      	mov	r0, r1
 8009f86:	602b      	str	r3, [r5, #0]
 8009f88:	f7f7 f89f 	bl	80010ca <_close>
 8009f8c:	1c43      	adds	r3, r0, #1
 8009f8e:	d102      	bne.n	8009f96 <_close_r+0x1a>
 8009f90:	682b      	ldr	r3, [r5, #0]
 8009f92:	b103      	cbz	r3, 8009f96 <_close_r+0x1a>
 8009f94:	6023      	str	r3, [r4, #0]
 8009f96:	bd38      	pop	{r3, r4, r5, pc}
 8009f98:	20001fdc 	.word	0x20001fdc

08009f9c <__sflush_r>:
 8009f9c:	898a      	ldrh	r2, [r1, #12]
 8009f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa2:	4605      	mov	r5, r0
 8009fa4:	0710      	lsls	r0, r2, #28
 8009fa6:	460c      	mov	r4, r1
 8009fa8:	d458      	bmi.n	800a05c <__sflush_r+0xc0>
 8009faa:	684b      	ldr	r3, [r1, #4]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	dc05      	bgt.n	8009fbc <__sflush_r+0x20>
 8009fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	dc02      	bgt.n	8009fbc <__sflush_r+0x20>
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fbe:	2e00      	cmp	r6, #0
 8009fc0:	d0f9      	beq.n	8009fb6 <__sflush_r+0x1a>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fc8:	682f      	ldr	r7, [r5, #0]
 8009fca:	602b      	str	r3, [r5, #0]
 8009fcc:	d032      	beq.n	800a034 <__sflush_r+0x98>
 8009fce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	075a      	lsls	r2, r3, #29
 8009fd4:	d505      	bpl.n	8009fe2 <__sflush_r+0x46>
 8009fd6:	6863      	ldr	r3, [r4, #4]
 8009fd8:	1ac0      	subs	r0, r0, r3
 8009fda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fdc:	b10b      	cbz	r3, 8009fe2 <__sflush_r+0x46>
 8009fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fe0:	1ac0      	subs	r0, r0, r3
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fe8:	6a21      	ldr	r1, [r4, #32]
 8009fea:	4628      	mov	r0, r5
 8009fec:	47b0      	blx	r6
 8009fee:	1c43      	adds	r3, r0, #1
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	d106      	bne.n	800a002 <__sflush_r+0x66>
 8009ff4:	6829      	ldr	r1, [r5, #0]
 8009ff6:	291d      	cmp	r1, #29
 8009ff8:	d82c      	bhi.n	800a054 <__sflush_r+0xb8>
 8009ffa:	4a2a      	ldr	r2, [pc, #168]	; (800a0a4 <__sflush_r+0x108>)
 8009ffc:	40ca      	lsrs	r2, r1
 8009ffe:	07d6      	lsls	r6, r2, #31
 800a000:	d528      	bpl.n	800a054 <__sflush_r+0xb8>
 800a002:	2200      	movs	r2, #0
 800a004:	6062      	str	r2, [r4, #4]
 800a006:	04d9      	lsls	r1, r3, #19
 800a008:	6922      	ldr	r2, [r4, #16]
 800a00a:	6022      	str	r2, [r4, #0]
 800a00c:	d504      	bpl.n	800a018 <__sflush_r+0x7c>
 800a00e:	1c42      	adds	r2, r0, #1
 800a010:	d101      	bne.n	800a016 <__sflush_r+0x7a>
 800a012:	682b      	ldr	r3, [r5, #0]
 800a014:	b903      	cbnz	r3, 800a018 <__sflush_r+0x7c>
 800a016:	6560      	str	r0, [r4, #84]	; 0x54
 800a018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a01a:	602f      	str	r7, [r5, #0]
 800a01c:	2900      	cmp	r1, #0
 800a01e:	d0ca      	beq.n	8009fb6 <__sflush_r+0x1a>
 800a020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a024:	4299      	cmp	r1, r3
 800a026:	d002      	beq.n	800a02e <__sflush_r+0x92>
 800a028:	4628      	mov	r0, r5
 800a02a:	f7fe ffbd 	bl	8008fa8 <_free_r>
 800a02e:	2000      	movs	r0, #0
 800a030:	6360      	str	r0, [r4, #52]	; 0x34
 800a032:	e7c1      	b.n	8009fb8 <__sflush_r+0x1c>
 800a034:	6a21      	ldr	r1, [r4, #32]
 800a036:	2301      	movs	r3, #1
 800a038:	4628      	mov	r0, r5
 800a03a:	47b0      	blx	r6
 800a03c:	1c41      	adds	r1, r0, #1
 800a03e:	d1c7      	bne.n	8009fd0 <__sflush_r+0x34>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0c4      	beq.n	8009fd0 <__sflush_r+0x34>
 800a046:	2b1d      	cmp	r3, #29
 800a048:	d001      	beq.n	800a04e <__sflush_r+0xb2>
 800a04a:	2b16      	cmp	r3, #22
 800a04c:	d101      	bne.n	800a052 <__sflush_r+0xb6>
 800a04e:	602f      	str	r7, [r5, #0]
 800a050:	e7b1      	b.n	8009fb6 <__sflush_r+0x1a>
 800a052:	89a3      	ldrh	r3, [r4, #12]
 800a054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a058:	81a3      	strh	r3, [r4, #12]
 800a05a:	e7ad      	b.n	8009fb8 <__sflush_r+0x1c>
 800a05c:	690f      	ldr	r7, [r1, #16]
 800a05e:	2f00      	cmp	r7, #0
 800a060:	d0a9      	beq.n	8009fb6 <__sflush_r+0x1a>
 800a062:	0793      	lsls	r3, r2, #30
 800a064:	680e      	ldr	r6, [r1, #0]
 800a066:	bf08      	it	eq
 800a068:	694b      	ldreq	r3, [r1, #20]
 800a06a:	600f      	str	r7, [r1, #0]
 800a06c:	bf18      	it	ne
 800a06e:	2300      	movne	r3, #0
 800a070:	eba6 0807 	sub.w	r8, r6, r7
 800a074:	608b      	str	r3, [r1, #8]
 800a076:	f1b8 0f00 	cmp.w	r8, #0
 800a07a:	dd9c      	ble.n	8009fb6 <__sflush_r+0x1a>
 800a07c:	6a21      	ldr	r1, [r4, #32]
 800a07e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a080:	4643      	mov	r3, r8
 800a082:	463a      	mov	r2, r7
 800a084:	4628      	mov	r0, r5
 800a086:	47b0      	blx	r6
 800a088:	2800      	cmp	r0, #0
 800a08a:	dc06      	bgt.n	800a09a <__sflush_r+0xfe>
 800a08c:	89a3      	ldrh	r3, [r4, #12]
 800a08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a092:	81a3      	strh	r3, [r4, #12]
 800a094:	f04f 30ff 	mov.w	r0, #4294967295
 800a098:	e78e      	b.n	8009fb8 <__sflush_r+0x1c>
 800a09a:	4407      	add	r7, r0
 800a09c:	eba8 0800 	sub.w	r8, r8, r0
 800a0a0:	e7e9      	b.n	800a076 <__sflush_r+0xda>
 800a0a2:	bf00      	nop
 800a0a4:	20400001 	.word	0x20400001

0800a0a8 <_fflush_r>:
 800a0a8:	b538      	push	{r3, r4, r5, lr}
 800a0aa:	690b      	ldr	r3, [r1, #16]
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	b913      	cbnz	r3, 800a0b8 <_fflush_r+0x10>
 800a0b2:	2500      	movs	r5, #0
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	b118      	cbz	r0, 800a0c2 <_fflush_r+0x1a>
 800a0ba:	6983      	ldr	r3, [r0, #24]
 800a0bc:	b90b      	cbnz	r3, 800a0c2 <_fflush_r+0x1a>
 800a0be:	f7ff f909 	bl	80092d4 <__sinit>
 800a0c2:	4b14      	ldr	r3, [pc, #80]	; (800a114 <_fflush_r+0x6c>)
 800a0c4:	429c      	cmp	r4, r3
 800a0c6:	d11b      	bne.n	800a100 <_fflush_r+0x58>
 800a0c8:	686c      	ldr	r4, [r5, #4]
 800a0ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0ef      	beq.n	800a0b2 <_fflush_r+0xa>
 800a0d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0d4:	07d0      	lsls	r0, r2, #31
 800a0d6:	d404      	bmi.n	800a0e2 <_fflush_r+0x3a>
 800a0d8:	0599      	lsls	r1, r3, #22
 800a0da:	d402      	bmi.n	800a0e2 <_fflush_r+0x3a>
 800a0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0de:	f7ff f997 	bl	8009410 <__retarget_lock_acquire_recursive>
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	4621      	mov	r1, r4
 800a0e6:	f7ff ff59 	bl	8009f9c <__sflush_r>
 800a0ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0ec:	07da      	lsls	r2, r3, #31
 800a0ee:	4605      	mov	r5, r0
 800a0f0:	d4e0      	bmi.n	800a0b4 <_fflush_r+0xc>
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	059b      	lsls	r3, r3, #22
 800a0f6:	d4dd      	bmi.n	800a0b4 <_fflush_r+0xc>
 800a0f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0fa:	f7ff f98a 	bl	8009412 <__retarget_lock_release_recursive>
 800a0fe:	e7d9      	b.n	800a0b4 <_fflush_r+0xc>
 800a100:	4b05      	ldr	r3, [pc, #20]	; (800a118 <_fflush_r+0x70>)
 800a102:	429c      	cmp	r4, r3
 800a104:	d101      	bne.n	800a10a <_fflush_r+0x62>
 800a106:	68ac      	ldr	r4, [r5, #8]
 800a108:	e7df      	b.n	800a0ca <_fflush_r+0x22>
 800a10a:	4b04      	ldr	r3, [pc, #16]	; (800a11c <_fflush_r+0x74>)
 800a10c:	429c      	cmp	r4, r3
 800a10e:	bf08      	it	eq
 800a110:	68ec      	ldreq	r4, [r5, #12]
 800a112:	e7da      	b.n	800a0ca <_fflush_r+0x22>
 800a114:	0800a434 	.word	0x0800a434
 800a118:	0800a454 	.word	0x0800a454
 800a11c:	0800a414 	.word	0x0800a414

0800a120 <_lseek_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d07      	ldr	r5, [pc, #28]	; (800a140 <_lseek_r+0x20>)
 800a124:	4604      	mov	r4, r0
 800a126:	4608      	mov	r0, r1
 800a128:	4611      	mov	r1, r2
 800a12a:	2200      	movs	r2, #0
 800a12c:	602a      	str	r2, [r5, #0]
 800a12e:	461a      	mov	r2, r3
 800a130:	f7f6 fff2 	bl	8001118 <_lseek>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d102      	bne.n	800a13e <_lseek_r+0x1e>
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	b103      	cbz	r3, 800a13e <_lseek_r+0x1e>
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	bd38      	pop	{r3, r4, r5, pc}
 800a140:	20001fdc 	.word	0x20001fdc

0800a144 <__swhatbuf_r>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	460e      	mov	r6, r1
 800a148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a14c:	2900      	cmp	r1, #0
 800a14e:	b096      	sub	sp, #88	; 0x58
 800a150:	4614      	mov	r4, r2
 800a152:	461d      	mov	r5, r3
 800a154:	da08      	bge.n	800a168 <__swhatbuf_r+0x24>
 800a156:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	602a      	str	r2, [r5, #0]
 800a15e:	061a      	lsls	r2, r3, #24
 800a160:	d410      	bmi.n	800a184 <__swhatbuf_r+0x40>
 800a162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a166:	e00e      	b.n	800a186 <__swhatbuf_r+0x42>
 800a168:	466a      	mov	r2, sp
 800a16a:	f000 f8bb 	bl	800a2e4 <_fstat_r>
 800a16e:	2800      	cmp	r0, #0
 800a170:	dbf1      	blt.n	800a156 <__swhatbuf_r+0x12>
 800a172:	9a01      	ldr	r2, [sp, #4]
 800a174:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a178:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a17c:	425a      	negs	r2, r3
 800a17e:	415a      	adcs	r2, r3
 800a180:	602a      	str	r2, [r5, #0]
 800a182:	e7ee      	b.n	800a162 <__swhatbuf_r+0x1e>
 800a184:	2340      	movs	r3, #64	; 0x40
 800a186:	2000      	movs	r0, #0
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	b016      	add	sp, #88	; 0x58
 800a18c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a190 <__smakebuf_r>:
 800a190:	898b      	ldrh	r3, [r1, #12]
 800a192:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a194:	079d      	lsls	r5, r3, #30
 800a196:	4606      	mov	r6, r0
 800a198:	460c      	mov	r4, r1
 800a19a:	d507      	bpl.n	800a1ac <__smakebuf_r+0x1c>
 800a19c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	6123      	str	r3, [r4, #16]
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	6163      	str	r3, [r4, #20]
 800a1a8:	b002      	add	sp, #8
 800a1aa:	bd70      	pop	{r4, r5, r6, pc}
 800a1ac:	ab01      	add	r3, sp, #4
 800a1ae:	466a      	mov	r2, sp
 800a1b0:	f7ff ffc8 	bl	800a144 <__swhatbuf_r>
 800a1b4:	9900      	ldr	r1, [sp, #0]
 800a1b6:	4605      	mov	r5, r0
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f7fe ff61 	bl	8009080 <_malloc_r>
 800a1be:	b948      	cbnz	r0, 800a1d4 <__smakebuf_r+0x44>
 800a1c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c4:	059a      	lsls	r2, r3, #22
 800a1c6:	d4ef      	bmi.n	800a1a8 <__smakebuf_r+0x18>
 800a1c8:	f023 0303 	bic.w	r3, r3, #3
 800a1cc:	f043 0302 	orr.w	r3, r3, #2
 800a1d0:	81a3      	strh	r3, [r4, #12]
 800a1d2:	e7e3      	b.n	800a19c <__smakebuf_r+0xc>
 800a1d4:	4b0d      	ldr	r3, [pc, #52]	; (800a20c <__smakebuf_r+0x7c>)
 800a1d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	6020      	str	r0, [r4, #0]
 800a1dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1e0:	81a3      	strh	r3, [r4, #12]
 800a1e2:	9b00      	ldr	r3, [sp, #0]
 800a1e4:	6163      	str	r3, [r4, #20]
 800a1e6:	9b01      	ldr	r3, [sp, #4]
 800a1e8:	6120      	str	r0, [r4, #16]
 800a1ea:	b15b      	cbz	r3, 800a204 <__smakebuf_r+0x74>
 800a1ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	f000 f889 	bl	800a308 <_isatty_r>
 800a1f6:	b128      	cbz	r0, 800a204 <__smakebuf_r+0x74>
 800a1f8:	89a3      	ldrh	r3, [r4, #12]
 800a1fa:	f023 0303 	bic.w	r3, r3, #3
 800a1fe:	f043 0301 	orr.w	r3, r3, #1
 800a202:	81a3      	strh	r3, [r4, #12]
 800a204:	89a0      	ldrh	r0, [r4, #12]
 800a206:	4305      	orrs	r5, r0
 800a208:	81a5      	strh	r5, [r4, #12]
 800a20a:	e7cd      	b.n	800a1a8 <__smakebuf_r+0x18>
 800a20c:	0800926d 	.word	0x0800926d

0800a210 <memcpy>:
 800a210:	440a      	add	r2, r1
 800a212:	4291      	cmp	r1, r2
 800a214:	f100 33ff 	add.w	r3, r0, #4294967295
 800a218:	d100      	bne.n	800a21c <memcpy+0xc>
 800a21a:	4770      	bx	lr
 800a21c:	b510      	push	{r4, lr}
 800a21e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a222:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a226:	4291      	cmp	r1, r2
 800a228:	d1f9      	bne.n	800a21e <memcpy+0xe>
 800a22a:	bd10      	pop	{r4, pc}

0800a22c <memmove>:
 800a22c:	4288      	cmp	r0, r1
 800a22e:	b510      	push	{r4, lr}
 800a230:	eb01 0402 	add.w	r4, r1, r2
 800a234:	d902      	bls.n	800a23c <memmove+0x10>
 800a236:	4284      	cmp	r4, r0
 800a238:	4623      	mov	r3, r4
 800a23a:	d807      	bhi.n	800a24c <memmove+0x20>
 800a23c:	1e43      	subs	r3, r0, #1
 800a23e:	42a1      	cmp	r1, r4
 800a240:	d008      	beq.n	800a254 <memmove+0x28>
 800a242:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a24a:	e7f8      	b.n	800a23e <memmove+0x12>
 800a24c:	4402      	add	r2, r0
 800a24e:	4601      	mov	r1, r0
 800a250:	428a      	cmp	r2, r1
 800a252:	d100      	bne.n	800a256 <memmove+0x2a>
 800a254:	bd10      	pop	{r4, pc}
 800a256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a25a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a25e:	e7f7      	b.n	800a250 <memmove+0x24>

0800a260 <_realloc_r>:
 800a260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a264:	4680      	mov	r8, r0
 800a266:	4614      	mov	r4, r2
 800a268:	460e      	mov	r6, r1
 800a26a:	b921      	cbnz	r1, 800a276 <_realloc_r+0x16>
 800a26c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a270:	4611      	mov	r1, r2
 800a272:	f7fe bf05 	b.w	8009080 <_malloc_r>
 800a276:	b92a      	cbnz	r2, 800a284 <_realloc_r+0x24>
 800a278:	f7fe fe96 	bl	8008fa8 <_free_r>
 800a27c:	4625      	mov	r5, r4
 800a27e:	4628      	mov	r0, r5
 800a280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a284:	f000 f850 	bl	800a328 <_malloc_usable_size_r>
 800a288:	4284      	cmp	r4, r0
 800a28a:	4607      	mov	r7, r0
 800a28c:	d802      	bhi.n	800a294 <_realloc_r+0x34>
 800a28e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a292:	d812      	bhi.n	800a2ba <_realloc_r+0x5a>
 800a294:	4621      	mov	r1, r4
 800a296:	4640      	mov	r0, r8
 800a298:	f7fe fef2 	bl	8009080 <_malloc_r>
 800a29c:	4605      	mov	r5, r0
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d0ed      	beq.n	800a27e <_realloc_r+0x1e>
 800a2a2:	42bc      	cmp	r4, r7
 800a2a4:	4622      	mov	r2, r4
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	bf28      	it	cs
 800a2aa:	463a      	movcs	r2, r7
 800a2ac:	f7ff ffb0 	bl	800a210 <memcpy>
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4640      	mov	r0, r8
 800a2b4:	f7fe fe78 	bl	8008fa8 <_free_r>
 800a2b8:	e7e1      	b.n	800a27e <_realloc_r+0x1e>
 800a2ba:	4635      	mov	r5, r6
 800a2bc:	e7df      	b.n	800a27e <_realloc_r+0x1e>
	...

0800a2c0 <_read_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4d07      	ldr	r5, [pc, #28]	; (800a2e0 <_read_r+0x20>)
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	4608      	mov	r0, r1
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	602a      	str	r2, [r5, #0]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	f7f6 fec2 	bl	8001058 <_read>
 800a2d4:	1c43      	adds	r3, r0, #1
 800a2d6:	d102      	bne.n	800a2de <_read_r+0x1e>
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	b103      	cbz	r3, 800a2de <_read_r+0x1e>
 800a2dc:	6023      	str	r3, [r4, #0]
 800a2de:	bd38      	pop	{r3, r4, r5, pc}
 800a2e0:	20001fdc 	.word	0x20001fdc

0800a2e4 <_fstat_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	4d07      	ldr	r5, [pc, #28]	; (800a304 <_fstat_r+0x20>)
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	602b      	str	r3, [r5, #0]
 800a2f2:	f7f6 fef6 	bl	80010e2 <_fstat>
 800a2f6:	1c43      	adds	r3, r0, #1
 800a2f8:	d102      	bne.n	800a300 <_fstat_r+0x1c>
 800a2fa:	682b      	ldr	r3, [r5, #0]
 800a2fc:	b103      	cbz	r3, 800a300 <_fstat_r+0x1c>
 800a2fe:	6023      	str	r3, [r4, #0]
 800a300:	bd38      	pop	{r3, r4, r5, pc}
 800a302:	bf00      	nop
 800a304:	20001fdc 	.word	0x20001fdc

0800a308 <_isatty_r>:
 800a308:	b538      	push	{r3, r4, r5, lr}
 800a30a:	4d06      	ldr	r5, [pc, #24]	; (800a324 <_isatty_r+0x1c>)
 800a30c:	2300      	movs	r3, #0
 800a30e:	4604      	mov	r4, r0
 800a310:	4608      	mov	r0, r1
 800a312:	602b      	str	r3, [r5, #0]
 800a314:	f7f6 fef5 	bl	8001102 <_isatty>
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	d102      	bne.n	800a322 <_isatty_r+0x1a>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	b103      	cbz	r3, 800a322 <_isatty_r+0x1a>
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	20001fdc 	.word	0x20001fdc

0800a328 <_malloc_usable_size_r>:
 800a328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a32c:	1f18      	subs	r0, r3, #4
 800a32e:	2b00      	cmp	r3, #0
 800a330:	bfbc      	itt	lt
 800a332:	580b      	ldrlt	r3, [r1, r0]
 800a334:	18c0      	addlt	r0, r0, r3
 800a336:	4770      	bx	lr

0800a338 <_init>:
 800a338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33a:	bf00      	nop
 800a33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a33e:	bc08      	pop	{r3}
 800a340:	469e      	mov	lr, r3
 800a342:	4770      	bx	lr

0800a344 <_fini>:
 800a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a346:	bf00      	nop
 800a348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a34a:	bc08      	pop	{r3}
 800a34c:	469e      	mov	lr, r3
 800a34e:	4770      	bx	lr
